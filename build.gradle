/*
 * Copyright 2023 Heroic Labs
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import org.gradle.plugins.ide.eclipse.model.SourceFolder

// dependencies required by the gradle build script itself
buildscript {
    repositories {
        // where to resolve the dependencies
        maven {
            url 'https://maven-central.storage-download.googleapis.com/repos/central/data/'
        }
        google()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.18'
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'com.google.protobuf' version '0.8.18'
    id 'io.freefair.lombok' version '5.1.1'
    //for distTar which is called when importing this SDK w/ JitPack
    id 'distribution'
    id 'maven-publish'
    id 'java'
    id 'java-library'
}

lombok {
    version = '1.18.12'
}

group = 'com.github.heroiclabs'
version = '2.2.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    // where to pull dependencies from
    maven {
        url 'https://maven-central.storage-download.googleapis.com/repos/central/data/'
    }
    mavenLocal()
    mavenCentral()
}

configurations {
    all {
        exclude group: 'io.grpc', module:'grpc-protobuf'
        exclude group: 'com.google.protobuf', module: 'protobuf-java'
    }
    sharedProtobuf.extendsFrom protobuf
    sharedApi.extendsFrom api
    sharedImplementation.extendsFrom implementation
    sharedTestImplementation.extendsFrom testImplementation
}

dependencies {
    shadow localGroovy()
    shadow gradleApi()

    implementation 'com.google.code.gson:gson:2.8.9'
    api 'io.grpc:grpc-protobuf-lite:1.43.2'
    // listenable future is part of the SDK public API
    api 'com.google.guava:guava:31.0.1-android'
    implementation 'com.google.protobuf:protobuf-javalite:3.19.3'

    implementation('io.grpc:grpc-okhttp:1.48.0') {
        exclude group: 'com.squareup.okio', module:'okio'
    }

    implementation 'com.squareup.okio:okio:2.10.0'
    implementation 'com.squareup.okhttp3:okhttp:4.9.3'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'io.grpc:grpc-netty-shaded:1.43.2'
    implementation 'io.grpc:grpc-stub:1.43.2'
    compileOnly 'org.apache.tomcat:annotations-api:6.0.53'
    implementation 'org.slf4j:slf4j-simple:1.7.9'

    protobuf 'com.google.api.grpc:proto-google-common-protos:2.7.1'
    testImplementation 'junit:junit:4.13.2'
}

tasks.named('shadowJar', ShadowJar) {
    enableRelocation true
    relocationPrefix 'heroiclabs'
}

sourceSets {
    nakama {
        java {
            srcDirs 'src/nakama/java'
            compileClasspath += configurations.sharedImplementation
            compileClasspath += configurations.sharedApi
            compileClasspath += configurations.sharedProtobuf
            runtimeClasspath += configurations.sharedImplementation
            runtimeClasspath += configurations.sharedApi
            runtimeClasspath += configurations.sharedProtobuf
        }

        proto {
            srcDir 'src/main/proto'
            exclude "satori.proto"
        }
    }

    satori {
        java {
            srcDirs 'src/satori/java'
            compileClasspath += configurations.sharedImplementation
            compileClasspath += configurations.sharedApi
            compileClasspath += configurations.sharedProtobuf
            runtimeClasspath += configurations.sharedImplementation
            runtimeClasspath += configurations.sharedApi
            runtimeClasspath += configurations.sharedProtobuf
        }

        proto {
            srcDir 'src/main/proto'
            exclude "apigrpc.proto"
        }
    }

    nakamaTest {
        java {
            srcDirs 'src/nakama/test'
        }
        compileClasspath += sourceSets.nakama.output
        compileClasspath += configurations.sharedTestImplementation
        runtimeClasspath += sourceSets.nakama.output
        runtimeClasspath += configurations.sharedTestImplementation
    }

    satoriTest {
        java {
            srcDirs 'src/satori/test'
        }
        compileClasspath += sourceSets.satori.output
        compileClasspath += configurations.sharedTestImplementation
        runtimeClasspath += sourceSets.satori.output
        runtimeClasspath += configurations.sharedTestImplementation
    }
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.19.3'
    }

    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.43.2'
        }
    }

    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option 'lite'
                }
            }

            task.plugins {
                grpc { option 'lite' }
            }
        }
    }
}

def pomConfig = {
    licenses {
        license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
        }
    }
    developers {
        developer {
            id 'andreimihu'
            name 'Andrei Mihu'
            email 'andrei@heroiclabs.com'
        }
        developer {
            id 'cmolozian'
            name 'Chris Molozian'
            email 'chris@heroiclabs.com'
        }
        developer {
            id 'mofirouz'
            name 'Mo Firouz'
            email 'mo@heroiclabs.com'
        }
    }
    scm {
        url 'https://github.com/heroiclabs/nakama-java'
    }
}

task nakamaJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Nakama client',
                   'Implementation-Version': "$project.version"
    }
    archiveBaseName = 'nakama-java'
    version = project.version
    from sourceSets.nakama.output
}

task satoriJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Satori client',
                   'Implementation-Version': "$project.version"
    }
    archiveBaseName = 'satori-java'
    version = project.version
    from sourceSets.satori.output
}

publishing {
    publications {
        nakama(MavenPublication) {
            artifact nakamaJar
            artifactId 'nakama-java'
            groupId "$project.group"
            version "$project.version"

            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Java client for Nakama server.')
                root.appendNode('name', 'Nakama client')
                root.appendNode('url', 'https://heroiclabs.com/docs/android-java-client-guide/') // TODO update this
                root.children().last() + pomConfig
            }
        }

        satori(MavenPublication) {
            artifact satoriJar
            artifactId 'satori-java'
            groupId "$project.group"
            version "$project.version"

            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Java client for Satori server.')
                root.appendNode('name', 'Satori client')
                root.appendNode('url', 'https://heroiclabs.com/docs/android-java-client-guide/') // TODO update this
                root.children().last() + pomConfig
            }
        }
    }
}

task nakamaTest(type: Test) {
    testClassesDirs = sourceSets.nakamaTest.output.classesDirs
    classpath = sourceSets.nakamaTest.runtimeClasspath
}

task satoriTest(type: Test) {
    testClassesDirs = sourceSets.satoriTest.output.classesDirs
    classpath = sourceSets.satoriTest.runtimeClasspath
}

task nakamaShadowJar(type: ShadowJar) {
    from sourceSets.nakama.output
    configurations = [configurations.sharedImplementation, configurations.sharedApi, configurations.sharedProtobuf]
    archiveFileName.set("nakama-java-${version}-all.jar")
}

task satoriShadowJar(type: ShadowJar) {
    from sourceSets.satori.output
    configurations = [configurations.sharedImplementation, configurations.sharedApi, configurations.sharedProtobuf]
    archiveFileName.set("satori-java-${version}-all.jar")
}

javadoc {
    destinationDir = file('docs')
    options.addBooleanOption('Xdoclint:-missing', true)
}

test {
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
}
