/*
 * Copyright 2018 Heroic Labs
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        maven {
            url "https://maven-central.storage-download.googleapis.com/repos/central/data/"
        }
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.12'
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'eclipse'
    id 'com.github.johnrengelman.shadow' version '2.0.4'
    id 'org.ajoberstar.git-publish' version '2.1.3'
    id 'com.jfrog.bintray' version '1.8.4'
    id 'maven-publish'
    id 'com.google.protobuf' version '0.8.12'
}

group = 'com.heroiclabs.nakama'
version = '2.0.5-SNAPSHOT'
def description = 'Android optimized Java client for Nakama server.'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    maven {
        url "https://maven-central.storage-download.googleapis.com/repos/central/data/"
    }
    mavenLocal()
    mavenCentral()
}

dependencies {
    annotationProcessor 'org.projectlombok:lombok:1.18.10'
    implementation("org.projectlombok:lombok:1.18.10")

    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.google.protobuf:protobuf-lite:3.0.1'
    implementation ('io.grpc:grpc-okhttp:1.21.0') {
        exclude group: 'com.squareup.okio', module:'okio'
    }
    implementation 'com.squareup.okio:okio:1.14.0'
    implementation 'com.squareup.okhttp3:okhttp:3.11.0'
    implementation 'io.grpc:grpc-protobuf-lite:1.21.0'
    implementation 'io.grpc:grpc-stub:1.21.0'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation ('com.google.api.grpc:googleapis-common-protos:0.0.3') {
        exclude group: 'io.grpc', module:'grpc-protobuf'
    }
    implementation ('org.slf4j:slf4j-api:1.7.25') {
        force = true // don't upgrade to "1.8.0-alpha2"
    }
    testCompile 'junit:junit:4.12'
    testCompile "org.slf4j:slf4j-simple:1.7.9" //logger for testing

}

sourceSets {
    main {
        java {
            srcDirs "src/main/java"
        }
    }
}


idea {
    module {
        sourceDirs += file("${protobuf.generatedFilesBaseDir}/main/grpc");
        sourceDirs += file("${protobuf.generatedFilesBaseDir}/main/javalite");
    }
}

/* Disable warnings from generated source code. */
eclipse {
    classpath {
      file {
            beforeMerged {
                def grpcSource = entries.find {
                    it.path == "build/generated/source/proto/main/grpc"
                }

                grpcSource.entryAttributes["ignore_optional_problems"] = 'true'

                def javaLiteSource = entries.find {
                    it.path == "build/generated/source/proto/main/javalite"
                }

                javaLiteSource.entryAttributes["ignore_optional_problems"] = 'true'
            }
        }
    }
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.6.0'
    }
    plugins {
        javalite {
            artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
        }
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:1.14.0"
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                remove java // Don't generate a copy with "protobuf-java".
            }
            task.plugins {
                javalite { // Must activate "javalite" plugin.
                }
                grpc { // Must activate "grpc" plugin.
                    option 'lite'
                }
            }
        }
    }
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Nakama client',
                   'Implementation-Version': "$project.version"
    }
}

def pomConfig = {
    licenses {
        license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
        }
    }
    developers {
        developer {
            id 'andreimihu'
            name 'Andrei Mihu'
            email 'andrei@heroiclabs.com'
        }
        developer {
            id 'cmolozian'
            name 'Chris Molozian'
            email 'chris@heroiclabs.com'
        }
        developer {
            id 'mofirouz'
            name 'Mo Firouz'
            email 'mo@heroiclabs.com'
        }
    }
    scm {
        url 'https://github.com/heroiclabs/nakama-java'
    }
}

 bintray {
     user = bintrayUser
     key = bintrayKey
     publications = ['mavenJava']
     pkg {
         repo = 'default'
         name = 'nakama-client'
         desc = description
         userOrg = 'heroiclabs'
         licenses = ['Apache-2.0']
         vcsUrl = 'https://github.com/heroiclabs/nakama-java.git'
         publicDownloadNumbers = true
         version {
             name = "$project.version"
             released = new Date()
             vcsTag = project.findProperty('vcsTag')
         }
     }
 }

 gitPublish {
     repoUri = 'git@github.com:heroiclabs/nakama-java.git'
     branch = 'gh-pages'
     contents {
         from(javadoc) {
             into "$project.version"
         }
         from(javadoc) {
             into 'current'
         }
     }
     preserve {
         include '0.1.0/**'
         include '0.1.1/**'
         include '0.1.2/**'
         include '0.2.0/**'
         include '0.3.0/**'
     }
     commitMessage = "Published javadoc" + project.version + " via Gradle 6.5.1."
 }


task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
    from javadoc
}

 publishing {
     publications {
         mavenJava(MavenPublication) {
             from components.java

             artifact sourcesJar {
                 classifier 'sources'
             }
             artifact javadocJar {
                 classifier 'javadoc'
             }

             groupId "$project.group"
             artifactId 'client'
             version "$project.version"

             pom.withXml {
                 def root = asNode()
                 root.appendNode('description', description)
                 root.appendNode('name', 'Nakama client')
                 root.appendNode('url', 'https://heroiclabs.com/docs/android-java-client-guide/')
                 root.children().last() + pomConfig
             }
         }
     }
 }

shadowJar {
}

test {
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
}
