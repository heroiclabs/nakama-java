/*
 * Copyright 2020 Heroic Labs
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation

// dependencies required by the gradle build script itself
buildscript {
    repositories {
        // where to resolve the dependencies
        maven {
            url "https://maven-central.storage-download.googleapis.com/repos/central/data/"
        }
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.12'
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'com.google.protobuf' version '0.8.12'
    //for distTar which is called when importing this SDK w/ JitPack
    id 'distribution'
    id 'eclipse'
    id 'maven-publish'
    id 'idea'
    id 'java'
    id 'java-library'
}

group = 'com.heroiclabs.nakama'
version = '2.0.5-SNAPSHOT'
def description = 'Android optimized Java client for Nakama server.'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    // where to pull dependencies from
    maven {
        url "https://maven-central.storage-download.googleapis.com/repos/central/data/"
    }
    mavenLocal()
    mavenCentral()
}

dependencies {
    // syntax sugaring for data models
    annotationProcessor 'org.projectlombok:lombok:1.18.12'
    implementation "org.projectlombok:lombok:1.18.12"

    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.google.protobuf:protobuf-javalite:3.13.0'

    implementation ('io.grpc:grpc-okhttp:1.31.1') {
        exclude group: 'com.squareup.okio', module:'okio'
    }

    implementation 'com.squareup.okio:okio:2.7.0'
    implementation 'com.squareup.okhttp3:okhttp:4.8.1'
    implementation 'io.grpc:grpc-protobuf-lite:1.31.1'
    implementation 'io.grpc:grpc-stub:1.31.1'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'org.slf4j:slf4j-simple:1.7.30'
    implementation ('com.google.api.grpc:googleapis-common-protos:0.0.3') {
        exclude group: 'io.grpc', module:'grpc-protobuf'
    }

    implementation 'org.slf4j:slf4j-api:1.7.30'

    api 'com.google.guava:guava:29.0-android' // listenable future is part of the SDK public API

    testCompile 'junit:junit:4.12'
}

sourceSets {
    main {
        java {
            srcDirs "src/main/java"
        }

        proto {
            exclude 'protoc-gen-swagger/**/*.proto'
        }
    }
}

idea {
    module {
        sourceDirs += file("${protobuf.generatedFilesBaseDir}/main/grpc");
        sourceDirs += file("${protobuf.generatedFilesBaseDir}/main/javalite");
    }
}

/* Disable warnings from generated source code. */
eclipse {
    classpath {
      file {
            beforeMerged {
                def grpcSource = entries.find {
                    it.path == "build/generated/source/proto/main/grpc"
                }

                grpcSource.entryAttributes["ignore_optional_problems"] = 'true'

                def javaLiteSource = entries.find {
                    it.path == "build/generated/source/proto/main/javalite"
                }

                javaLiteSource.entryAttributes["ignore_optional_problems"] = 'true'
            }
        }
    }
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.13.0'
    }

    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:1.31.1"
        }
    }

    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option "lite"
                }
            }

            task.plugins {
                grpc { option "lite" }
            }
        }
    }
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Nakama client',
                   'Implementation-Version': "$project.version"
    }
    exclude '/**/*.proto'
}

def pomConfig = {
    licenses {
        license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
        }
    }
    developers {
        developer {
            id 'andreimihu'
            name 'Andrei Mihu'
            email 'andrei@heroiclabs.com'
        }
        developer {
            id 'cmolozian'
            name 'Chris Molozian'
            email 'chris@heroiclabs.com'
        }
        developer {
            id 'mofirouz'
            name 'Mo Firouz'
            email 'mo@heroiclabs.com'
        }
    }
    scm {
        url 'https://github.com/heroiclabs/nakama-java'
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
}

tasks.withType(AbstractPublishToMaven).all {
    doFirst {
        publication.artifact sourcesJar {
            classifier 'sources'
        }

        publication.groupId "$project.group"
        publication.version "$project.version"

        publication.pom.withXml {
            def root = asNode()
            root.appendNode('description', description)
            root.appendNode('name', 'Nakama client')
            root.appendNode('url', 'https://heroiclabs.com/docs/android-java-client-guide/')
            root.children().last() + pomConfig
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId 'main'
        }

        shadow(MavenPublication) {
            project.shadow.component(it)
            artifactId 'fat'
            artifact jar
        }
    }
}

shadowJar {
    mergeServiceFiles()
    dependencies {
        // provide an actual logger implementation for self-contained shadow jar
        exclude(dependency('org.slf4j:slf4j-simple:1.7.30'))
    }
}

task relocateShadowJar(type: ConfigureShadowRelocation) {
    target = tasks.shadowJar
    prefix = "nakama" // prefix all classpath entries with `nakama`
}

tasks.shadowJar.dependsOn tasks.relocateShadowJar

test {
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
}
