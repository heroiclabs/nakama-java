// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: github.com/heroiclabs/nakama-common/api/api.proto

package com.heroiclabs.nakama.api;

public interface AccountGameCenterOrBuilder extends
    // @@protoc_insertion_point(interface_extends:nakama.api.AccountGameCenter)
    com.google.protobuf.MessageLiteOrBuilder {

  /**
   * <pre>
   * Player ID (generated by GameCenter).
   * </pre>
   *
   * <code>optional string player_id = 1;</code>
   */
  java.lang.String getPlayerId();
  /**
   * <pre>
   * Player ID (generated by GameCenter).
   * </pre>
   *
   * <code>optional string player_id = 1;</code>
   */
  com.google.protobuf.ByteString
      getPlayerIdBytes();

  /**
   * <pre>
   * Bundle ID (generated by GameCenter).
   * </pre>
   *
   * <code>optional string bundle_id = 2;</code>
   */
  java.lang.String getBundleId();
  /**
   * <pre>
   * Bundle ID (generated by GameCenter).
   * </pre>
   *
   * <code>optional string bundle_id = 2;</code>
   */
  com.google.protobuf.ByteString
      getBundleIdBytes();

  /**
   * <pre>
   * Time since UNIX epoch when the signature was created.
   * </pre>
   *
   * <code>optional int64 timestamp_seconds = 3;</code>
   */
  long getTimestampSeconds();

  /**
   * <pre>
   * A random "NSString" used to compute the hash and keep it randomized.
   * </pre>
   *
   * <code>optional string salt = 4;</code>
   */
  java.lang.String getSalt();
  /**
   * <pre>
   * A random "NSString" used to compute the hash and keep it randomized.
   * </pre>
   *
   * <code>optional string salt = 4;</code>
   */
  com.google.protobuf.ByteString
      getSaltBytes();

  /**
   * <pre>
   * The verification signature data generated.
   * </pre>
   *
   * <code>optional string signature = 5;</code>
   */
  java.lang.String getSignature();
  /**
   * <pre>
   * The verification signature data generated.
   * </pre>
   *
   * <code>optional string signature = 5;</code>
   */
  com.google.protobuf.ByteString
      getSignatureBytes();

  /**
   * <pre>
   * The URL for the public encryption key.
   * </pre>
   *
   * <code>optional string public_key_url = 6;</code>
   */
  java.lang.String getPublicKeyUrl();
  /**
   * <pre>
   * The URL for the public encryption key.
   * </pre>
   *
   * <code>optional string public_key_url = 6;</code>
   */
  com.google.protobuf.ByteString
      getPublicKeyUrlBytes();

  /**
   * <pre>
   * Extra information that will be bundled in the session token.
   * </pre>
   *
   * <code>map&lt;string, string&gt; vars = 7;</code>
   */
  int getVarsCount();
  /**
   * <pre>
   * Extra information that will be bundled in the session token.
   * </pre>
   *
   * <code>map&lt;string, string&gt; vars = 7;</code>
   */
  boolean containsVars(
      java.lang.String key);
  /**
   * Use {@link #getVarsMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String>
  getVars();
  /**
   * <pre>
   * Extra information that will be bundled in the session token.
   * </pre>
   *
   * <code>map&lt;string, string&gt; vars = 7;</code>
   */
  java.util.Map<java.lang.String, java.lang.String>
  getVarsMap();
  /**
   * <pre>
   * Extra information that will be bundled in the session token.
   * </pre>
   *
   * <code>map&lt;string, string&gt; vars = 7;</code>
   */

  java.lang.String getVarsOrDefault(
      java.lang.String key,
      java.lang.String defaultValue);
  /**
   * <pre>
   * Extra information that will be bundled in the session token.
   * </pre>
   *
   * <code>map&lt;string, string&gt; vars = 7;</code>
   */

  java.lang.String getVarsOrThrow(
      java.lang.String key);
}
