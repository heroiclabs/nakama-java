// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: github.com/heroiclabs/nakama/api/api.proto

package com.heroiclabs.nakama.api;

/**
 * <pre>
 * A set of leaderboard records, may be part of a leaderboard records page or a batch of individual records.
 * </pre>
 *
 * Protobuf type {@code nakama.api.LeaderboardRecordList}
 */
public  final class LeaderboardRecordList extends
    com.google.protobuf.GeneratedMessageLite<
        LeaderboardRecordList, LeaderboardRecordList.Builder> implements
    // @@protoc_insertion_point(message_implements:nakama.api.LeaderboardRecordList)
    LeaderboardRecordListOrBuilder {
  private LeaderboardRecordList() {
    records_ = emptyProtobufList();
    ownerRecords_ = emptyProtobufList();
    nextCursor_ = "";
    prevCursor_ = "";
  }
  private int bitField0_;
  public static final int RECORDS_FIELD_NUMBER = 1;
  private com.google.protobuf.Internal.ProtobufList<com.heroiclabs.nakama.api.LeaderboardRecord> records_;
  /**
   * <pre>
   * A list of leaderboard records.
   * </pre>
   *
   * <code>repeated .nakama.api.LeaderboardRecord records = 1;</code>
   */
  public java.util.List<com.heroiclabs.nakama.api.LeaderboardRecord> getRecordsList() {
    return records_;
  }
  /**
   * <pre>
   * A list of leaderboard records.
   * </pre>
   *
   * <code>repeated .nakama.api.LeaderboardRecord records = 1;</code>
   */
  public java.util.List<? extends com.heroiclabs.nakama.api.LeaderboardRecordOrBuilder> 
      getRecordsOrBuilderList() {
    return records_;
  }
  /**
   * <pre>
   * A list of leaderboard records.
   * </pre>
   *
   * <code>repeated .nakama.api.LeaderboardRecord records = 1;</code>
   */
  public int getRecordsCount() {
    return records_.size();
  }
  /**
   * <pre>
   * A list of leaderboard records.
   * </pre>
   *
   * <code>repeated .nakama.api.LeaderboardRecord records = 1;</code>
   */
  public com.heroiclabs.nakama.api.LeaderboardRecord getRecords(int index) {
    return records_.get(index);
  }
  /**
   * <pre>
   * A list of leaderboard records.
   * </pre>
   *
   * <code>repeated .nakama.api.LeaderboardRecord records = 1;</code>
   */
  public com.heroiclabs.nakama.api.LeaderboardRecordOrBuilder getRecordsOrBuilder(
      int index) {
    return records_.get(index);
  }
  private void ensureRecordsIsMutable() {
    if (!records_.isModifiable()) {
      records_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(records_);
     }
  }

  /**
   * <pre>
   * A list of leaderboard records.
   * </pre>
   *
   * <code>repeated .nakama.api.LeaderboardRecord records = 1;</code>
   */
  private void setRecords(
      int index, com.heroiclabs.nakama.api.LeaderboardRecord value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureRecordsIsMutable();
    records_.set(index, value);
  }
  /**
   * <pre>
   * A list of leaderboard records.
   * </pre>
   *
   * <code>repeated .nakama.api.LeaderboardRecord records = 1;</code>
   */
  private void setRecords(
      int index, com.heroiclabs.nakama.api.LeaderboardRecord.Builder builderForValue) {
    ensureRecordsIsMutable();
    records_.set(index, builderForValue.build());
  }
  /**
   * <pre>
   * A list of leaderboard records.
   * </pre>
   *
   * <code>repeated .nakama.api.LeaderboardRecord records = 1;</code>
   */
  private void addRecords(com.heroiclabs.nakama.api.LeaderboardRecord value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureRecordsIsMutable();
    records_.add(value);
  }
  /**
   * <pre>
   * A list of leaderboard records.
   * </pre>
   *
   * <code>repeated .nakama.api.LeaderboardRecord records = 1;</code>
   */
  private void addRecords(
      int index, com.heroiclabs.nakama.api.LeaderboardRecord value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureRecordsIsMutable();
    records_.add(index, value);
  }
  /**
   * <pre>
   * A list of leaderboard records.
   * </pre>
   *
   * <code>repeated .nakama.api.LeaderboardRecord records = 1;</code>
   */
  private void addRecords(
      com.heroiclabs.nakama.api.LeaderboardRecord.Builder builderForValue) {
    ensureRecordsIsMutable();
    records_.add(builderForValue.build());
  }
  /**
   * <pre>
   * A list of leaderboard records.
   * </pre>
   *
   * <code>repeated .nakama.api.LeaderboardRecord records = 1;</code>
   */
  private void addRecords(
      int index, com.heroiclabs.nakama.api.LeaderboardRecord.Builder builderForValue) {
    ensureRecordsIsMutable();
    records_.add(index, builderForValue.build());
  }
  /**
   * <pre>
   * A list of leaderboard records.
   * </pre>
   *
   * <code>repeated .nakama.api.LeaderboardRecord records = 1;</code>
   */
  private void addAllRecords(
      java.lang.Iterable<? extends com.heroiclabs.nakama.api.LeaderboardRecord> values) {
    ensureRecordsIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, records_);
  }
  /**
   * <pre>
   * A list of leaderboard records.
   * </pre>
   *
   * <code>repeated .nakama.api.LeaderboardRecord records = 1;</code>
   */
  private void clearRecords() {
    records_ = emptyProtobufList();
  }
  /**
   * <pre>
   * A list of leaderboard records.
   * </pre>
   *
   * <code>repeated .nakama.api.LeaderboardRecord records = 1;</code>
   */
  private void removeRecords(int index) {
    ensureRecordsIsMutable();
    records_.remove(index);
  }

  public static final int OWNER_RECORDS_FIELD_NUMBER = 2;
  private com.google.protobuf.Internal.ProtobufList<com.heroiclabs.nakama.api.LeaderboardRecord> ownerRecords_;
  /**
   * <pre>
   * A batched set of leaderobard records belonging to specified owners.
   * </pre>
   *
   * <code>repeated .nakama.api.LeaderboardRecord owner_records = 2;</code>
   */
  public java.util.List<com.heroiclabs.nakama.api.LeaderboardRecord> getOwnerRecordsList() {
    return ownerRecords_;
  }
  /**
   * <pre>
   * A batched set of leaderobard records belonging to specified owners.
   * </pre>
   *
   * <code>repeated .nakama.api.LeaderboardRecord owner_records = 2;</code>
   */
  public java.util.List<? extends com.heroiclabs.nakama.api.LeaderboardRecordOrBuilder> 
      getOwnerRecordsOrBuilderList() {
    return ownerRecords_;
  }
  /**
   * <pre>
   * A batched set of leaderobard records belonging to specified owners.
   * </pre>
   *
   * <code>repeated .nakama.api.LeaderboardRecord owner_records = 2;</code>
   */
  public int getOwnerRecordsCount() {
    return ownerRecords_.size();
  }
  /**
   * <pre>
   * A batched set of leaderobard records belonging to specified owners.
   * </pre>
   *
   * <code>repeated .nakama.api.LeaderboardRecord owner_records = 2;</code>
   */
  public com.heroiclabs.nakama.api.LeaderboardRecord getOwnerRecords(int index) {
    return ownerRecords_.get(index);
  }
  /**
   * <pre>
   * A batched set of leaderobard records belonging to specified owners.
   * </pre>
   *
   * <code>repeated .nakama.api.LeaderboardRecord owner_records = 2;</code>
   */
  public com.heroiclabs.nakama.api.LeaderboardRecordOrBuilder getOwnerRecordsOrBuilder(
      int index) {
    return ownerRecords_.get(index);
  }
  private void ensureOwnerRecordsIsMutable() {
    if (!ownerRecords_.isModifiable()) {
      ownerRecords_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(ownerRecords_);
     }
  }

  /**
   * <pre>
   * A batched set of leaderobard records belonging to specified owners.
   * </pre>
   *
   * <code>repeated .nakama.api.LeaderboardRecord owner_records = 2;</code>
   */
  private void setOwnerRecords(
      int index, com.heroiclabs.nakama.api.LeaderboardRecord value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureOwnerRecordsIsMutable();
    ownerRecords_.set(index, value);
  }
  /**
   * <pre>
   * A batched set of leaderobard records belonging to specified owners.
   * </pre>
   *
   * <code>repeated .nakama.api.LeaderboardRecord owner_records = 2;</code>
   */
  private void setOwnerRecords(
      int index, com.heroiclabs.nakama.api.LeaderboardRecord.Builder builderForValue) {
    ensureOwnerRecordsIsMutable();
    ownerRecords_.set(index, builderForValue.build());
  }
  /**
   * <pre>
   * A batched set of leaderobard records belonging to specified owners.
   * </pre>
   *
   * <code>repeated .nakama.api.LeaderboardRecord owner_records = 2;</code>
   */
  private void addOwnerRecords(com.heroiclabs.nakama.api.LeaderboardRecord value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureOwnerRecordsIsMutable();
    ownerRecords_.add(value);
  }
  /**
   * <pre>
   * A batched set of leaderobard records belonging to specified owners.
   * </pre>
   *
   * <code>repeated .nakama.api.LeaderboardRecord owner_records = 2;</code>
   */
  private void addOwnerRecords(
      int index, com.heroiclabs.nakama.api.LeaderboardRecord value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureOwnerRecordsIsMutable();
    ownerRecords_.add(index, value);
  }
  /**
   * <pre>
   * A batched set of leaderobard records belonging to specified owners.
   * </pre>
   *
   * <code>repeated .nakama.api.LeaderboardRecord owner_records = 2;</code>
   */
  private void addOwnerRecords(
      com.heroiclabs.nakama.api.LeaderboardRecord.Builder builderForValue) {
    ensureOwnerRecordsIsMutable();
    ownerRecords_.add(builderForValue.build());
  }
  /**
   * <pre>
   * A batched set of leaderobard records belonging to specified owners.
   * </pre>
   *
   * <code>repeated .nakama.api.LeaderboardRecord owner_records = 2;</code>
   */
  private void addOwnerRecords(
      int index, com.heroiclabs.nakama.api.LeaderboardRecord.Builder builderForValue) {
    ensureOwnerRecordsIsMutable();
    ownerRecords_.add(index, builderForValue.build());
  }
  /**
   * <pre>
   * A batched set of leaderobard records belonging to specified owners.
   * </pre>
   *
   * <code>repeated .nakama.api.LeaderboardRecord owner_records = 2;</code>
   */
  private void addAllOwnerRecords(
      java.lang.Iterable<? extends com.heroiclabs.nakama.api.LeaderboardRecord> values) {
    ensureOwnerRecordsIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, ownerRecords_);
  }
  /**
   * <pre>
   * A batched set of leaderobard records belonging to specified owners.
   * </pre>
   *
   * <code>repeated .nakama.api.LeaderboardRecord owner_records = 2;</code>
   */
  private void clearOwnerRecords() {
    ownerRecords_ = emptyProtobufList();
  }
  /**
   * <pre>
   * A batched set of leaderobard records belonging to specified owners.
   * </pre>
   *
   * <code>repeated .nakama.api.LeaderboardRecord owner_records = 2;</code>
   */
  private void removeOwnerRecords(int index) {
    ensureOwnerRecordsIsMutable();
    ownerRecords_.remove(index);
  }

  public static final int NEXT_CURSOR_FIELD_NUMBER = 3;
  private java.lang.String nextCursor_;
  /**
   * <pre>
   * The cursor to send when retireving the next page, if any.
   * </pre>
   *
   * <code>optional string next_cursor = 3;</code>
   */
  public java.lang.String getNextCursor() {
    return nextCursor_;
  }
  /**
   * <pre>
   * The cursor to send when retireving the next page, if any.
   * </pre>
   *
   * <code>optional string next_cursor = 3;</code>
   */
  public com.google.protobuf.ByteString
      getNextCursorBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(nextCursor_);
  }
  /**
   * <pre>
   * The cursor to send when retireving the next page, if any.
   * </pre>
   *
   * <code>optional string next_cursor = 3;</code>
   */
  private void setNextCursor(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  
    nextCursor_ = value;
  }
  /**
   * <pre>
   * The cursor to send when retireving the next page, if any.
   * </pre>
   *
   * <code>optional string next_cursor = 3;</code>
   */
  private void clearNextCursor() {
    
    nextCursor_ = getDefaultInstance().getNextCursor();
  }
  /**
   * <pre>
   * The cursor to send when retireving the next page, if any.
   * </pre>
   *
   * <code>optional string next_cursor = 3;</code>
   */
  private void setNextCursorBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    
    nextCursor_ = value.toStringUtf8();
  }

  public static final int PREV_CURSOR_FIELD_NUMBER = 4;
  private java.lang.String prevCursor_;
  /**
   * <pre>
   * The cursor to send when retrieving the previous page, if any.
   * </pre>
   *
   * <code>optional string prev_cursor = 4;</code>
   */
  public java.lang.String getPrevCursor() {
    return prevCursor_;
  }
  /**
   * <pre>
   * The cursor to send when retrieving the previous page, if any.
   * </pre>
   *
   * <code>optional string prev_cursor = 4;</code>
   */
  public com.google.protobuf.ByteString
      getPrevCursorBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(prevCursor_);
  }
  /**
   * <pre>
   * The cursor to send when retrieving the previous page, if any.
   * </pre>
   *
   * <code>optional string prev_cursor = 4;</code>
   */
  private void setPrevCursor(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  
    prevCursor_ = value;
  }
  /**
   * <pre>
   * The cursor to send when retrieving the previous page, if any.
   * </pre>
   *
   * <code>optional string prev_cursor = 4;</code>
   */
  private void clearPrevCursor() {
    
    prevCursor_ = getDefaultInstance().getPrevCursor();
  }
  /**
   * <pre>
   * The cursor to send when retrieving the previous page, if any.
   * </pre>
   *
   * <code>optional string prev_cursor = 4;</code>
   */
  private void setPrevCursorBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    
    prevCursor_ = value.toStringUtf8();
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < records_.size(); i++) {
      output.writeMessage(1, records_.get(i));
    }
    for (int i = 0; i < ownerRecords_.size(); i++) {
      output.writeMessage(2, ownerRecords_.get(i));
    }
    if (!nextCursor_.isEmpty()) {
      output.writeString(3, getNextCursor());
    }
    if (!prevCursor_.isEmpty()) {
      output.writeString(4, getPrevCursor());
    }
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < records_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, records_.get(i));
    }
    for (int i = 0; i < ownerRecords_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, ownerRecords_.get(i));
    }
    if (!nextCursor_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(3, getNextCursor());
    }
    if (!prevCursor_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(4, getPrevCursor());
    }
    memoizedSerializedSize = size;
    return size;
  }

  public static com.heroiclabs.nakama.api.LeaderboardRecordList parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.heroiclabs.nakama.api.LeaderboardRecordList parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.heroiclabs.nakama.api.LeaderboardRecordList parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.heroiclabs.nakama.api.LeaderboardRecordList parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.heroiclabs.nakama.api.LeaderboardRecordList parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.heroiclabs.nakama.api.LeaderboardRecordList parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.heroiclabs.nakama.api.LeaderboardRecordList parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.heroiclabs.nakama.api.LeaderboardRecordList parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.heroiclabs.nakama.api.LeaderboardRecordList parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.heroiclabs.nakama.api.LeaderboardRecordList parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.heroiclabs.nakama.api.LeaderboardRecordList prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * A set of leaderboard records, may be part of a leaderboard records page or a batch of individual records.
   * </pre>
   *
   * Protobuf type {@code nakama.api.LeaderboardRecordList}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.heroiclabs.nakama.api.LeaderboardRecordList, Builder> implements
      // @@protoc_insertion_point(builder_implements:nakama.api.LeaderboardRecordList)
      com.heroiclabs.nakama.api.LeaderboardRecordListOrBuilder {
    // Construct using com.heroiclabs.nakama.api.LeaderboardRecordList.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * A list of leaderboard records.
     * </pre>
     *
     * <code>repeated .nakama.api.LeaderboardRecord records = 1;</code>
     */
    public java.util.List<com.heroiclabs.nakama.api.LeaderboardRecord> getRecordsList() {
      return java.util.Collections.unmodifiableList(
          instance.getRecordsList());
    }
    /**
     * <pre>
     * A list of leaderboard records.
     * </pre>
     *
     * <code>repeated .nakama.api.LeaderboardRecord records = 1;</code>
     */
    public int getRecordsCount() {
      return instance.getRecordsCount();
    }/**
     * <pre>
     * A list of leaderboard records.
     * </pre>
     *
     * <code>repeated .nakama.api.LeaderboardRecord records = 1;</code>
     */
    public com.heroiclabs.nakama.api.LeaderboardRecord getRecords(int index) {
      return instance.getRecords(index);
    }
    /**
     * <pre>
     * A list of leaderboard records.
     * </pre>
     *
     * <code>repeated .nakama.api.LeaderboardRecord records = 1;</code>
     */
    public Builder setRecords(
        int index, com.heroiclabs.nakama.api.LeaderboardRecord value) {
      copyOnWrite();
      instance.setRecords(index, value);
      return this;
    }
    /**
     * <pre>
     * A list of leaderboard records.
     * </pre>
     *
     * <code>repeated .nakama.api.LeaderboardRecord records = 1;</code>
     */
    public Builder setRecords(
        int index, com.heroiclabs.nakama.api.LeaderboardRecord.Builder builderForValue) {
      copyOnWrite();
      instance.setRecords(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * A list of leaderboard records.
     * </pre>
     *
     * <code>repeated .nakama.api.LeaderboardRecord records = 1;</code>
     */
    public Builder addRecords(com.heroiclabs.nakama.api.LeaderboardRecord value) {
      copyOnWrite();
      instance.addRecords(value);
      return this;
    }
    /**
     * <pre>
     * A list of leaderboard records.
     * </pre>
     *
     * <code>repeated .nakama.api.LeaderboardRecord records = 1;</code>
     */
    public Builder addRecords(
        int index, com.heroiclabs.nakama.api.LeaderboardRecord value) {
      copyOnWrite();
      instance.addRecords(index, value);
      return this;
    }
    /**
     * <pre>
     * A list of leaderboard records.
     * </pre>
     *
     * <code>repeated .nakama.api.LeaderboardRecord records = 1;</code>
     */
    public Builder addRecords(
        com.heroiclabs.nakama.api.LeaderboardRecord.Builder builderForValue) {
      copyOnWrite();
      instance.addRecords(builderForValue);
      return this;
    }
    /**
     * <pre>
     * A list of leaderboard records.
     * </pre>
     *
     * <code>repeated .nakama.api.LeaderboardRecord records = 1;</code>
     */
    public Builder addRecords(
        int index, com.heroiclabs.nakama.api.LeaderboardRecord.Builder builderForValue) {
      copyOnWrite();
      instance.addRecords(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * A list of leaderboard records.
     * </pre>
     *
     * <code>repeated .nakama.api.LeaderboardRecord records = 1;</code>
     */
    public Builder addAllRecords(
        java.lang.Iterable<? extends com.heroiclabs.nakama.api.LeaderboardRecord> values) {
      copyOnWrite();
      instance.addAllRecords(values);
      return this;
    }
    /**
     * <pre>
     * A list of leaderboard records.
     * </pre>
     *
     * <code>repeated .nakama.api.LeaderboardRecord records = 1;</code>
     */
    public Builder clearRecords() {
      copyOnWrite();
      instance.clearRecords();
      return this;
    }
    /**
     * <pre>
     * A list of leaderboard records.
     * </pre>
     *
     * <code>repeated .nakama.api.LeaderboardRecord records = 1;</code>
     */
    public Builder removeRecords(int index) {
      copyOnWrite();
      instance.removeRecords(index);
      return this;
    }

    /**
     * <pre>
     * A batched set of leaderobard records belonging to specified owners.
     * </pre>
     *
     * <code>repeated .nakama.api.LeaderboardRecord owner_records = 2;</code>
     */
    public java.util.List<com.heroiclabs.nakama.api.LeaderboardRecord> getOwnerRecordsList() {
      return java.util.Collections.unmodifiableList(
          instance.getOwnerRecordsList());
    }
    /**
     * <pre>
     * A batched set of leaderobard records belonging to specified owners.
     * </pre>
     *
     * <code>repeated .nakama.api.LeaderboardRecord owner_records = 2;</code>
     */
    public int getOwnerRecordsCount() {
      return instance.getOwnerRecordsCount();
    }/**
     * <pre>
     * A batched set of leaderobard records belonging to specified owners.
     * </pre>
     *
     * <code>repeated .nakama.api.LeaderboardRecord owner_records = 2;</code>
     */
    public com.heroiclabs.nakama.api.LeaderboardRecord getOwnerRecords(int index) {
      return instance.getOwnerRecords(index);
    }
    /**
     * <pre>
     * A batched set of leaderobard records belonging to specified owners.
     * </pre>
     *
     * <code>repeated .nakama.api.LeaderboardRecord owner_records = 2;</code>
     */
    public Builder setOwnerRecords(
        int index, com.heroiclabs.nakama.api.LeaderboardRecord value) {
      copyOnWrite();
      instance.setOwnerRecords(index, value);
      return this;
    }
    /**
     * <pre>
     * A batched set of leaderobard records belonging to specified owners.
     * </pre>
     *
     * <code>repeated .nakama.api.LeaderboardRecord owner_records = 2;</code>
     */
    public Builder setOwnerRecords(
        int index, com.heroiclabs.nakama.api.LeaderboardRecord.Builder builderForValue) {
      copyOnWrite();
      instance.setOwnerRecords(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * A batched set of leaderobard records belonging to specified owners.
     * </pre>
     *
     * <code>repeated .nakama.api.LeaderboardRecord owner_records = 2;</code>
     */
    public Builder addOwnerRecords(com.heroiclabs.nakama.api.LeaderboardRecord value) {
      copyOnWrite();
      instance.addOwnerRecords(value);
      return this;
    }
    /**
     * <pre>
     * A batched set of leaderobard records belonging to specified owners.
     * </pre>
     *
     * <code>repeated .nakama.api.LeaderboardRecord owner_records = 2;</code>
     */
    public Builder addOwnerRecords(
        int index, com.heroiclabs.nakama.api.LeaderboardRecord value) {
      copyOnWrite();
      instance.addOwnerRecords(index, value);
      return this;
    }
    /**
     * <pre>
     * A batched set of leaderobard records belonging to specified owners.
     * </pre>
     *
     * <code>repeated .nakama.api.LeaderboardRecord owner_records = 2;</code>
     */
    public Builder addOwnerRecords(
        com.heroiclabs.nakama.api.LeaderboardRecord.Builder builderForValue) {
      copyOnWrite();
      instance.addOwnerRecords(builderForValue);
      return this;
    }
    /**
     * <pre>
     * A batched set of leaderobard records belonging to specified owners.
     * </pre>
     *
     * <code>repeated .nakama.api.LeaderboardRecord owner_records = 2;</code>
     */
    public Builder addOwnerRecords(
        int index, com.heroiclabs.nakama.api.LeaderboardRecord.Builder builderForValue) {
      copyOnWrite();
      instance.addOwnerRecords(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * A batched set of leaderobard records belonging to specified owners.
     * </pre>
     *
     * <code>repeated .nakama.api.LeaderboardRecord owner_records = 2;</code>
     */
    public Builder addAllOwnerRecords(
        java.lang.Iterable<? extends com.heroiclabs.nakama.api.LeaderboardRecord> values) {
      copyOnWrite();
      instance.addAllOwnerRecords(values);
      return this;
    }
    /**
     * <pre>
     * A batched set of leaderobard records belonging to specified owners.
     * </pre>
     *
     * <code>repeated .nakama.api.LeaderboardRecord owner_records = 2;</code>
     */
    public Builder clearOwnerRecords() {
      copyOnWrite();
      instance.clearOwnerRecords();
      return this;
    }
    /**
     * <pre>
     * A batched set of leaderobard records belonging to specified owners.
     * </pre>
     *
     * <code>repeated .nakama.api.LeaderboardRecord owner_records = 2;</code>
     */
    public Builder removeOwnerRecords(int index) {
      copyOnWrite();
      instance.removeOwnerRecords(index);
      return this;
    }

    /**
     * <pre>
     * The cursor to send when retireving the next page, if any.
     * </pre>
     *
     * <code>optional string next_cursor = 3;</code>
     */
    public java.lang.String getNextCursor() {
      return instance.getNextCursor();
    }
    /**
     * <pre>
     * The cursor to send when retireving the next page, if any.
     * </pre>
     *
     * <code>optional string next_cursor = 3;</code>
     */
    public com.google.protobuf.ByteString
        getNextCursorBytes() {
      return instance.getNextCursorBytes();
    }
    /**
     * <pre>
     * The cursor to send when retireving the next page, if any.
     * </pre>
     *
     * <code>optional string next_cursor = 3;</code>
     */
    public Builder setNextCursor(
        java.lang.String value) {
      copyOnWrite();
      instance.setNextCursor(value);
      return this;
    }
    /**
     * <pre>
     * The cursor to send when retireving the next page, if any.
     * </pre>
     *
     * <code>optional string next_cursor = 3;</code>
     */
    public Builder clearNextCursor() {
      copyOnWrite();
      instance.clearNextCursor();
      return this;
    }
    /**
     * <pre>
     * The cursor to send when retireving the next page, if any.
     * </pre>
     *
     * <code>optional string next_cursor = 3;</code>
     */
    public Builder setNextCursorBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setNextCursorBytes(value);
      return this;
    }

    /**
     * <pre>
     * The cursor to send when retrieving the previous page, if any.
     * </pre>
     *
     * <code>optional string prev_cursor = 4;</code>
     */
    public java.lang.String getPrevCursor() {
      return instance.getPrevCursor();
    }
    /**
     * <pre>
     * The cursor to send when retrieving the previous page, if any.
     * </pre>
     *
     * <code>optional string prev_cursor = 4;</code>
     */
    public com.google.protobuf.ByteString
        getPrevCursorBytes() {
      return instance.getPrevCursorBytes();
    }
    /**
     * <pre>
     * The cursor to send when retrieving the previous page, if any.
     * </pre>
     *
     * <code>optional string prev_cursor = 4;</code>
     */
    public Builder setPrevCursor(
        java.lang.String value) {
      copyOnWrite();
      instance.setPrevCursor(value);
      return this;
    }
    /**
     * <pre>
     * The cursor to send when retrieving the previous page, if any.
     * </pre>
     *
     * <code>optional string prev_cursor = 4;</code>
     */
    public Builder clearPrevCursor() {
      copyOnWrite();
      instance.clearPrevCursor();
      return this;
    }
    /**
     * <pre>
     * The cursor to send when retrieving the previous page, if any.
     * </pre>
     *
     * <code>optional string prev_cursor = 4;</code>
     */
    public Builder setPrevCursorBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setPrevCursorBytes(value);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:nakama.api.LeaderboardRecordList)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.heroiclabs.nakama.api.LeaderboardRecordList();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        records_.makeImmutable();
        ownerRecords_.makeImmutable();
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        com.heroiclabs.nakama.api.LeaderboardRecordList other = (com.heroiclabs.nakama.api.LeaderboardRecordList) arg1;
        records_= visitor.visitList(records_, other.records_);
        ownerRecords_= visitor.visitList(ownerRecords_, other.ownerRecords_);
        nextCursor_ = visitor.visitString(!nextCursor_.isEmpty(), nextCursor_,
            !other.nextCursor_.isEmpty(), other.nextCursor_);
        prevCursor_ = visitor.visitString(!prevCursor_.isEmpty(), prevCursor_,
            !other.prevCursor_.isEmpty(), other.prevCursor_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                if (!records_.isModifiable()) {
                  records_ =
                      com.google.protobuf.GeneratedMessageLite.mutableCopy(records_);
                }
                records_.add(
                    input.readMessage(com.heroiclabs.nakama.api.LeaderboardRecord.parser(), extensionRegistry));
                break;
              }
              case 18: {
                if (!ownerRecords_.isModifiable()) {
                  ownerRecords_ =
                      com.google.protobuf.GeneratedMessageLite.mutableCopy(ownerRecords_);
                }
                ownerRecords_.add(
                    input.readMessage(com.heroiclabs.nakama.api.LeaderboardRecord.parser(), extensionRegistry));
                break;
              }
              case 26: {
                String s = input.readStringRequireUtf8();

                nextCursor_ = s;
                break;
              }
              case 34: {
                String s = input.readStringRequireUtf8();

                prevCursor_ = s;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (com.heroiclabs.nakama.api.LeaderboardRecordList.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:nakama.api.LeaderboardRecordList)
  private static final com.heroiclabs.nakama.api.LeaderboardRecordList DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new LeaderboardRecordList();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static com.heroiclabs.nakama.api.LeaderboardRecordList getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<LeaderboardRecordList> PARSER;

  public static com.google.protobuf.Parser<LeaderboardRecordList> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

