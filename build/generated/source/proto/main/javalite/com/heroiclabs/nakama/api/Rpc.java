// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: github.com/heroiclabs/nakama/api/api.proto

package com.heroiclabs.nakama.api;

/**
 * <pre>
 * Execute an Lua function on the server.
 * </pre>
 *
 * Protobuf type {@code nakama.api.Rpc}
 */
public  final class Rpc extends
    com.google.protobuf.GeneratedMessageLite<
        Rpc, Rpc.Builder> implements
    // @@protoc_insertion_point(message_implements:nakama.api.Rpc)
    RpcOrBuilder {
  private Rpc() {
    id_ = "";
    payload_ = "";
    httpKey_ = "";
  }
  public static final int ID_FIELD_NUMBER = 1;
  private java.lang.String id_;
  /**
   * <pre>
   * The identifier of the function.
   * </pre>
   *
   * <code>optional string id = 1;</code>
   */
  public java.lang.String getId() {
    return id_;
  }
  /**
   * <pre>
   * The identifier of the function.
   * </pre>
   *
   * <code>optional string id = 1;</code>
   */
  public com.google.protobuf.ByteString
      getIdBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(id_);
  }
  /**
   * <pre>
   * The identifier of the function.
   * </pre>
   *
   * <code>optional string id = 1;</code>
   */
  private void setId(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  
    id_ = value;
  }
  /**
   * <pre>
   * The identifier of the function.
   * </pre>
   *
   * <code>optional string id = 1;</code>
   */
  private void clearId() {
    
    id_ = getDefaultInstance().getId();
  }
  /**
   * <pre>
   * The identifier of the function.
   * </pre>
   *
   * <code>optional string id = 1;</code>
   */
  private void setIdBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    
    id_ = value.toStringUtf8();
  }

  public static final int PAYLOAD_FIELD_NUMBER = 2;
  private java.lang.String payload_;
  /**
   * <pre>
   * The payload of the function which must be a JSON object.
   * </pre>
   *
   * <code>optional string payload = 2;</code>
   */
  public java.lang.String getPayload() {
    return payload_;
  }
  /**
   * <pre>
   * The payload of the function which must be a JSON object.
   * </pre>
   *
   * <code>optional string payload = 2;</code>
   */
  public com.google.protobuf.ByteString
      getPayloadBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(payload_);
  }
  /**
   * <pre>
   * The payload of the function which must be a JSON object.
   * </pre>
   *
   * <code>optional string payload = 2;</code>
   */
  private void setPayload(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  
    payload_ = value;
  }
  /**
   * <pre>
   * The payload of the function which must be a JSON object.
   * </pre>
   *
   * <code>optional string payload = 2;</code>
   */
  private void clearPayload() {
    
    payload_ = getDefaultInstance().getPayload();
  }
  /**
   * <pre>
   * The payload of the function which must be a JSON object.
   * </pre>
   *
   * <code>optional string payload = 2;</code>
   */
  private void setPayloadBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    
    payload_ = value.toStringUtf8();
  }

  public static final int HTTP_KEY_FIELD_NUMBER = 3;
  private java.lang.String httpKey_;
  /**
   * <pre>
   * The authentication key used when executed as a non-client HTTP request.
   * </pre>
   *
   * <code>optional string http_key = 3;</code>
   */
  public java.lang.String getHttpKey() {
    return httpKey_;
  }
  /**
   * <pre>
   * The authentication key used when executed as a non-client HTTP request.
   * </pre>
   *
   * <code>optional string http_key = 3;</code>
   */
  public com.google.protobuf.ByteString
      getHttpKeyBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(httpKey_);
  }
  /**
   * <pre>
   * The authentication key used when executed as a non-client HTTP request.
   * </pre>
   *
   * <code>optional string http_key = 3;</code>
   */
  private void setHttpKey(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  
    httpKey_ = value;
  }
  /**
   * <pre>
   * The authentication key used when executed as a non-client HTTP request.
   * </pre>
   *
   * <code>optional string http_key = 3;</code>
   */
  private void clearHttpKey() {
    
    httpKey_ = getDefaultInstance().getHttpKey();
  }
  /**
   * <pre>
   * The authentication key used when executed as a non-client HTTP request.
   * </pre>
   *
   * <code>optional string http_key = 3;</code>
   */
  private void setHttpKeyBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    
    httpKey_ = value.toStringUtf8();
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!id_.isEmpty()) {
      output.writeString(1, getId());
    }
    if (!payload_.isEmpty()) {
      output.writeString(2, getPayload());
    }
    if (!httpKey_.isEmpty()) {
      output.writeString(3, getHttpKey());
    }
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (!id_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(1, getId());
    }
    if (!payload_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(2, getPayload());
    }
    if (!httpKey_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(3, getHttpKey());
    }
    memoizedSerializedSize = size;
    return size;
  }

  public static com.heroiclabs.nakama.api.Rpc parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.heroiclabs.nakama.api.Rpc parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.heroiclabs.nakama.api.Rpc parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.heroiclabs.nakama.api.Rpc parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.heroiclabs.nakama.api.Rpc parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.heroiclabs.nakama.api.Rpc parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.heroiclabs.nakama.api.Rpc parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.heroiclabs.nakama.api.Rpc parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.heroiclabs.nakama.api.Rpc parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.heroiclabs.nakama.api.Rpc parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.heroiclabs.nakama.api.Rpc prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * Execute an Lua function on the server.
   * </pre>
   *
   * Protobuf type {@code nakama.api.Rpc}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.heroiclabs.nakama.api.Rpc, Builder> implements
      // @@protoc_insertion_point(builder_implements:nakama.api.Rpc)
      com.heroiclabs.nakama.api.RpcOrBuilder {
    // Construct using com.heroiclabs.nakama.api.Rpc.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * The identifier of the function.
     * </pre>
     *
     * <code>optional string id = 1;</code>
     */
    public java.lang.String getId() {
      return instance.getId();
    }
    /**
     * <pre>
     * The identifier of the function.
     * </pre>
     *
     * <code>optional string id = 1;</code>
     */
    public com.google.protobuf.ByteString
        getIdBytes() {
      return instance.getIdBytes();
    }
    /**
     * <pre>
     * The identifier of the function.
     * </pre>
     *
     * <code>optional string id = 1;</code>
     */
    public Builder setId(
        java.lang.String value) {
      copyOnWrite();
      instance.setId(value);
      return this;
    }
    /**
     * <pre>
     * The identifier of the function.
     * </pre>
     *
     * <code>optional string id = 1;</code>
     */
    public Builder clearId() {
      copyOnWrite();
      instance.clearId();
      return this;
    }
    /**
     * <pre>
     * The identifier of the function.
     * </pre>
     *
     * <code>optional string id = 1;</code>
     */
    public Builder setIdBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setIdBytes(value);
      return this;
    }

    /**
     * <pre>
     * The payload of the function which must be a JSON object.
     * </pre>
     *
     * <code>optional string payload = 2;</code>
     */
    public java.lang.String getPayload() {
      return instance.getPayload();
    }
    /**
     * <pre>
     * The payload of the function which must be a JSON object.
     * </pre>
     *
     * <code>optional string payload = 2;</code>
     */
    public com.google.protobuf.ByteString
        getPayloadBytes() {
      return instance.getPayloadBytes();
    }
    /**
     * <pre>
     * The payload of the function which must be a JSON object.
     * </pre>
     *
     * <code>optional string payload = 2;</code>
     */
    public Builder setPayload(
        java.lang.String value) {
      copyOnWrite();
      instance.setPayload(value);
      return this;
    }
    /**
     * <pre>
     * The payload of the function which must be a JSON object.
     * </pre>
     *
     * <code>optional string payload = 2;</code>
     */
    public Builder clearPayload() {
      copyOnWrite();
      instance.clearPayload();
      return this;
    }
    /**
     * <pre>
     * The payload of the function which must be a JSON object.
     * </pre>
     *
     * <code>optional string payload = 2;</code>
     */
    public Builder setPayloadBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setPayloadBytes(value);
      return this;
    }

    /**
     * <pre>
     * The authentication key used when executed as a non-client HTTP request.
     * </pre>
     *
     * <code>optional string http_key = 3;</code>
     */
    public java.lang.String getHttpKey() {
      return instance.getHttpKey();
    }
    /**
     * <pre>
     * The authentication key used when executed as a non-client HTTP request.
     * </pre>
     *
     * <code>optional string http_key = 3;</code>
     */
    public com.google.protobuf.ByteString
        getHttpKeyBytes() {
      return instance.getHttpKeyBytes();
    }
    /**
     * <pre>
     * The authentication key used when executed as a non-client HTTP request.
     * </pre>
     *
     * <code>optional string http_key = 3;</code>
     */
    public Builder setHttpKey(
        java.lang.String value) {
      copyOnWrite();
      instance.setHttpKey(value);
      return this;
    }
    /**
     * <pre>
     * The authentication key used when executed as a non-client HTTP request.
     * </pre>
     *
     * <code>optional string http_key = 3;</code>
     */
    public Builder clearHttpKey() {
      copyOnWrite();
      instance.clearHttpKey();
      return this;
    }
    /**
     * <pre>
     * The authentication key used when executed as a non-client HTTP request.
     * </pre>
     *
     * <code>optional string http_key = 3;</code>
     */
    public Builder setHttpKeyBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setHttpKeyBytes(value);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:nakama.api.Rpc)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.heroiclabs.nakama.api.Rpc();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        com.heroiclabs.nakama.api.Rpc other = (com.heroiclabs.nakama.api.Rpc) arg1;
        id_ = visitor.visitString(!id_.isEmpty(), id_,
            !other.id_.isEmpty(), other.id_);
        payload_ = visitor.visitString(!payload_.isEmpty(), payload_,
            !other.payload_.isEmpty(), other.payload_);
        httpKey_ = visitor.visitString(!httpKey_.isEmpty(), httpKey_,
            !other.httpKey_.isEmpty(), other.httpKey_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                String s = input.readStringRequireUtf8();

                id_ = s;
                break;
              }
              case 18: {
                String s = input.readStringRequireUtf8();

                payload_ = s;
                break;
              }
              case 26: {
                String s = input.readStringRequireUtf8();

                httpKey_ = s;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (com.heroiclabs.nakama.api.Rpc.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:nakama.api.Rpc)
  private static final com.heroiclabs.nakama.api.Rpc DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new Rpc();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static com.heroiclabs.nakama.api.Rpc getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<Rpc> PARSER;

  public static com.google.protobuf.Parser<Rpc> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

