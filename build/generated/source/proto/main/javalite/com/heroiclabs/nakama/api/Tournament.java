// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: github.com/heroiclabs/nakama-common/api/api.proto

package com.heroiclabs.nakama.api;

/**
 * <pre>
 * A tournament on the server.
 * </pre>
 *
 * Protobuf type {@code nakama.api.Tournament}
 */
public  final class Tournament extends
    com.google.protobuf.GeneratedMessageLite<
        Tournament, Tournament.Builder> implements
    // @@protoc_insertion_point(message_implements:nakama.api.Tournament)
    TournamentOrBuilder {
  private Tournament() {
    id_ = "";
    title_ = "";
    description_ = "";
    metadata_ = "";
  }
  public static final int ID_FIELD_NUMBER = 1;
  private java.lang.String id_;
  /**
   * <pre>
   * The ID of the tournament.
   * </pre>
   *
   * <code>optional string id = 1;</code>
   */
  public java.lang.String getId() {
    return id_;
  }
  /**
   * <pre>
   * The ID of the tournament.
   * </pre>
   *
   * <code>optional string id = 1;</code>
   */
  public com.google.protobuf.ByteString
      getIdBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(id_);
  }
  /**
   * <pre>
   * The ID of the tournament.
   * </pre>
   *
   * <code>optional string id = 1;</code>
   */
  private void setId(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  
    id_ = value;
  }
  /**
   * <pre>
   * The ID of the tournament.
   * </pre>
   *
   * <code>optional string id = 1;</code>
   */
  private void clearId() {
    
    id_ = getDefaultInstance().getId();
  }
  /**
   * <pre>
   * The ID of the tournament.
   * </pre>
   *
   * <code>optional string id = 1;</code>
   */
  private void setIdBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    
    id_ = value.toStringUtf8();
  }

  public static final int TITLE_FIELD_NUMBER = 2;
  private java.lang.String title_;
  /**
   * <pre>
   * The title for the tournament.
   * </pre>
   *
   * <code>optional string title = 2;</code>
   */
  public java.lang.String getTitle() {
    return title_;
  }
  /**
   * <pre>
   * The title for the tournament.
   * </pre>
   *
   * <code>optional string title = 2;</code>
   */
  public com.google.protobuf.ByteString
      getTitleBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(title_);
  }
  /**
   * <pre>
   * The title for the tournament.
   * </pre>
   *
   * <code>optional string title = 2;</code>
   */
  private void setTitle(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  
    title_ = value;
  }
  /**
   * <pre>
   * The title for the tournament.
   * </pre>
   *
   * <code>optional string title = 2;</code>
   */
  private void clearTitle() {
    
    title_ = getDefaultInstance().getTitle();
  }
  /**
   * <pre>
   * The title for the tournament.
   * </pre>
   *
   * <code>optional string title = 2;</code>
   */
  private void setTitleBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    
    title_ = value.toStringUtf8();
  }

  public static final int DESCRIPTION_FIELD_NUMBER = 3;
  private java.lang.String description_;
  /**
   * <pre>
   * The description of the tournament. May be blank.
   * </pre>
   *
   * <code>optional string description = 3;</code>
   */
  public java.lang.String getDescription() {
    return description_;
  }
  /**
   * <pre>
   * The description of the tournament. May be blank.
   * </pre>
   *
   * <code>optional string description = 3;</code>
   */
  public com.google.protobuf.ByteString
      getDescriptionBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(description_);
  }
  /**
   * <pre>
   * The description of the tournament. May be blank.
   * </pre>
   *
   * <code>optional string description = 3;</code>
   */
  private void setDescription(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  
    description_ = value;
  }
  /**
   * <pre>
   * The description of the tournament. May be blank.
   * </pre>
   *
   * <code>optional string description = 3;</code>
   */
  private void clearDescription() {
    
    description_ = getDefaultInstance().getDescription();
  }
  /**
   * <pre>
   * The description of the tournament. May be blank.
   * </pre>
   *
   * <code>optional string description = 3;</code>
   */
  private void setDescriptionBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    
    description_ = value.toStringUtf8();
  }

  public static final int CATEGORY_FIELD_NUMBER = 4;
  private int category_;
  /**
   * <pre>
   * The category of the tournament. e.g. "vip" could be category 1.
   * </pre>
   *
   * <code>optional uint32 category = 4;</code>
   */
  public int getCategory() {
    return category_;
  }
  /**
   * <pre>
   * The category of the tournament. e.g. "vip" could be category 1.
   * </pre>
   *
   * <code>optional uint32 category = 4;</code>
   */
  private void setCategory(int value) {
    
    category_ = value;
  }
  /**
   * <pre>
   * The category of the tournament. e.g. "vip" could be category 1.
   * </pre>
   *
   * <code>optional uint32 category = 4;</code>
   */
  private void clearCategory() {
    
    category_ = 0;
  }

  public static final int SORT_ORDER_FIELD_NUMBER = 5;
  private int sortOrder_;
  /**
   * <pre>
   * ASC or DESC sort mode of scores in the tournament.
   * </pre>
   *
   * <code>optional uint32 sort_order = 5;</code>
   */
  public int getSortOrder() {
    return sortOrder_;
  }
  /**
   * <pre>
   * ASC or DESC sort mode of scores in the tournament.
   * </pre>
   *
   * <code>optional uint32 sort_order = 5;</code>
   */
  private void setSortOrder(int value) {
    
    sortOrder_ = value;
  }
  /**
   * <pre>
   * ASC or DESC sort mode of scores in the tournament.
   * </pre>
   *
   * <code>optional uint32 sort_order = 5;</code>
   */
  private void clearSortOrder() {
    
    sortOrder_ = 0;
  }

  public static final int SIZE_FIELD_NUMBER = 6;
  private int size_;
  /**
   * <pre>
   * The current number of players in the tournament.
   * </pre>
   *
   * <code>optional uint32 size = 6;</code>
   */
  public int getSize() {
    return size_;
  }
  /**
   * <pre>
   * The current number of players in the tournament.
   * </pre>
   *
   * <code>optional uint32 size = 6;</code>
   */
  private void setSize(int value) {
    
    size_ = value;
  }
  /**
   * <pre>
   * The current number of players in the tournament.
   * </pre>
   *
   * <code>optional uint32 size = 6;</code>
   */
  private void clearSize() {
    
    size_ = 0;
  }

  public static final int MAX_SIZE_FIELD_NUMBER = 7;
  private int maxSize_;
  /**
   * <pre>
   * The maximum number of players for the tournament.
   * </pre>
   *
   * <code>optional uint32 max_size = 7;</code>
   */
  public int getMaxSize() {
    return maxSize_;
  }
  /**
   * <pre>
   * The maximum number of players for the tournament.
   * </pre>
   *
   * <code>optional uint32 max_size = 7;</code>
   */
  private void setMaxSize(int value) {
    
    maxSize_ = value;
  }
  /**
   * <pre>
   * The maximum number of players for the tournament.
   * </pre>
   *
   * <code>optional uint32 max_size = 7;</code>
   */
  private void clearMaxSize() {
    
    maxSize_ = 0;
  }

  public static final int MAX_NUM_SCORE_FIELD_NUMBER = 8;
  private int maxNumScore_;
  /**
   * <pre>
   * The maximum score updates allowed per player for the current tournament.
   * </pre>
   *
   * <code>optional uint32 max_num_score = 8;</code>
   */
  public int getMaxNumScore() {
    return maxNumScore_;
  }
  /**
   * <pre>
   * The maximum score updates allowed per player for the current tournament.
   * </pre>
   *
   * <code>optional uint32 max_num_score = 8;</code>
   */
  private void setMaxNumScore(int value) {
    
    maxNumScore_ = value;
  }
  /**
   * <pre>
   * The maximum score updates allowed per player for the current tournament.
   * </pre>
   *
   * <code>optional uint32 max_num_score = 8;</code>
   */
  private void clearMaxNumScore() {
    
    maxNumScore_ = 0;
  }

  public static final int CAN_ENTER_FIELD_NUMBER = 9;
  private boolean canEnter_;
  /**
   * <pre>
   * True if the tournament is active and can enter. A computed value.
   * </pre>
   *
   * <code>optional bool can_enter = 9;</code>
   */
  public boolean getCanEnter() {
    return canEnter_;
  }
  /**
   * <pre>
   * True if the tournament is active and can enter. A computed value.
   * </pre>
   *
   * <code>optional bool can_enter = 9;</code>
   */
  private void setCanEnter(boolean value) {
    
    canEnter_ = value;
  }
  /**
   * <pre>
   * True if the tournament is active and can enter. A computed value.
   * </pre>
   *
   * <code>optional bool can_enter = 9;</code>
   */
  private void clearCanEnter() {
    
    canEnter_ = false;
  }

  public static final int END_ACTIVE_FIELD_NUMBER = 10;
  private int endActive_;
  /**
   * <pre>
   * The UNIX time when the tournament stops being active until next reset. A computed value.
   * </pre>
   *
   * <code>optional uint32 end_active = 10;</code>
   */
  public int getEndActive() {
    return endActive_;
  }
  /**
   * <pre>
   * The UNIX time when the tournament stops being active until next reset. A computed value.
   * </pre>
   *
   * <code>optional uint32 end_active = 10;</code>
   */
  private void setEndActive(int value) {
    
    endActive_ = value;
  }
  /**
   * <pre>
   * The UNIX time when the tournament stops being active until next reset. A computed value.
   * </pre>
   *
   * <code>optional uint32 end_active = 10;</code>
   */
  private void clearEndActive() {
    
    endActive_ = 0;
  }

  public static final int NEXT_RESET_FIELD_NUMBER = 11;
  private int nextReset_;
  /**
   * <pre>
   * The UNIX time when the tournament is next playable. A computed value.
   * </pre>
   *
   * <code>optional uint32 next_reset = 11;</code>
   */
  public int getNextReset() {
    return nextReset_;
  }
  /**
   * <pre>
   * The UNIX time when the tournament is next playable. A computed value.
   * </pre>
   *
   * <code>optional uint32 next_reset = 11;</code>
   */
  private void setNextReset(int value) {
    
    nextReset_ = value;
  }
  /**
   * <pre>
   * The UNIX time when the tournament is next playable. A computed value.
   * </pre>
   *
   * <code>optional uint32 next_reset = 11;</code>
   */
  private void clearNextReset() {
    
    nextReset_ = 0;
  }

  public static final int METADATA_FIELD_NUMBER = 12;
  private java.lang.String metadata_;
  /**
   * <pre>
   * Additional information stored as a JSON object.
   * </pre>
   *
   * <code>optional string metadata = 12;</code>
   */
  public java.lang.String getMetadata() {
    return metadata_;
  }
  /**
   * <pre>
   * Additional information stored as a JSON object.
   * </pre>
   *
   * <code>optional string metadata = 12;</code>
   */
  public com.google.protobuf.ByteString
      getMetadataBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(metadata_);
  }
  /**
   * <pre>
   * Additional information stored as a JSON object.
   * </pre>
   *
   * <code>optional string metadata = 12;</code>
   */
  private void setMetadata(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  
    metadata_ = value;
  }
  /**
   * <pre>
   * Additional information stored as a JSON object.
   * </pre>
   *
   * <code>optional string metadata = 12;</code>
   */
  private void clearMetadata() {
    
    metadata_ = getDefaultInstance().getMetadata();
  }
  /**
   * <pre>
   * Additional information stored as a JSON object.
   * </pre>
   *
   * <code>optional string metadata = 12;</code>
   */
  private void setMetadataBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    
    metadata_ = value.toStringUtf8();
  }

  public static final int CREATE_TIME_FIELD_NUMBER = 13;
  private com.google.protobuf.Timestamp createTime_;
  /**
   * <pre>
   * The UNIX time when the tournament was created.
   * </pre>
   *
   * <code>optional .google.protobuf.Timestamp create_time = 13;</code>
   */
  public boolean hasCreateTime() {
    return createTime_ != null;
  }
  /**
   * <pre>
   * The UNIX time when the tournament was created.
   * </pre>
   *
   * <code>optional .google.protobuf.Timestamp create_time = 13;</code>
   */
  public com.google.protobuf.Timestamp getCreateTime() {
    return createTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : createTime_;
  }
  /**
   * <pre>
   * The UNIX time when the tournament was created.
   * </pre>
   *
   * <code>optional .google.protobuf.Timestamp create_time = 13;</code>
   */
  private void setCreateTime(com.google.protobuf.Timestamp value) {
    if (value == null) {
      throw new NullPointerException();
    }
    createTime_ = value;
    
    }
  /**
   * <pre>
   * The UNIX time when the tournament was created.
   * </pre>
   *
   * <code>optional .google.protobuf.Timestamp create_time = 13;</code>
   */
  private void setCreateTime(
      com.google.protobuf.Timestamp.Builder builderForValue) {
    createTime_ = builderForValue.build();
    
  }
  /**
   * <pre>
   * The UNIX time when the tournament was created.
   * </pre>
   *
   * <code>optional .google.protobuf.Timestamp create_time = 13;</code>
   */
  private void mergeCreateTime(com.google.protobuf.Timestamp value) {
    if (createTime_ != null &&
        createTime_ != com.google.protobuf.Timestamp.getDefaultInstance()) {
      createTime_ =
        com.google.protobuf.Timestamp.newBuilder(createTime_).mergeFrom(value).buildPartial();
    } else {
      createTime_ = value;
    }
    
  }
  /**
   * <pre>
   * The UNIX time when the tournament was created.
   * </pre>
   *
   * <code>optional .google.protobuf.Timestamp create_time = 13;</code>
   */
  private void clearCreateTime() {  createTime_ = null;
    
  }

  public static final int START_TIME_FIELD_NUMBER = 14;
  private com.google.protobuf.Timestamp startTime_;
  /**
   * <pre>
   * The UNIX time when the tournament will start.
   * </pre>
   *
   * <code>optional .google.protobuf.Timestamp start_time = 14;</code>
   */
  public boolean hasStartTime() {
    return startTime_ != null;
  }
  /**
   * <pre>
   * The UNIX time when the tournament will start.
   * </pre>
   *
   * <code>optional .google.protobuf.Timestamp start_time = 14;</code>
   */
  public com.google.protobuf.Timestamp getStartTime() {
    return startTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : startTime_;
  }
  /**
   * <pre>
   * The UNIX time when the tournament will start.
   * </pre>
   *
   * <code>optional .google.protobuf.Timestamp start_time = 14;</code>
   */
  private void setStartTime(com.google.protobuf.Timestamp value) {
    if (value == null) {
      throw new NullPointerException();
    }
    startTime_ = value;
    
    }
  /**
   * <pre>
   * The UNIX time when the tournament will start.
   * </pre>
   *
   * <code>optional .google.protobuf.Timestamp start_time = 14;</code>
   */
  private void setStartTime(
      com.google.protobuf.Timestamp.Builder builderForValue) {
    startTime_ = builderForValue.build();
    
  }
  /**
   * <pre>
   * The UNIX time when the tournament will start.
   * </pre>
   *
   * <code>optional .google.protobuf.Timestamp start_time = 14;</code>
   */
  private void mergeStartTime(com.google.protobuf.Timestamp value) {
    if (startTime_ != null &&
        startTime_ != com.google.protobuf.Timestamp.getDefaultInstance()) {
      startTime_ =
        com.google.protobuf.Timestamp.newBuilder(startTime_).mergeFrom(value).buildPartial();
    } else {
      startTime_ = value;
    }
    
  }
  /**
   * <pre>
   * The UNIX time when the tournament will start.
   * </pre>
   *
   * <code>optional .google.protobuf.Timestamp start_time = 14;</code>
   */
  private void clearStartTime() {  startTime_ = null;
    
  }

  public static final int END_TIME_FIELD_NUMBER = 15;
  private com.google.protobuf.Timestamp endTime_;
  /**
   * <pre>
   * The UNIX time when the tournament will be stopped.
   * </pre>
   *
   * <code>optional .google.protobuf.Timestamp end_time = 15;</code>
   */
  public boolean hasEndTime() {
    return endTime_ != null;
  }
  /**
   * <pre>
   * The UNIX time when the tournament will be stopped.
   * </pre>
   *
   * <code>optional .google.protobuf.Timestamp end_time = 15;</code>
   */
  public com.google.protobuf.Timestamp getEndTime() {
    return endTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : endTime_;
  }
  /**
   * <pre>
   * The UNIX time when the tournament will be stopped.
   * </pre>
   *
   * <code>optional .google.protobuf.Timestamp end_time = 15;</code>
   */
  private void setEndTime(com.google.protobuf.Timestamp value) {
    if (value == null) {
      throw new NullPointerException();
    }
    endTime_ = value;
    
    }
  /**
   * <pre>
   * The UNIX time when the tournament will be stopped.
   * </pre>
   *
   * <code>optional .google.protobuf.Timestamp end_time = 15;</code>
   */
  private void setEndTime(
      com.google.protobuf.Timestamp.Builder builderForValue) {
    endTime_ = builderForValue.build();
    
  }
  /**
   * <pre>
   * The UNIX time when the tournament will be stopped.
   * </pre>
   *
   * <code>optional .google.protobuf.Timestamp end_time = 15;</code>
   */
  private void mergeEndTime(com.google.protobuf.Timestamp value) {
    if (endTime_ != null &&
        endTime_ != com.google.protobuf.Timestamp.getDefaultInstance()) {
      endTime_ =
        com.google.protobuf.Timestamp.newBuilder(endTime_).mergeFrom(value).buildPartial();
    } else {
      endTime_ = value;
    }
    
  }
  /**
   * <pre>
   * The UNIX time when the tournament will be stopped.
   * </pre>
   *
   * <code>optional .google.protobuf.Timestamp end_time = 15;</code>
   */
  private void clearEndTime() {  endTime_ = null;
    
  }

  public static final int DURATION_FIELD_NUMBER = 16;
  private int duration_;
  /**
   * <pre>
   * Duration of the tournament in seconds.
   * </pre>
   *
   * <code>optional uint32 duration = 16;</code>
   */
  public int getDuration() {
    return duration_;
  }
  /**
   * <pre>
   * Duration of the tournament in seconds.
   * </pre>
   *
   * <code>optional uint32 duration = 16;</code>
   */
  private void setDuration(int value) {
    
    duration_ = value;
  }
  /**
   * <pre>
   * Duration of the tournament in seconds.
   * </pre>
   *
   * <code>optional uint32 duration = 16;</code>
   */
  private void clearDuration() {
    
    duration_ = 0;
  }

  public static final int START_ACTIVE_FIELD_NUMBER = 17;
  private int startActive_;
  /**
   * <pre>
   * The UNIX time when the tournament start being active. A computed value.
   * </pre>
   *
   * <code>optional uint32 start_active = 17;</code>
   */
  public int getStartActive() {
    return startActive_;
  }
  /**
   * <pre>
   * The UNIX time when the tournament start being active. A computed value.
   * </pre>
   *
   * <code>optional uint32 start_active = 17;</code>
   */
  private void setStartActive(int value) {
    
    startActive_ = value;
  }
  /**
   * <pre>
   * The UNIX time when the tournament start being active. A computed value.
   * </pre>
   *
   * <code>optional uint32 start_active = 17;</code>
   */
  private void clearStartActive() {
    
    startActive_ = 0;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!id_.isEmpty()) {
      output.writeString(1, getId());
    }
    if (!title_.isEmpty()) {
      output.writeString(2, getTitle());
    }
    if (!description_.isEmpty()) {
      output.writeString(3, getDescription());
    }
    if (category_ != 0) {
      output.writeUInt32(4, category_);
    }
    if (sortOrder_ != 0) {
      output.writeUInt32(5, sortOrder_);
    }
    if (size_ != 0) {
      output.writeUInt32(6, size_);
    }
    if (maxSize_ != 0) {
      output.writeUInt32(7, maxSize_);
    }
    if (maxNumScore_ != 0) {
      output.writeUInt32(8, maxNumScore_);
    }
    if (canEnter_ != false) {
      output.writeBool(9, canEnter_);
    }
    if (endActive_ != 0) {
      output.writeUInt32(10, endActive_);
    }
    if (nextReset_ != 0) {
      output.writeUInt32(11, nextReset_);
    }
    if (!metadata_.isEmpty()) {
      output.writeString(12, getMetadata());
    }
    if (createTime_ != null) {
      output.writeMessage(13, getCreateTime());
    }
    if (startTime_ != null) {
      output.writeMessage(14, getStartTime());
    }
    if (endTime_ != null) {
      output.writeMessage(15, getEndTime());
    }
    if (duration_ != 0) {
      output.writeUInt32(16, duration_);
    }
    if (startActive_ != 0) {
      output.writeUInt32(17, startActive_);
    }
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (!id_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(1, getId());
    }
    if (!title_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(2, getTitle());
    }
    if (!description_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(3, getDescription());
    }
    if (category_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(4, category_);
    }
    if (sortOrder_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(5, sortOrder_);
    }
    if (size_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(6, size_);
    }
    if (maxSize_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(7, maxSize_);
    }
    if (maxNumScore_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(8, maxNumScore_);
    }
    if (canEnter_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(9, canEnter_);
    }
    if (endActive_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(10, endActive_);
    }
    if (nextReset_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(11, nextReset_);
    }
    if (!metadata_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(12, getMetadata());
    }
    if (createTime_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(13, getCreateTime());
    }
    if (startTime_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(14, getStartTime());
    }
    if (endTime_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(15, getEndTime());
    }
    if (duration_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(16, duration_);
    }
    if (startActive_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(17, startActive_);
    }
    memoizedSerializedSize = size;
    return size;
  }

  public static com.heroiclabs.nakama.api.Tournament parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.heroiclabs.nakama.api.Tournament parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.heroiclabs.nakama.api.Tournament parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.heroiclabs.nakama.api.Tournament parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.heroiclabs.nakama.api.Tournament parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.heroiclabs.nakama.api.Tournament parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.heroiclabs.nakama.api.Tournament parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.heroiclabs.nakama.api.Tournament parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.heroiclabs.nakama.api.Tournament parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.heroiclabs.nakama.api.Tournament parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.heroiclabs.nakama.api.Tournament prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * A tournament on the server.
   * </pre>
   *
   * Protobuf type {@code nakama.api.Tournament}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.heroiclabs.nakama.api.Tournament, Builder> implements
      // @@protoc_insertion_point(builder_implements:nakama.api.Tournament)
      com.heroiclabs.nakama.api.TournamentOrBuilder {
    // Construct using com.heroiclabs.nakama.api.Tournament.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * The ID of the tournament.
     * </pre>
     *
     * <code>optional string id = 1;</code>
     */
    public java.lang.String getId() {
      return instance.getId();
    }
    /**
     * <pre>
     * The ID of the tournament.
     * </pre>
     *
     * <code>optional string id = 1;</code>
     */
    public com.google.protobuf.ByteString
        getIdBytes() {
      return instance.getIdBytes();
    }
    /**
     * <pre>
     * The ID of the tournament.
     * </pre>
     *
     * <code>optional string id = 1;</code>
     */
    public Builder setId(
        java.lang.String value) {
      copyOnWrite();
      instance.setId(value);
      return this;
    }
    /**
     * <pre>
     * The ID of the tournament.
     * </pre>
     *
     * <code>optional string id = 1;</code>
     */
    public Builder clearId() {
      copyOnWrite();
      instance.clearId();
      return this;
    }
    /**
     * <pre>
     * The ID of the tournament.
     * </pre>
     *
     * <code>optional string id = 1;</code>
     */
    public Builder setIdBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setIdBytes(value);
      return this;
    }

    /**
     * <pre>
     * The title for the tournament.
     * </pre>
     *
     * <code>optional string title = 2;</code>
     */
    public java.lang.String getTitle() {
      return instance.getTitle();
    }
    /**
     * <pre>
     * The title for the tournament.
     * </pre>
     *
     * <code>optional string title = 2;</code>
     */
    public com.google.protobuf.ByteString
        getTitleBytes() {
      return instance.getTitleBytes();
    }
    /**
     * <pre>
     * The title for the tournament.
     * </pre>
     *
     * <code>optional string title = 2;</code>
     */
    public Builder setTitle(
        java.lang.String value) {
      copyOnWrite();
      instance.setTitle(value);
      return this;
    }
    /**
     * <pre>
     * The title for the tournament.
     * </pre>
     *
     * <code>optional string title = 2;</code>
     */
    public Builder clearTitle() {
      copyOnWrite();
      instance.clearTitle();
      return this;
    }
    /**
     * <pre>
     * The title for the tournament.
     * </pre>
     *
     * <code>optional string title = 2;</code>
     */
    public Builder setTitleBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setTitleBytes(value);
      return this;
    }

    /**
     * <pre>
     * The description of the tournament. May be blank.
     * </pre>
     *
     * <code>optional string description = 3;</code>
     */
    public java.lang.String getDescription() {
      return instance.getDescription();
    }
    /**
     * <pre>
     * The description of the tournament. May be blank.
     * </pre>
     *
     * <code>optional string description = 3;</code>
     */
    public com.google.protobuf.ByteString
        getDescriptionBytes() {
      return instance.getDescriptionBytes();
    }
    /**
     * <pre>
     * The description of the tournament. May be blank.
     * </pre>
     *
     * <code>optional string description = 3;</code>
     */
    public Builder setDescription(
        java.lang.String value) {
      copyOnWrite();
      instance.setDescription(value);
      return this;
    }
    /**
     * <pre>
     * The description of the tournament. May be blank.
     * </pre>
     *
     * <code>optional string description = 3;</code>
     */
    public Builder clearDescription() {
      copyOnWrite();
      instance.clearDescription();
      return this;
    }
    /**
     * <pre>
     * The description of the tournament. May be blank.
     * </pre>
     *
     * <code>optional string description = 3;</code>
     */
    public Builder setDescriptionBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setDescriptionBytes(value);
      return this;
    }

    /**
     * <pre>
     * The category of the tournament. e.g. "vip" could be category 1.
     * </pre>
     *
     * <code>optional uint32 category = 4;</code>
     */
    public int getCategory() {
      return instance.getCategory();
    }
    /**
     * <pre>
     * The category of the tournament. e.g. "vip" could be category 1.
     * </pre>
     *
     * <code>optional uint32 category = 4;</code>
     */
    public Builder setCategory(int value) {
      copyOnWrite();
      instance.setCategory(value);
      return this;
    }
    /**
     * <pre>
     * The category of the tournament. e.g. "vip" could be category 1.
     * </pre>
     *
     * <code>optional uint32 category = 4;</code>
     */
    public Builder clearCategory() {
      copyOnWrite();
      instance.clearCategory();
      return this;
    }

    /**
     * <pre>
     * ASC or DESC sort mode of scores in the tournament.
     * </pre>
     *
     * <code>optional uint32 sort_order = 5;</code>
     */
    public int getSortOrder() {
      return instance.getSortOrder();
    }
    /**
     * <pre>
     * ASC or DESC sort mode of scores in the tournament.
     * </pre>
     *
     * <code>optional uint32 sort_order = 5;</code>
     */
    public Builder setSortOrder(int value) {
      copyOnWrite();
      instance.setSortOrder(value);
      return this;
    }
    /**
     * <pre>
     * ASC or DESC sort mode of scores in the tournament.
     * </pre>
     *
     * <code>optional uint32 sort_order = 5;</code>
     */
    public Builder clearSortOrder() {
      copyOnWrite();
      instance.clearSortOrder();
      return this;
    }

    /**
     * <pre>
     * The current number of players in the tournament.
     * </pre>
     *
     * <code>optional uint32 size = 6;</code>
     */
    public int getSize() {
      return instance.getSize();
    }
    /**
     * <pre>
     * The current number of players in the tournament.
     * </pre>
     *
     * <code>optional uint32 size = 6;</code>
     */
    public Builder setSize(int value) {
      copyOnWrite();
      instance.setSize(value);
      return this;
    }
    /**
     * <pre>
     * The current number of players in the tournament.
     * </pre>
     *
     * <code>optional uint32 size = 6;</code>
     */
    public Builder clearSize() {
      copyOnWrite();
      instance.clearSize();
      return this;
    }

    /**
     * <pre>
     * The maximum number of players for the tournament.
     * </pre>
     *
     * <code>optional uint32 max_size = 7;</code>
     */
    public int getMaxSize() {
      return instance.getMaxSize();
    }
    /**
     * <pre>
     * The maximum number of players for the tournament.
     * </pre>
     *
     * <code>optional uint32 max_size = 7;</code>
     */
    public Builder setMaxSize(int value) {
      copyOnWrite();
      instance.setMaxSize(value);
      return this;
    }
    /**
     * <pre>
     * The maximum number of players for the tournament.
     * </pre>
     *
     * <code>optional uint32 max_size = 7;</code>
     */
    public Builder clearMaxSize() {
      copyOnWrite();
      instance.clearMaxSize();
      return this;
    }

    /**
     * <pre>
     * The maximum score updates allowed per player for the current tournament.
     * </pre>
     *
     * <code>optional uint32 max_num_score = 8;</code>
     */
    public int getMaxNumScore() {
      return instance.getMaxNumScore();
    }
    /**
     * <pre>
     * The maximum score updates allowed per player for the current tournament.
     * </pre>
     *
     * <code>optional uint32 max_num_score = 8;</code>
     */
    public Builder setMaxNumScore(int value) {
      copyOnWrite();
      instance.setMaxNumScore(value);
      return this;
    }
    /**
     * <pre>
     * The maximum score updates allowed per player for the current tournament.
     * </pre>
     *
     * <code>optional uint32 max_num_score = 8;</code>
     */
    public Builder clearMaxNumScore() {
      copyOnWrite();
      instance.clearMaxNumScore();
      return this;
    }

    /**
     * <pre>
     * True if the tournament is active and can enter. A computed value.
     * </pre>
     *
     * <code>optional bool can_enter = 9;</code>
     */
    public boolean getCanEnter() {
      return instance.getCanEnter();
    }
    /**
     * <pre>
     * True if the tournament is active and can enter. A computed value.
     * </pre>
     *
     * <code>optional bool can_enter = 9;</code>
     */
    public Builder setCanEnter(boolean value) {
      copyOnWrite();
      instance.setCanEnter(value);
      return this;
    }
    /**
     * <pre>
     * True if the tournament is active and can enter. A computed value.
     * </pre>
     *
     * <code>optional bool can_enter = 9;</code>
     */
    public Builder clearCanEnter() {
      copyOnWrite();
      instance.clearCanEnter();
      return this;
    }

    /**
     * <pre>
     * The UNIX time when the tournament stops being active until next reset. A computed value.
     * </pre>
     *
     * <code>optional uint32 end_active = 10;</code>
     */
    public int getEndActive() {
      return instance.getEndActive();
    }
    /**
     * <pre>
     * The UNIX time when the tournament stops being active until next reset. A computed value.
     * </pre>
     *
     * <code>optional uint32 end_active = 10;</code>
     */
    public Builder setEndActive(int value) {
      copyOnWrite();
      instance.setEndActive(value);
      return this;
    }
    /**
     * <pre>
     * The UNIX time when the tournament stops being active until next reset. A computed value.
     * </pre>
     *
     * <code>optional uint32 end_active = 10;</code>
     */
    public Builder clearEndActive() {
      copyOnWrite();
      instance.clearEndActive();
      return this;
    }

    /**
     * <pre>
     * The UNIX time when the tournament is next playable. A computed value.
     * </pre>
     *
     * <code>optional uint32 next_reset = 11;</code>
     */
    public int getNextReset() {
      return instance.getNextReset();
    }
    /**
     * <pre>
     * The UNIX time when the tournament is next playable. A computed value.
     * </pre>
     *
     * <code>optional uint32 next_reset = 11;</code>
     */
    public Builder setNextReset(int value) {
      copyOnWrite();
      instance.setNextReset(value);
      return this;
    }
    /**
     * <pre>
     * The UNIX time when the tournament is next playable. A computed value.
     * </pre>
     *
     * <code>optional uint32 next_reset = 11;</code>
     */
    public Builder clearNextReset() {
      copyOnWrite();
      instance.clearNextReset();
      return this;
    }

    /**
     * <pre>
     * Additional information stored as a JSON object.
     * </pre>
     *
     * <code>optional string metadata = 12;</code>
     */
    public java.lang.String getMetadata() {
      return instance.getMetadata();
    }
    /**
     * <pre>
     * Additional information stored as a JSON object.
     * </pre>
     *
     * <code>optional string metadata = 12;</code>
     */
    public com.google.protobuf.ByteString
        getMetadataBytes() {
      return instance.getMetadataBytes();
    }
    /**
     * <pre>
     * Additional information stored as a JSON object.
     * </pre>
     *
     * <code>optional string metadata = 12;</code>
     */
    public Builder setMetadata(
        java.lang.String value) {
      copyOnWrite();
      instance.setMetadata(value);
      return this;
    }
    /**
     * <pre>
     * Additional information stored as a JSON object.
     * </pre>
     *
     * <code>optional string metadata = 12;</code>
     */
    public Builder clearMetadata() {
      copyOnWrite();
      instance.clearMetadata();
      return this;
    }
    /**
     * <pre>
     * Additional information stored as a JSON object.
     * </pre>
     *
     * <code>optional string metadata = 12;</code>
     */
    public Builder setMetadataBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setMetadataBytes(value);
      return this;
    }

    /**
     * <pre>
     * The UNIX time when the tournament was created.
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp create_time = 13;</code>
     */
    public boolean hasCreateTime() {
      return instance.hasCreateTime();
    }
    /**
     * <pre>
     * The UNIX time when the tournament was created.
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp create_time = 13;</code>
     */
    public com.google.protobuf.Timestamp getCreateTime() {
      return instance.getCreateTime();
    }
    /**
     * <pre>
     * The UNIX time when the tournament was created.
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp create_time = 13;</code>
     */
    public Builder setCreateTime(com.google.protobuf.Timestamp value) {
      copyOnWrite();
      instance.setCreateTime(value);
      return this;
      }
    /**
     * <pre>
     * The UNIX time when the tournament was created.
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp create_time = 13;</code>
     */
    public Builder setCreateTime(
        com.google.protobuf.Timestamp.Builder builderForValue) {
      copyOnWrite();
      instance.setCreateTime(builderForValue);
      return this;
    }
    /**
     * <pre>
     * The UNIX time when the tournament was created.
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp create_time = 13;</code>
     */
    public Builder mergeCreateTime(com.google.protobuf.Timestamp value) {
      copyOnWrite();
      instance.mergeCreateTime(value);
      return this;
    }
    /**
     * <pre>
     * The UNIX time when the tournament was created.
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp create_time = 13;</code>
     */
    public Builder clearCreateTime() {  copyOnWrite();
      instance.clearCreateTime();
      return this;
    }

    /**
     * <pre>
     * The UNIX time when the tournament will start.
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp start_time = 14;</code>
     */
    public boolean hasStartTime() {
      return instance.hasStartTime();
    }
    /**
     * <pre>
     * The UNIX time when the tournament will start.
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp start_time = 14;</code>
     */
    public com.google.protobuf.Timestamp getStartTime() {
      return instance.getStartTime();
    }
    /**
     * <pre>
     * The UNIX time when the tournament will start.
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp start_time = 14;</code>
     */
    public Builder setStartTime(com.google.protobuf.Timestamp value) {
      copyOnWrite();
      instance.setStartTime(value);
      return this;
      }
    /**
     * <pre>
     * The UNIX time when the tournament will start.
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp start_time = 14;</code>
     */
    public Builder setStartTime(
        com.google.protobuf.Timestamp.Builder builderForValue) {
      copyOnWrite();
      instance.setStartTime(builderForValue);
      return this;
    }
    /**
     * <pre>
     * The UNIX time when the tournament will start.
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp start_time = 14;</code>
     */
    public Builder mergeStartTime(com.google.protobuf.Timestamp value) {
      copyOnWrite();
      instance.mergeStartTime(value);
      return this;
    }
    /**
     * <pre>
     * The UNIX time when the tournament will start.
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp start_time = 14;</code>
     */
    public Builder clearStartTime() {  copyOnWrite();
      instance.clearStartTime();
      return this;
    }

    /**
     * <pre>
     * The UNIX time when the tournament will be stopped.
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp end_time = 15;</code>
     */
    public boolean hasEndTime() {
      return instance.hasEndTime();
    }
    /**
     * <pre>
     * The UNIX time when the tournament will be stopped.
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp end_time = 15;</code>
     */
    public com.google.protobuf.Timestamp getEndTime() {
      return instance.getEndTime();
    }
    /**
     * <pre>
     * The UNIX time when the tournament will be stopped.
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp end_time = 15;</code>
     */
    public Builder setEndTime(com.google.protobuf.Timestamp value) {
      copyOnWrite();
      instance.setEndTime(value);
      return this;
      }
    /**
     * <pre>
     * The UNIX time when the tournament will be stopped.
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp end_time = 15;</code>
     */
    public Builder setEndTime(
        com.google.protobuf.Timestamp.Builder builderForValue) {
      copyOnWrite();
      instance.setEndTime(builderForValue);
      return this;
    }
    /**
     * <pre>
     * The UNIX time when the tournament will be stopped.
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp end_time = 15;</code>
     */
    public Builder mergeEndTime(com.google.protobuf.Timestamp value) {
      copyOnWrite();
      instance.mergeEndTime(value);
      return this;
    }
    /**
     * <pre>
     * The UNIX time when the tournament will be stopped.
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp end_time = 15;</code>
     */
    public Builder clearEndTime() {  copyOnWrite();
      instance.clearEndTime();
      return this;
    }

    /**
     * <pre>
     * Duration of the tournament in seconds.
     * </pre>
     *
     * <code>optional uint32 duration = 16;</code>
     */
    public int getDuration() {
      return instance.getDuration();
    }
    /**
     * <pre>
     * Duration of the tournament in seconds.
     * </pre>
     *
     * <code>optional uint32 duration = 16;</code>
     */
    public Builder setDuration(int value) {
      copyOnWrite();
      instance.setDuration(value);
      return this;
    }
    /**
     * <pre>
     * Duration of the tournament in seconds.
     * </pre>
     *
     * <code>optional uint32 duration = 16;</code>
     */
    public Builder clearDuration() {
      copyOnWrite();
      instance.clearDuration();
      return this;
    }

    /**
     * <pre>
     * The UNIX time when the tournament start being active. A computed value.
     * </pre>
     *
     * <code>optional uint32 start_active = 17;</code>
     */
    public int getStartActive() {
      return instance.getStartActive();
    }
    /**
     * <pre>
     * The UNIX time when the tournament start being active. A computed value.
     * </pre>
     *
     * <code>optional uint32 start_active = 17;</code>
     */
    public Builder setStartActive(int value) {
      copyOnWrite();
      instance.setStartActive(value);
      return this;
    }
    /**
     * <pre>
     * The UNIX time when the tournament start being active. A computed value.
     * </pre>
     *
     * <code>optional uint32 start_active = 17;</code>
     */
    public Builder clearStartActive() {
      copyOnWrite();
      instance.clearStartActive();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:nakama.api.Tournament)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.heroiclabs.nakama.api.Tournament();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        com.heroiclabs.nakama.api.Tournament other = (com.heroiclabs.nakama.api.Tournament) arg1;
        id_ = visitor.visitString(!id_.isEmpty(), id_,
            !other.id_.isEmpty(), other.id_);
        title_ = visitor.visitString(!title_.isEmpty(), title_,
            !other.title_.isEmpty(), other.title_);
        description_ = visitor.visitString(!description_.isEmpty(), description_,
            !other.description_.isEmpty(), other.description_);
        category_ = visitor.visitInt(category_ != 0, category_,
            other.category_ != 0, other.category_);
        sortOrder_ = visitor.visitInt(sortOrder_ != 0, sortOrder_,
            other.sortOrder_ != 0, other.sortOrder_);
        size_ = visitor.visitInt(size_ != 0, size_,
            other.size_ != 0, other.size_);
        maxSize_ = visitor.visitInt(maxSize_ != 0, maxSize_,
            other.maxSize_ != 0, other.maxSize_);
        maxNumScore_ = visitor.visitInt(maxNumScore_ != 0, maxNumScore_,
            other.maxNumScore_ != 0, other.maxNumScore_);
        canEnter_ = visitor.visitBoolean(canEnter_ != false, canEnter_,
            other.canEnter_ != false, other.canEnter_);
        endActive_ = visitor.visitInt(endActive_ != 0, endActive_,
            other.endActive_ != 0, other.endActive_);
        nextReset_ = visitor.visitInt(nextReset_ != 0, nextReset_,
            other.nextReset_ != 0, other.nextReset_);
        metadata_ = visitor.visitString(!metadata_.isEmpty(), metadata_,
            !other.metadata_.isEmpty(), other.metadata_);
        createTime_ = visitor.visitMessage(createTime_, other.createTime_);
        startTime_ = visitor.visitMessage(startTime_, other.startTime_);
        endTime_ = visitor.visitMessage(endTime_, other.endTime_);
        duration_ = visitor.visitInt(duration_ != 0, duration_,
            other.duration_ != 0, other.duration_);
        startActive_ = visitor.visitInt(startActive_ != 0, startActive_,
            other.startActive_ != 0, other.startActive_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                String s = input.readStringRequireUtf8();

                id_ = s;
                break;
              }
              case 18: {
                String s = input.readStringRequireUtf8();

                title_ = s;
                break;
              }
              case 26: {
                String s = input.readStringRequireUtf8();

                description_ = s;
                break;
              }
              case 32: {

                category_ = input.readUInt32();
                break;
              }
              case 40: {

                sortOrder_ = input.readUInt32();
                break;
              }
              case 48: {

                size_ = input.readUInt32();
                break;
              }
              case 56: {

                maxSize_ = input.readUInt32();
                break;
              }
              case 64: {

                maxNumScore_ = input.readUInt32();
                break;
              }
              case 72: {

                canEnter_ = input.readBool();
                break;
              }
              case 80: {

                endActive_ = input.readUInt32();
                break;
              }
              case 88: {

                nextReset_ = input.readUInt32();
                break;
              }
              case 98: {
                String s = input.readStringRequireUtf8();

                metadata_ = s;
                break;
              }
              case 106: {
                com.google.protobuf.Timestamp.Builder subBuilder = null;
                if (createTime_ != null) {
                  subBuilder = createTime_.toBuilder();
                }
                createTime_ = input.readMessage(com.google.protobuf.Timestamp.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(createTime_);
                  createTime_ = subBuilder.buildPartial();
                }

                break;
              }
              case 114: {
                com.google.protobuf.Timestamp.Builder subBuilder = null;
                if (startTime_ != null) {
                  subBuilder = startTime_.toBuilder();
                }
                startTime_ = input.readMessage(com.google.protobuf.Timestamp.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(startTime_);
                  startTime_ = subBuilder.buildPartial();
                }

                break;
              }
              case 122: {
                com.google.protobuf.Timestamp.Builder subBuilder = null;
                if (endTime_ != null) {
                  subBuilder = endTime_.toBuilder();
                }
                endTime_ = input.readMessage(com.google.protobuf.Timestamp.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(endTime_);
                  endTime_ = subBuilder.buildPartial();
                }

                break;
              }
              case 128: {

                duration_ = input.readUInt32();
                break;
              }
              case 136: {

                startActive_ = input.readUInt32();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (com.heroiclabs.nakama.api.Tournament.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:nakama.api.Tournament)
  private static final com.heroiclabs.nakama.api.Tournament DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new Tournament();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static com.heroiclabs.nakama.api.Tournament getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<Tournament> PARSER;

  public static com.google.protobuf.Parser<Tournament> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

