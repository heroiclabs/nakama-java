// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: github.com/heroiclabs/nakama/api/api.proto

package com.heroiclabs.nakama.api;

/**
 * <pre>
 * A list of groups belonging to a user, along with the user's role in each group.
 * </pre>
 *
 * Protobuf type {@code nakama.api.UserGroupList}
 */
public  final class UserGroupList extends
    com.google.protobuf.GeneratedMessageLite<
        UserGroupList, UserGroupList.Builder> implements
    // @@protoc_insertion_point(message_implements:nakama.api.UserGroupList)
    UserGroupListOrBuilder {
  private UserGroupList() {
    userGroups_ = emptyProtobufList();
  }
  public interface UserGroupOrBuilder extends
      // @@protoc_insertion_point(interface_extends:nakama.api.UserGroupList.UserGroup)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Group.
     * </pre>
     *
     * <code>optional .nakama.api.Group group = 1;</code>
     */
    boolean hasGroup();
    /**
     * <pre>
     * Group.
     * </pre>
     *
     * <code>optional .nakama.api.Group group = 1;</code>
     */
    com.heroiclabs.nakama.api.Group getGroup();

    /**
     * <pre>
     * The user's relationship to the group.
     * </pre>
     *
     * <code>optional .google.protobuf.Int32Value state = 2;</code>
     */
    boolean hasState();
    /**
     * <pre>
     * The user's relationship to the group.
     * </pre>
     *
     * <code>optional .google.protobuf.Int32Value state = 2;</code>
     */
    com.google.protobuf.Int32Value getState();
  }
  /**
   * <pre>
   * A single group-role pair.
   * </pre>
   *
   * Protobuf type {@code nakama.api.UserGroupList.UserGroup}
   */
  public  static final class UserGroup extends
      com.google.protobuf.GeneratedMessageLite<
          UserGroup, UserGroup.Builder> implements
      // @@protoc_insertion_point(message_implements:nakama.api.UserGroupList.UserGroup)
      UserGroupOrBuilder {
    private UserGroup() {
    }
    /**
     * <pre>
     * The group role status.
     * </pre>
     *
     * Protobuf enum {@code nakama.api.UserGroupList.UserGroup.State}
     */
    public enum State
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <pre>
       * The user is a superadmin with full control of the group.
       * </pre>
       *
       * <code>SUPERADMIN = 0;</code>
       */
      SUPERADMIN(0),
      /**
       * <pre>
       * The user is an admin with additional privileges.
       * </pre>
       *
       * <code>ADMIN = 1;</code>
       */
      ADMIN(1),
      /**
       * <pre>
       * The user is a regular member.
       * </pre>
       *
       * <code>MEMBER = 2;</code>
       */
      MEMBER(2),
      /**
       * <pre>
       * The user has requested to join the group
       * </pre>
       *
       * <code>JOIN_REQUEST = 3;</code>
       */
      JOIN_REQUEST(3),
      UNRECOGNIZED(-1),
      ;

      /**
       * <pre>
       * The user is a superadmin with full control of the group.
       * </pre>
       *
       * <code>SUPERADMIN = 0;</code>
       */
      public static final int SUPERADMIN_VALUE = 0;
      /**
       * <pre>
       * The user is an admin with additional privileges.
       * </pre>
       *
       * <code>ADMIN = 1;</code>
       */
      public static final int ADMIN_VALUE = 1;
      /**
       * <pre>
       * The user is a regular member.
       * </pre>
       *
       * <code>MEMBER = 2;</code>
       */
      public static final int MEMBER_VALUE = 2;
      /**
       * <pre>
       * The user has requested to join the group
       * </pre>
       *
       * <code>JOIN_REQUEST = 3;</code>
       */
      public static final int JOIN_REQUEST_VALUE = 3;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static State valueOf(int value) {
        return forNumber(value);
      }

      public static State forNumber(int value) {
        switch (value) {
          case 0: return SUPERADMIN;
          case 1: return ADMIN;
          case 2: return MEMBER;
          case 3: return JOIN_REQUEST;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<State>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          State> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<State>() {
              public State findValueByNumber(int number) {
                return State.forNumber(number);
              }
            };

      private final int value;

      private State(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:nakama.api.UserGroupList.UserGroup.State)
    }

    public static final int GROUP_FIELD_NUMBER = 1;
    private com.heroiclabs.nakama.api.Group group_;
    /**
     * <pre>
     * Group.
     * </pre>
     *
     * <code>optional .nakama.api.Group group = 1;</code>
     */
    public boolean hasGroup() {
      return group_ != null;
    }
    /**
     * <pre>
     * Group.
     * </pre>
     *
     * <code>optional .nakama.api.Group group = 1;</code>
     */
    public com.heroiclabs.nakama.api.Group getGroup() {
      return group_ == null ? com.heroiclabs.nakama.api.Group.getDefaultInstance() : group_;
    }
    /**
     * <pre>
     * Group.
     * </pre>
     *
     * <code>optional .nakama.api.Group group = 1;</code>
     */
    private void setGroup(com.heroiclabs.nakama.api.Group value) {
      if (value == null) {
        throw new NullPointerException();
      }
      group_ = value;
      
      }
    /**
     * <pre>
     * Group.
     * </pre>
     *
     * <code>optional .nakama.api.Group group = 1;</code>
     */
    private void setGroup(
        com.heroiclabs.nakama.api.Group.Builder builderForValue) {
      group_ = builderForValue.build();
      
    }
    /**
     * <pre>
     * Group.
     * </pre>
     *
     * <code>optional .nakama.api.Group group = 1;</code>
     */
    private void mergeGroup(com.heroiclabs.nakama.api.Group value) {
      if (group_ != null &&
          group_ != com.heroiclabs.nakama.api.Group.getDefaultInstance()) {
        group_ =
          com.heroiclabs.nakama.api.Group.newBuilder(group_).mergeFrom(value).buildPartial();
      } else {
        group_ = value;
      }
      
    }
    /**
     * <pre>
     * Group.
     * </pre>
     *
     * <code>optional .nakama.api.Group group = 1;</code>
     */
    private void clearGroup() {  group_ = null;
      
    }

    public static final int STATE_FIELD_NUMBER = 2;
    private com.google.protobuf.Int32Value state_;
    /**
     * <pre>
     * The user's relationship to the group.
     * </pre>
     *
     * <code>optional .google.protobuf.Int32Value state = 2;</code>
     */
    public boolean hasState() {
      return state_ != null;
    }
    /**
     * <pre>
     * The user's relationship to the group.
     * </pre>
     *
     * <code>optional .google.protobuf.Int32Value state = 2;</code>
     */
    public com.google.protobuf.Int32Value getState() {
      return state_ == null ? com.google.protobuf.Int32Value.getDefaultInstance() : state_;
    }
    /**
     * <pre>
     * The user's relationship to the group.
     * </pre>
     *
     * <code>optional .google.protobuf.Int32Value state = 2;</code>
     */
    private void setState(com.google.protobuf.Int32Value value) {
      if (value == null) {
        throw new NullPointerException();
      }
      state_ = value;
      
      }
    /**
     * <pre>
     * The user's relationship to the group.
     * </pre>
     *
     * <code>optional .google.protobuf.Int32Value state = 2;</code>
     */
    private void setState(
        com.google.protobuf.Int32Value.Builder builderForValue) {
      state_ = builderForValue.build();
      
    }
    /**
     * <pre>
     * The user's relationship to the group.
     * </pre>
     *
     * <code>optional .google.protobuf.Int32Value state = 2;</code>
     */
    private void mergeState(com.google.protobuf.Int32Value value) {
      if (state_ != null &&
          state_ != com.google.protobuf.Int32Value.getDefaultInstance()) {
        state_ =
          com.google.protobuf.Int32Value.newBuilder(state_).mergeFrom(value).buildPartial();
      } else {
        state_ = value;
      }
      
    }
    /**
     * <pre>
     * The user's relationship to the group.
     * </pre>
     *
     * <code>optional .google.protobuf.Int32Value state = 2;</code>
     */
    private void clearState() {  state_ = null;
      
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (group_ != null) {
        output.writeMessage(1, getGroup());
      }
      if (state_ != null) {
        output.writeMessage(2, getState());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (group_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getGroup());
      }
      if (state_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getState());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.heroiclabs.nakama.api.UserGroupList.UserGroup parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.heroiclabs.nakama.api.UserGroupList.UserGroup parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.heroiclabs.nakama.api.UserGroupList.UserGroup parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.heroiclabs.nakama.api.UserGroupList.UserGroup parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.heroiclabs.nakama.api.UserGroupList.UserGroup parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.heroiclabs.nakama.api.UserGroupList.UserGroup parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.heroiclabs.nakama.api.UserGroupList.UserGroup parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.heroiclabs.nakama.api.UserGroupList.UserGroup parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.heroiclabs.nakama.api.UserGroupList.UserGroup parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.heroiclabs.nakama.api.UserGroupList.UserGroup parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.heroiclabs.nakama.api.UserGroupList.UserGroup prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * A single group-role pair.
     * </pre>
     *
     * Protobuf type {@code nakama.api.UserGroupList.UserGroup}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.heroiclabs.nakama.api.UserGroupList.UserGroup, Builder> implements
        // @@protoc_insertion_point(builder_implements:nakama.api.UserGroupList.UserGroup)
        com.heroiclabs.nakama.api.UserGroupList.UserGroupOrBuilder {
      // Construct using com.heroiclabs.nakama.api.UserGroupList.UserGroup.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Group.
       * </pre>
       *
       * <code>optional .nakama.api.Group group = 1;</code>
       */
      public boolean hasGroup() {
        return instance.hasGroup();
      }
      /**
       * <pre>
       * Group.
       * </pre>
       *
       * <code>optional .nakama.api.Group group = 1;</code>
       */
      public com.heroiclabs.nakama.api.Group getGroup() {
        return instance.getGroup();
      }
      /**
       * <pre>
       * Group.
       * </pre>
       *
       * <code>optional .nakama.api.Group group = 1;</code>
       */
      public Builder setGroup(com.heroiclabs.nakama.api.Group value) {
        copyOnWrite();
        instance.setGroup(value);
        return this;
        }
      /**
       * <pre>
       * Group.
       * </pre>
       *
       * <code>optional .nakama.api.Group group = 1;</code>
       */
      public Builder setGroup(
          com.heroiclabs.nakama.api.Group.Builder builderForValue) {
        copyOnWrite();
        instance.setGroup(builderForValue);
        return this;
      }
      /**
       * <pre>
       * Group.
       * </pre>
       *
       * <code>optional .nakama.api.Group group = 1;</code>
       */
      public Builder mergeGroup(com.heroiclabs.nakama.api.Group value) {
        copyOnWrite();
        instance.mergeGroup(value);
        return this;
      }
      /**
       * <pre>
       * Group.
       * </pre>
       *
       * <code>optional .nakama.api.Group group = 1;</code>
       */
      public Builder clearGroup() {  copyOnWrite();
        instance.clearGroup();
        return this;
      }

      /**
       * <pre>
       * The user's relationship to the group.
       * </pre>
       *
       * <code>optional .google.protobuf.Int32Value state = 2;</code>
       */
      public boolean hasState() {
        return instance.hasState();
      }
      /**
       * <pre>
       * The user's relationship to the group.
       * </pre>
       *
       * <code>optional .google.protobuf.Int32Value state = 2;</code>
       */
      public com.google.protobuf.Int32Value getState() {
        return instance.getState();
      }
      /**
       * <pre>
       * The user's relationship to the group.
       * </pre>
       *
       * <code>optional .google.protobuf.Int32Value state = 2;</code>
       */
      public Builder setState(com.google.protobuf.Int32Value value) {
        copyOnWrite();
        instance.setState(value);
        return this;
        }
      /**
       * <pre>
       * The user's relationship to the group.
       * </pre>
       *
       * <code>optional .google.protobuf.Int32Value state = 2;</code>
       */
      public Builder setState(
          com.google.protobuf.Int32Value.Builder builderForValue) {
        copyOnWrite();
        instance.setState(builderForValue);
        return this;
      }
      /**
       * <pre>
       * The user's relationship to the group.
       * </pre>
       *
       * <code>optional .google.protobuf.Int32Value state = 2;</code>
       */
      public Builder mergeState(com.google.protobuf.Int32Value value) {
        copyOnWrite();
        instance.mergeState(value);
        return this;
      }
      /**
       * <pre>
       * The user's relationship to the group.
       * </pre>
       *
       * <code>optional .google.protobuf.Int32Value state = 2;</code>
       */
      public Builder clearState() {  copyOnWrite();
        instance.clearState();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:nakama.api.UserGroupList.UserGroup)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.heroiclabs.nakama.api.UserGroupList.UserGroup();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.heroiclabs.nakama.api.UserGroupList.UserGroup other = (com.heroiclabs.nakama.api.UserGroupList.UserGroup) arg1;
          group_ = visitor.visitMessage(group_, other.group_);
          state_ = visitor.visitMessage(state_, other.state_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.heroiclabs.nakama.api.Group.Builder subBuilder = null;
                  if (group_ != null) {
                    subBuilder = group_.toBuilder();
                  }
                  group_ = input.readMessage(com.heroiclabs.nakama.api.Group.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(group_);
                    group_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 18: {
                  com.google.protobuf.Int32Value.Builder subBuilder = null;
                  if (state_ != null) {
                    subBuilder = state_.toBuilder();
                  }
                  state_ = input.readMessage(com.google.protobuf.Int32Value.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(state_);
                    state_ = subBuilder.buildPartial();
                  }

                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.heroiclabs.nakama.api.UserGroupList.UserGroup.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:nakama.api.UserGroupList.UserGroup)
    private static final com.heroiclabs.nakama.api.UserGroupList.UserGroup DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new UserGroup();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.heroiclabs.nakama.api.UserGroupList.UserGroup getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<UserGroup> PARSER;

    public static com.google.protobuf.Parser<UserGroup> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public static final int USER_GROUPS_FIELD_NUMBER = 1;
  private com.google.protobuf.Internal.ProtobufList<com.heroiclabs.nakama.api.UserGroupList.UserGroup> userGroups_;
  /**
   * <pre>
   * Group-role pairs for a user.
   * </pre>
   *
   * <code>repeated .nakama.api.UserGroupList.UserGroup user_groups = 1;</code>
   */
  public java.util.List<com.heroiclabs.nakama.api.UserGroupList.UserGroup> getUserGroupsList() {
    return userGroups_;
  }
  /**
   * <pre>
   * Group-role pairs for a user.
   * </pre>
   *
   * <code>repeated .nakama.api.UserGroupList.UserGroup user_groups = 1;</code>
   */
  public java.util.List<? extends com.heroiclabs.nakama.api.UserGroupList.UserGroupOrBuilder> 
      getUserGroupsOrBuilderList() {
    return userGroups_;
  }
  /**
   * <pre>
   * Group-role pairs for a user.
   * </pre>
   *
   * <code>repeated .nakama.api.UserGroupList.UserGroup user_groups = 1;</code>
   */
  public int getUserGroupsCount() {
    return userGroups_.size();
  }
  /**
   * <pre>
   * Group-role pairs for a user.
   * </pre>
   *
   * <code>repeated .nakama.api.UserGroupList.UserGroup user_groups = 1;</code>
   */
  public com.heroiclabs.nakama.api.UserGroupList.UserGroup getUserGroups(int index) {
    return userGroups_.get(index);
  }
  /**
   * <pre>
   * Group-role pairs for a user.
   * </pre>
   *
   * <code>repeated .nakama.api.UserGroupList.UserGroup user_groups = 1;</code>
   */
  public com.heroiclabs.nakama.api.UserGroupList.UserGroupOrBuilder getUserGroupsOrBuilder(
      int index) {
    return userGroups_.get(index);
  }
  private void ensureUserGroupsIsMutable() {
    if (!userGroups_.isModifiable()) {
      userGroups_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(userGroups_);
     }
  }

  /**
   * <pre>
   * Group-role pairs for a user.
   * </pre>
   *
   * <code>repeated .nakama.api.UserGroupList.UserGroup user_groups = 1;</code>
   */
  private void setUserGroups(
      int index, com.heroiclabs.nakama.api.UserGroupList.UserGroup value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureUserGroupsIsMutable();
    userGroups_.set(index, value);
  }
  /**
   * <pre>
   * Group-role pairs for a user.
   * </pre>
   *
   * <code>repeated .nakama.api.UserGroupList.UserGroup user_groups = 1;</code>
   */
  private void setUserGroups(
      int index, com.heroiclabs.nakama.api.UserGroupList.UserGroup.Builder builderForValue) {
    ensureUserGroupsIsMutable();
    userGroups_.set(index, builderForValue.build());
  }
  /**
   * <pre>
   * Group-role pairs for a user.
   * </pre>
   *
   * <code>repeated .nakama.api.UserGroupList.UserGroup user_groups = 1;</code>
   */
  private void addUserGroups(com.heroiclabs.nakama.api.UserGroupList.UserGroup value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureUserGroupsIsMutable();
    userGroups_.add(value);
  }
  /**
   * <pre>
   * Group-role pairs for a user.
   * </pre>
   *
   * <code>repeated .nakama.api.UserGroupList.UserGroup user_groups = 1;</code>
   */
  private void addUserGroups(
      int index, com.heroiclabs.nakama.api.UserGroupList.UserGroup value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureUserGroupsIsMutable();
    userGroups_.add(index, value);
  }
  /**
   * <pre>
   * Group-role pairs for a user.
   * </pre>
   *
   * <code>repeated .nakama.api.UserGroupList.UserGroup user_groups = 1;</code>
   */
  private void addUserGroups(
      com.heroiclabs.nakama.api.UserGroupList.UserGroup.Builder builderForValue) {
    ensureUserGroupsIsMutable();
    userGroups_.add(builderForValue.build());
  }
  /**
   * <pre>
   * Group-role pairs for a user.
   * </pre>
   *
   * <code>repeated .nakama.api.UserGroupList.UserGroup user_groups = 1;</code>
   */
  private void addUserGroups(
      int index, com.heroiclabs.nakama.api.UserGroupList.UserGroup.Builder builderForValue) {
    ensureUserGroupsIsMutable();
    userGroups_.add(index, builderForValue.build());
  }
  /**
   * <pre>
   * Group-role pairs for a user.
   * </pre>
   *
   * <code>repeated .nakama.api.UserGroupList.UserGroup user_groups = 1;</code>
   */
  private void addAllUserGroups(
      java.lang.Iterable<? extends com.heroiclabs.nakama.api.UserGroupList.UserGroup> values) {
    ensureUserGroupsIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, userGroups_);
  }
  /**
   * <pre>
   * Group-role pairs for a user.
   * </pre>
   *
   * <code>repeated .nakama.api.UserGroupList.UserGroup user_groups = 1;</code>
   */
  private void clearUserGroups() {
    userGroups_ = emptyProtobufList();
  }
  /**
   * <pre>
   * Group-role pairs for a user.
   * </pre>
   *
   * <code>repeated .nakama.api.UserGroupList.UserGroup user_groups = 1;</code>
   */
  private void removeUserGroups(int index) {
    ensureUserGroupsIsMutable();
    userGroups_.remove(index);
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < userGroups_.size(); i++) {
      output.writeMessage(1, userGroups_.get(i));
    }
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < userGroups_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, userGroups_.get(i));
    }
    memoizedSerializedSize = size;
    return size;
  }

  public static com.heroiclabs.nakama.api.UserGroupList parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.heroiclabs.nakama.api.UserGroupList parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.heroiclabs.nakama.api.UserGroupList parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.heroiclabs.nakama.api.UserGroupList parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.heroiclabs.nakama.api.UserGroupList parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.heroiclabs.nakama.api.UserGroupList parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.heroiclabs.nakama.api.UserGroupList parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.heroiclabs.nakama.api.UserGroupList parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.heroiclabs.nakama.api.UserGroupList parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.heroiclabs.nakama.api.UserGroupList parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.heroiclabs.nakama.api.UserGroupList prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * A list of groups belonging to a user, along with the user's role in each group.
   * </pre>
   *
   * Protobuf type {@code nakama.api.UserGroupList}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.heroiclabs.nakama.api.UserGroupList, Builder> implements
      // @@protoc_insertion_point(builder_implements:nakama.api.UserGroupList)
      com.heroiclabs.nakama.api.UserGroupListOrBuilder {
    // Construct using com.heroiclabs.nakama.api.UserGroupList.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * Group-role pairs for a user.
     * </pre>
     *
     * <code>repeated .nakama.api.UserGroupList.UserGroup user_groups = 1;</code>
     */
    public java.util.List<com.heroiclabs.nakama.api.UserGroupList.UserGroup> getUserGroupsList() {
      return java.util.Collections.unmodifiableList(
          instance.getUserGroupsList());
    }
    /**
     * <pre>
     * Group-role pairs for a user.
     * </pre>
     *
     * <code>repeated .nakama.api.UserGroupList.UserGroup user_groups = 1;</code>
     */
    public int getUserGroupsCount() {
      return instance.getUserGroupsCount();
    }/**
     * <pre>
     * Group-role pairs for a user.
     * </pre>
     *
     * <code>repeated .nakama.api.UserGroupList.UserGroup user_groups = 1;</code>
     */
    public com.heroiclabs.nakama.api.UserGroupList.UserGroup getUserGroups(int index) {
      return instance.getUserGroups(index);
    }
    /**
     * <pre>
     * Group-role pairs for a user.
     * </pre>
     *
     * <code>repeated .nakama.api.UserGroupList.UserGroup user_groups = 1;</code>
     */
    public Builder setUserGroups(
        int index, com.heroiclabs.nakama.api.UserGroupList.UserGroup value) {
      copyOnWrite();
      instance.setUserGroups(index, value);
      return this;
    }
    /**
     * <pre>
     * Group-role pairs for a user.
     * </pre>
     *
     * <code>repeated .nakama.api.UserGroupList.UserGroup user_groups = 1;</code>
     */
    public Builder setUserGroups(
        int index, com.heroiclabs.nakama.api.UserGroupList.UserGroup.Builder builderForValue) {
      copyOnWrite();
      instance.setUserGroups(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * Group-role pairs for a user.
     * </pre>
     *
     * <code>repeated .nakama.api.UserGroupList.UserGroup user_groups = 1;</code>
     */
    public Builder addUserGroups(com.heroiclabs.nakama.api.UserGroupList.UserGroup value) {
      copyOnWrite();
      instance.addUserGroups(value);
      return this;
    }
    /**
     * <pre>
     * Group-role pairs for a user.
     * </pre>
     *
     * <code>repeated .nakama.api.UserGroupList.UserGroup user_groups = 1;</code>
     */
    public Builder addUserGroups(
        int index, com.heroiclabs.nakama.api.UserGroupList.UserGroup value) {
      copyOnWrite();
      instance.addUserGroups(index, value);
      return this;
    }
    /**
     * <pre>
     * Group-role pairs for a user.
     * </pre>
     *
     * <code>repeated .nakama.api.UserGroupList.UserGroup user_groups = 1;</code>
     */
    public Builder addUserGroups(
        com.heroiclabs.nakama.api.UserGroupList.UserGroup.Builder builderForValue) {
      copyOnWrite();
      instance.addUserGroups(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Group-role pairs for a user.
     * </pre>
     *
     * <code>repeated .nakama.api.UserGroupList.UserGroup user_groups = 1;</code>
     */
    public Builder addUserGroups(
        int index, com.heroiclabs.nakama.api.UserGroupList.UserGroup.Builder builderForValue) {
      copyOnWrite();
      instance.addUserGroups(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * Group-role pairs for a user.
     * </pre>
     *
     * <code>repeated .nakama.api.UserGroupList.UserGroup user_groups = 1;</code>
     */
    public Builder addAllUserGroups(
        java.lang.Iterable<? extends com.heroiclabs.nakama.api.UserGroupList.UserGroup> values) {
      copyOnWrite();
      instance.addAllUserGroups(values);
      return this;
    }
    /**
     * <pre>
     * Group-role pairs for a user.
     * </pre>
     *
     * <code>repeated .nakama.api.UserGroupList.UserGroup user_groups = 1;</code>
     */
    public Builder clearUserGroups() {
      copyOnWrite();
      instance.clearUserGroups();
      return this;
    }
    /**
     * <pre>
     * Group-role pairs for a user.
     * </pre>
     *
     * <code>repeated .nakama.api.UserGroupList.UserGroup user_groups = 1;</code>
     */
    public Builder removeUserGroups(int index) {
      copyOnWrite();
      instance.removeUserGroups(index);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:nakama.api.UserGroupList)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.heroiclabs.nakama.api.UserGroupList();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        userGroups_.makeImmutable();
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        com.heroiclabs.nakama.api.UserGroupList other = (com.heroiclabs.nakama.api.UserGroupList) arg1;
        userGroups_= visitor.visitList(userGroups_, other.userGroups_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                if (!userGroups_.isModifiable()) {
                  userGroups_ =
                      com.google.protobuf.GeneratedMessageLite.mutableCopy(userGroups_);
                }
                userGroups_.add(
                    input.readMessage(com.heroiclabs.nakama.api.UserGroupList.UserGroup.parser(), extensionRegistry));
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (com.heroiclabs.nakama.api.UserGroupList.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:nakama.api.UserGroupList)
  private static final com.heroiclabs.nakama.api.UserGroupList DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new UserGroupList();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static com.heroiclabs.nakama.api.UserGroupList getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<UserGroupList> PARSER;

  public static com.google.protobuf.Parser<UserGroupList> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

