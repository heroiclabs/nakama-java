// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: github.com/heroiclabs/nakama/api/api.proto

package com.heroiclabs.nakama.api;

/**
 * <pre>
 * A request to submit a score to a leaderboard.
 * </pre>
 *
 * Protobuf type {@code nakama.api.WriteLeaderboardRecordRequest}
 */
public  final class WriteLeaderboardRecordRequest extends
    com.google.protobuf.GeneratedMessageLite<
        WriteLeaderboardRecordRequest, WriteLeaderboardRecordRequest.Builder> implements
    // @@protoc_insertion_point(message_implements:nakama.api.WriteLeaderboardRecordRequest)
    WriteLeaderboardRecordRequestOrBuilder {
  private WriteLeaderboardRecordRequest() {
    leaderboardId_ = "";
  }
  public interface LeaderboardRecordWriteOrBuilder extends
      // @@protoc_insertion_point(interface_extends:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * The score value to submit.
     * </pre>
     *
     * <code>optional int64 score = 1;</code>
     */
    long getScore();

    /**
     * <pre>
     * An optional secondary value.
     * </pre>
     *
     * <code>optional int64 subscore = 2;</code>
     */
    long getSubscore();

    /**
     * <pre>
     * Optional record metadata.
     * </pre>
     *
     * <code>optional string metadata = 3;</code>
     */
    java.lang.String getMetadata();
    /**
     * <pre>
     * Optional record metadata.
     * </pre>
     *
     * <code>optional string metadata = 3;</code>
     */
    com.google.protobuf.ByteString
        getMetadataBytes();
  }
  /**
   * <pre>
   * Record values to write.
   * </pre>
   *
   * Protobuf type {@code nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite}
   */
  public  static final class LeaderboardRecordWrite extends
      com.google.protobuf.GeneratedMessageLite<
          LeaderboardRecordWrite, LeaderboardRecordWrite.Builder> implements
      // @@protoc_insertion_point(message_implements:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite)
      LeaderboardRecordWriteOrBuilder {
    private LeaderboardRecordWrite() {
      metadata_ = "";
    }
    public static final int SCORE_FIELD_NUMBER = 1;
    private long score_;
    /**
     * <pre>
     * The score value to submit.
     * </pre>
     *
     * <code>optional int64 score = 1;</code>
     */
    public long getScore() {
      return score_;
    }
    /**
     * <pre>
     * The score value to submit.
     * </pre>
     *
     * <code>optional int64 score = 1;</code>
     */
    private void setScore(long value) {
      
      score_ = value;
    }
    /**
     * <pre>
     * The score value to submit.
     * </pre>
     *
     * <code>optional int64 score = 1;</code>
     */
    private void clearScore() {
      
      score_ = 0L;
    }

    public static final int SUBSCORE_FIELD_NUMBER = 2;
    private long subscore_;
    /**
     * <pre>
     * An optional secondary value.
     * </pre>
     *
     * <code>optional int64 subscore = 2;</code>
     */
    public long getSubscore() {
      return subscore_;
    }
    /**
     * <pre>
     * An optional secondary value.
     * </pre>
     *
     * <code>optional int64 subscore = 2;</code>
     */
    private void setSubscore(long value) {
      
      subscore_ = value;
    }
    /**
     * <pre>
     * An optional secondary value.
     * </pre>
     *
     * <code>optional int64 subscore = 2;</code>
     */
    private void clearSubscore() {
      
      subscore_ = 0L;
    }

    public static final int METADATA_FIELD_NUMBER = 3;
    private java.lang.String metadata_;
    /**
     * <pre>
     * Optional record metadata.
     * </pre>
     *
     * <code>optional string metadata = 3;</code>
     */
    public java.lang.String getMetadata() {
      return metadata_;
    }
    /**
     * <pre>
     * Optional record metadata.
     * </pre>
     *
     * <code>optional string metadata = 3;</code>
     */
    public com.google.protobuf.ByteString
        getMetadataBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(metadata_);
    }
    /**
     * <pre>
     * Optional record metadata.
     * </pre>
     *
     * <code>optional string metadata = 3;</code>
     */
    private void setMetadata(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      metadata_ = value;
    }
    /**
     * <pre>
     * Optional record metadata.
     * </pre>
     *
     * <code>optional string metadata = 3;</code>
     */
    private void clearMetadata() {
      
      metadata_ = getDefaultInstance().getMetadata();
    }
    /**
     * <pre>
     * Optional record metadata.
     * </pre>
     *
     * <code>optional string metadata = 3;</code>
     */
    private void setMetadataBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      metadata_ = value.toStringUtf8();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (score_ != 0L) {
        output.writeInt64(1, score_);
      }
      if (subscore_ != 0L) {
        output.writeInt64(2, subscore_);
      }
      if (!metadata_.isEmpty()) {
        output.writeString(3, getMetadata());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (score_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, score_);
      }
      if (subscore_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, subscore_);
      }
      if (!metadata_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(3, getMetadata());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * Record values to write.
     * </pre>
     *
     * Protobuf type {@code nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite, Builder> implements
        // @@protoc_insertion_point(builder_implements:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite)
        com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWriteOrBuilder {
      // Construct using com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * The score value to submit.
       * </pre>
       *
       * <code>optional int64 score = 1;</code>
       */
      public long getScore() {
        return instance.getScore();
      }
      /**
       * <pre>
       * The score value to submit.
       * </pre>
       *
       * <code>optional int64 score = 1;</code>
       */
      public Builder setScore(long value) {
        copyOnWrite();
        instance.setScore(value);
        return this;
      }
      /**
       * <pre>
       * The score value to submit.
       * </pre>
       *
       * <code>optional int64 score = 1;</code>
       */
      public Builder clearScore() {
        copyOnWrite();
        instance.clearScore();
        return this;
      }

      /**
       * <pre>
       * An optional secondary value.
       * </pre>
       *
       * <code>optional int64 subscore = 2;</code>
       */
      public long getSubscore() {
        return instance.getSubscore();
      }
      /**
       * <pre>
       * An optional secondary value.
       * </pre>
       *
       * <code>optional int64 subscore = 2;</code>
       */
      public Builder setSubscore(long value) {
        copyOnWrite();
        instance.setSubscore(value);
        return this;
      }
      /**
       * <pre>
       * An optional secondary value.
       * </pre>
       *
       * <code>optional int64 subscore = 2;</code>
       */
      public Builder clearSubscore() {
        copyOnWrite();
        instance.clearSubscore();
        return this;
      }

      /**
       * <pre>
       * Optional record metadata.
       * </pre>
       *
       * <code>optional string metadata = 3;</code>
       */
      public java.lang.String getMetadata() {
        return instance.getMetadata();
      }
      /**
       * <pre>
       * Optional record metadata.
       * </pre>
       *
       * <code>optional string metadata = 3;</code>
       */
      public com.google.protobuf.ByteString
          getMetadataBytes() {
        return instance.getMetadataBytes();
      }
      /**
       * <pre>
       * Optional record metadata.
       * </pre>
       *
       * <code>optional string metadata = 3;</code>
       */
      public Builder setMetadata(
          java.lang.String value) {
        copyOnWrite();
        instance.setMetadata(value);
        return this;
      }
      /**
       * <pre>
       * Optional record metadata.
       * </pre>
       *
       * <code>optional string metadata = 3;</code>
       */
      public Builder clearMetadata() {
        copyOnWrite();
        instance.clearMetadata();
        return this;
      }
      /**
       * <pre>
       * Optional record metadata.
       * </pre>
       *
       * <code>optional string metadata = 3;</code>
       */
      public Builder setMetadataBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setMetadataBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite other = (com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite) arg1;
          score_ = visitor.visitLong(score_ != 0L, score_,
              other.score_ != 0L, other.score_);
          subscore_ = visitor.visitLong(subscore_ != 0L, subscore_,
              other.subscore_ != 0L, other.subscore_);
          metadata_ = visitor.visitString(!metadata_.isEmpty(), metadata_,
              !other.metadata_.isEmpty(), other.metadata_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {

                  score_ = input.readInt64();
                  break;
                }
                case 16: {

                  subscore_ = input.readInt64();
                  break;
                }
                case 26: {
                  String s = input.readStringRequireUtf8();

                  metadata_ = s;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite)
    private static final com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new LeaderboardRecordWrite();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<LeaderboardRecordWrite> PARSER;

    public static com.google.protobuf.Parser<LeaderboardRecordWrite> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public static final int LEADERBOARD_ID_FIELD_NUMBER = 1;
  private java.lang.String leaderboardId_;
  /**
   * <pre>
   * The ID of the leaderboard to write to.
   * </pre>
   *
   * <code>optional string leaderboard_id = 1;</code>
   */
  public java.lang.String getLeaderboardId() {
    return leaderboardId_;
  }
  /**
   * <pre>
   * The ID of the leaderboard to write to.
   * </pre>
   *
   * <code>optional string leaderboard_id = 1;</code>
   */
  public com.google.protobuf.ByteString
      getLeaderboardIdBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(leaderboardId_);
  }
  /**
   * <pre>
   * The ID of the leaderboard to write to.
   * </pre>
   *
   * <code>optional string leaderboard_id = 1;</code>
   */
  private void setLeaderboardId(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  
    leaderboardId_ = value;
  }
  /**
   * <pre>
   * The ID of the leaderboard to write to.
   * </pre>
   *
   * <code>optional string leaderboard_id = 1;</code>
   */
  private void clearLeaderboardId() {
    
    leaderboardId_ = getDefaultInstance().getLeaderboardId();
  }
  /**
   * <pre>
   * The ID of the leaderboard to write to.
   * </pre>
   *
   * <code>optional string leaderboard_id = 1;</code>
   */
  private void setLeaderboardIdBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    
    leaderboardId_ = value.toStringUtf8();
  }

  public static final int RECORD_FIELD_NUMBER = 2;
  private com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite record_;
  /**
   * <pre>
   * Record input.
   * </pre>
   *
   * <code>optional .nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite record = 2;</code>
   */
  public boolean hasRecord() {
    return record_ != null;
  }
  /**
   * <pre>
   * Record input.
   * </pre>
   *
   * <code>optional .nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite record = 2;</code>
   */
  public com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite getRecord() {
    return record_ == null ? com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite.getDefaultInstance() : record_;
  }
  /**
   * <pre>
   * Record input.
   * </pre>
   *
   * <code>optional .nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite record = 2;</code>
   */
  private void setRecord(com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite value) {
    if (value == null) {
      throw new NullPointerException();
    }
    record_ = value;
    
    }
  /**
   * <pre>
   * Record input.
   * </pre>
   *
   * <code>optional .nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite record = 2;</code>
   */
  private void setRecord(
      com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite.Builder builderForValue) {
    record_ = builderForValue.build();
    
  }
  /**
   * <pre>
   * Record input.
   * </pre>
   *
   * <code>optional .nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite record = 2;</code>
   */
  private void mergeRecord(com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite value) {
    if (record_ != null &&
        record_ != com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite.getDefaultInstance()) {
      record_ =
        com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite.newBuilder(record_).mergeFrom(value).buildPartial();
    } else {
      record_ = value;
    }
    
  }
  /**
   * <pre>
   * Record input.
   * </pre>
   *
   * <code>optional .nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite record = 2;</code>
   */
  private void clearRecord() {  record_ = null;
    
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!leaderboardId_.isEmpty()) {
      output.writeString(1, getLeaderboardId());
    }
    if (record_ != null) {
      output.writeMessage(2, getRecord());
    }
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (!leaderboardId_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(1, getLeaderboardId());
    }
    if (record_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getRecord());
    }
    memoizedSerializedSize = size;
    return size;
  }

  public static com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * A request to submit a score to a leaderboard.
   * </pre>
   *
   * Protobuf type {@code nakama.api.WriteLeaderboardRecordRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest, Builder> implements
      // @@protoc_insertion_point(builder_implements:nakama.api.WriteLeaderboardRecordRequest)
      com.heroiclabs.nakama.api.WriteLeaderboardRecordRequestOrBuilder {
    // Construct using com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * The ID of the leaderboard to write to.
     * </pre>
     *
     * <code>optional string leaderboard_id = 1;</code>
     */
    public java.lang.String getLeaderboardId() {
      return instance.getLeaderboardId();
    }
    /**
     * <pre>
     * The ID of the leaderboard to write to.
     * </pre>
     *
     * <code>optional string leaderboard_id = 1;</code>
     */
    public com.google.protobuf.ByteString
        getLeaderboardIdBytes() {
      return instance.getLeaderboardIdBytes();
    }
    /**
     * <pre>
     * The ID of the leaderboard to write to.
     * </pre>
     *
     * <code>optional string leaderboard_id = 1;</code>
     */
    public Builder setLeaderboardId(
        java.lang.String value) {
      copyOnWrite();
      instance.setLeaderboardId(value);
      return this;
    }
    /**
     * <pre>
     * The ID of the leaderboard to write to.
     * </pre>
     *
     * <code>optional string leaderboard_id = 1;</code>
     */
    public Builder clearLeaderboardId() {
      copyOnWrite();
      instance.clearLeaderboardId();
      return this;
    }
    /**
     * <pre>
     * The ID of the leaderboard to write to.
     * </pre>
     *
     * <code>optional string leaderboard_id = 1;</code>
     */
    public Builder setLeaderboardIdBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setLeaderboardIdBytes(value);
      return this;
    }

    /**
     * <pre>
     * Record input.
     * </pre>
     *
     * <code>optional .nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite record = 2;</code>
     */
    public boolean hasRecord() {
      return instance.hasRecord();
    }
    /**
     * <pre>
     * Record input.
     * </pre>
     *
     * <code>optional .nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite record = 2;</code>
     */
    public com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite getRecord() {
      return instance.getRecord();
    }
    /**
     * <pre>
     * Record input.
     * </pre>
     *
     * <code>optional .nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite record = 2;</code>
     */
    public Builder setRecord(com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite value) {
      copyOnWrite();
      instance.setRecord(value);
      return this;
      }
    /**
     * <pre>
     * Record input.
     * </pre>
     *
     * <code>optional .nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite record = 2;</code>
     */
    public Builder setRecord(
        com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite.Builder builderForValue) {
      copyOnWrite();
      instance.setRecord(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Record input.
     * </pre>
     *
     * <code>optional .nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite record = 2;</code>
     */
    public Builder mergeRecord(com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite value) {
      copyOnWrite();
      instance.mergeRecord(value);
      return this;
    }
    /**
     * <pre>
     * Record input.
     * </pre>
     *
     * <code>optional .nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite record = 2;</code>
     */
    public Builder clearRecord() {  copyOnWrite();
      instance.clearRecord();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:nakama.api.WriteLeaderboardRecordRequest)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest other = (com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest) arg1;
        leaderboardId_ = visitor.visitString(!leaderboardId_.isEmpty(), leaderboardId_,
            !other.leaderboardId_.isEmpty(), other.leaderboardId_);
        record_ = visitor.visitMessage(record_, other.record_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                String s = input.readStringRequireUtf8();

                leaderboardId_ = s;
                break;
              }
              case 18: {
                com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite.Builder subBuilder = null;
                if (record_ != null) {
                  subBuilder = record_.toBuilder();
                }
                record_ = input.readMessage(com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(record_);
                  record_ = subBuilder.buildPartial();
                }

                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:nakama.api.WriteLeaderboardRecordRequest)
  private static final com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new WriteLeaderboardRecordRequest();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static com.heroiclabs.nakama.api.WriteLeaderboardRecordRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<WriteLeaderboardRecordRequest> PARSER;

  public static com.google.protobuf.Parser<WriteLeaderboardRecordRequest> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

