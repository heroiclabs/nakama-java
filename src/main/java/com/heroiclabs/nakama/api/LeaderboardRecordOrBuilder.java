// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: github.com/heroiclabs/nakama-common/api/api.proto
// Protobuf Java Version: 4.28.2

package com.heroiclabs.nakama.api;

public interface LeaderboardRecordOrBuilder extends
    // @@protoc_insertion_point(interface_extends:nakama.api.LeaderboardRecord)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The ID of the leaderboard this score belongs to.
   * </pre>
   *
   * <code>string leaderboard_id = 1 [json_name = "leaderboardId"];</code>
   * @return The leaderboardId.
   */
  java.lang.String getLeaderboardId();
  /**
   * <pre>
   * The ID of the leaderboard this score belongs to.
   * </pre>
   *
   * <code>string leaderboard_id = 1 [json_name = "leaderboardId"];</code>
   * @return The bytes for leaderboardId.
   */
  com.google.protobuf.ByteString
      getLeaderboardIdBytes();

  /**
   * <pre>
   * The ID of the score owner, usually a user or group.
   * </pre>
   *
   * <code>string owner_id = 2 [json_name = "ownerId"];</code>
   * @return The ownerId.
   */
  java.lang.String getOwnerId();
  /**
   * <pre>
   * The ID of the score owner, usually a user or group.
   * </pre>
   *
   * <code>string owner_id = 2 [json_name = "ownerId"];</code>
   * @return The bytes for ownerId.
   */
  com.google.protobuf.ByteString
      getOwnerIdBytes();

  /**
   * <pre>
   * The username of the score owner, if the owner is a user.
   * </pre>
   *
   * <code>.google.protobuf.StringValue username = 3 [json_name = "username"];</code>
   * @return Whether the username field is set.
   */
  boolean hasUsername();
  /**
   * <pre>
   * The username of the score owner, if the owner is a user.
   * </pre>
   *
   * <code>.google.protobuf.StringValue username = 3 [json_name = "username"];</code>
   * @return The username.
   */
  com.google.protobuf.StringValue getUsername();
  /**
   * <pre>
   * The username of the score owner, if the owner is a user.
   * </pre>
   *
   * <code>.google.protobuf.StringValue username = 3 [json_name = "username"];</code>
   */
  com.google.protobuf.StringValueOrBuilder getUsernameOrBuilder();

  /**
   * <pre>
   * The score value.
   * </pre>
   *
   * <code>int64 score = 4 [json_name = "score"];</code>
   * @return The score.
   */
  long getScore();

  /**
   * <pre>
   * An optional subscore value.
   * </pre>
   *
   * <code>int64 subscore = 5 [json_name = "subscore"];</code>
   * @return The subscore.
   */
  long getSubscore();

  /**
   * <pre>
   * The number of submissions to this score record.
   * </pre>
   *
   * <code>int32 num_score = 6 [json_name = "numScore"];</code>
   * @return The numScore.
   */
  int getNumScore();

  /**
   * <pre>
   * Metadata.
   * </pre>
   *
   * <code>string metadata = 7 [json_name = "metadata"];</code>
   * @return The metadata.
   */
  java.lang.String getMetadata();
  /**
   * <pre>
   * Metadata.
   * </pre>
   *
   * <code>string metadata = 7 [json_name = "metadata"];</code>
   * @return The bytes for metadata.
   */
  com.google.protobuf.ByteString
      getMetadataBytes();

  /**
   * <pre>
   * The UNIX time (for gRPC clients) or ISO string (for REST clients) when the leaderboard record was created.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp create_time = 8 [json_name = "createTime"];</code>
   * @return Whether the createTime field is set.
   */
  boolean hasCreateTime();
  /**
   * <pre>
   * The UNIX time (for gRPC clients) or ISO string (for REST clients) when the leaderboard record was created.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp create_time = 8 [json_name = "createTime"];</code>
   * @return The createTime.
   */
  com.google.protobuf.Timestamp getCreateTime();
  /**
   * <pre>
   * The UNIX time (for gRPC clients) or ISO string (for REST clients) when the leaderboard record was created.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp create_time = 8 [json_name = "createTime"];</code>
   */
  com.google.protobuf.TimestampOrBuilder getCreateTimeOrBuilder();

  /**
   * <pre>
   * The UNIX time (for gRPC clients) or ISO string (for REST clients) when the leaderboard record was updated.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp update_time = 9 [json_name = "updateTime"];</code>
   * @return Whether the updateTime field is set.
   */
  boolean hasUpdateTime();
  /**
   * <pre>
   * The UNIX time (for gRPC clients) or ISO string (for REST clients) when the leaderboard record was updated.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp update_time = 9 [json_name = "updateTime"];</code>
   * @return The updateTime.
   */
  com.google.protobuf.Timestamp getUpdateTime();
  /**
   * <pre>
   * The UNIX time (for gRPC clients) or ISO string (for REST clients) when the leaderboard record was updated.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp update_time = 9 [json_name = "updateTime"];</code>
   */
  com.google.protobuf.TimestampOrBuilder getUpdateTimeOrBuilder();

  /**
   * <pre>
   * The UNIX time (for gRPC clients) or ISO string (for REST clients) when the leaderboard record expires.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp expiry_time = 10 [json_name = "expiryTime"];</code>
   * @return Whether the expiryTime field is set.
   */
  boolean hasExpiryTime();
  /**
   * <pre>
   * The UNIX time (for gRPC clients) or ISO string (for REST clients) when the leaderboard record expires.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp expiry_time = 10 [json_name = "expiryTime"];</code>
   * @return The expiryTime.
   */
  com.google.protobuf.Timestamp getExpiryTime();
  /**
   * <pre>
   * The UNIX time (for gRPC clients) or ISO string (for REST clients) when the leaderboard record expires.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp expiry_time = 10 [json_name = "expiryTime"];</code>
   */
  com.google.protobuf.TimestampOrBuilder getExpiryTimeOrBuilder();

  /**
   * <pre>
   * The rank of this record.
   * </pre>
   *
   * <code>int64 rank = 11 [json_name = "rank"];</code>
   * @return The rank.
   */
  long getRank();

  /**
   * <pre>
   * The maximum number of score updates allowed by the owner.
   * </pre>
   *
   * <code>uint32 max_num_score = 12 [json_name = "maxNumScore"];</code>
   * @return The maxNumScore.
   */
  int getMaxNumScore();
}
