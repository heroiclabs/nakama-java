// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: github.com/heroiclabs/nakama-common/api/api.proto
// Protobuf Java Version: 4.28.2

package com.heroiclabs.nakama.api;

public interface TournamentOrBuilder extends
    // @@protoc_insertion_point(interface_extends:nakama.api.Tournament)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The ID of the tournament.
   * </pre>
   *
   * <code>string id = 1 [json_name = "id"];</code>
   * @return The id.
   */
  java.lang.String getId();
  /**
   * <pre>
   * The ID of the tournament.
   * </pre>
   *
   * <code>string id = 1 [json_name = "id"];</code>
   * @return The bytes for id.
   */
  com.google.protobuf.ByteString
      getIdBytes();

  /**
   * <pre>
   * The title for the tournament.
   * </pre>
   *
   * <code>string title = 2 [json_name = "title"];</code>
   * @return The title.
   */
  java.lang.String getTitle();
  /**
   * <pre>
   * The title for the tournament.
   * </pre>
   *
   * <code>string title = 2 [json_name = "title"];</code>
   * @return The bytes for title.
   */
  com.google.protobuf.ByteString
      getTitleBytes();

  /**
   * <pre>
   * The description of the tournament. May be blank.
   * </pre>
   *
   * <code>string description = 3 [json_name = "description"];</code>
   * @return The description.
   */
  java.lang.String getDescription();
  /**
   * <pre>
   * The description of the tournament. May be blank.
   * </pre>
   *
   * <code>string description = 3 [json_name = "description"];</code>
   * @return The bytes for description.
   */
  com.google.protobuf.ByteString
      getDescriptionBytes();

  /**
   * <pre>
   * The category of the tournament. e.g. "vip" could be category 1.
   * </pre>
   *
   * <code>uint32 category = 4 [json_name = "category"];</code>
   * @return The category.
   */
  int getCategory();

  /**
   * <pre>
   * ASC (0) or DESC (1) sort mode of scores in the tournament.
   * </pre>
   *
   * <code>uint32 sort_order = 5 [json_name = "sortOrder"];</code>
   * @return The sortOrder.
   */
  int getSortOrder();

  /**
   * <pre>
   * The current number of players in the tournament.
   * </pre>
   *
   * <code>uint32 size = 6 [json_name = "size"];</code>
   * @return The size.
   */
  int getSize();

  /**
   * <pre>
   * The maximum number of players for the tournament.
   * </pre>
   *
   * <code>uint32 max_size = 7 [json_name = "maxSize"];</code>
   * @return The maxSize.
   */
  int getMaxSize();

  /**
   * <pre>
   * The maximum score updates allowed per player for the current tournament.
   * </pre>
   *
   * <code>uint32 max_num_score = 8 [json_name = "maxNumScore"];</code>
   * @return The maxNumScore.
   */
  int getMaxNumScore();

  /**
   * <pre>
   * True if the tournament is active and can enter. A computed value.
   * </pre>
   *
   * <code>bool can_enter = 9 [json_name = "canEnter"];</code>
   * @return The canEnter.
   */
  boolean getCanEnter();

  /**
   * <pre>
   * The UNIX time when the tournament stops being active until next reset. A computed value.
   * </pre>
   *
   * <code>uint32 end_active = 10 [json_name = "endActive"];</code>
   * @return The endActive.
   */
  int getEndActive();

  /**
   * <pre>
   * The UNIX time when the tournament is next playable. A computed value.
   * </pre>
   *
   * <code>uint32 next_reset = 11 [json_name = "nextReset"];</code>
   * @return The nextReset.
   */
  int getNextReset();

  /**
   * <pre>
   * Additional information stored as a JSON object.
   * </pre>
   *
   * <code>string metadata = 12 [json_name = "metadata"];</code>
   * @return The metadata.
   */
  java.lang.String getMetadata();
  /**
   * <pre>
   * Additional information stored as a JSON object.
   * </pre>
   *
   * <code>string metadata = 12 [json_name = "metadata"];</code>
   * @return The bytes for metadata.
   */
  com.google.protobuf.ByteString
      getMetadataBytes();

  /**
   * <pre>
   * The UNIX time (for gRPC clients) or ISO string (for REST clients) when the tournament was created.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp create_time = 13 [json_name = "createTime"];</code>
   * @return Whether the createTime field is set.
   */
  boolean hasCreateTime();
  /**
   * <pre>
   * The UNIX time (for gRPC clients) or ISO string (for REST clients) when the tournament was created.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp create_time = 13 [json_name = "createTime"];</code>
   * @return The createTime.
   */
  com.google.protobuf.Timestamp getCreateTime();
  /**
   * <pre>
   * The UNIX time (for gRPC clients) or ISO string (for REST clients) when the tournament was created.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp create_time = 13 [json_name = "createTime"];</code>
   */
  com.google.protobuf.TimestampOrBuilder getCreateTimeOrBuilder();

  /**
   * <pre>
   * The UNIX time (for gRPC clients) or ISO string (for REST clients) when the tournament will start.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp start_time = 14 [json_name = "startTime"];</code>
   * @return Whether the startTime field is set.
   */
  boolean hasStartTime();
  /**
   * <pre>
   * The UNIX time (for gRPC clients) or ISO string (for REST clients) when the tournament will start.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp start_time = 14 [json_name = "startTime"];</code>
   * @return The startTime.
   */
  com.google.protobuf.Timestamp getStartTime();
  /**
   * <pre>
   * The UNIX time (for gRPC clients) or ISO string (for REST clients) when the tournament will start.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp start_time = 14 [json_name = "startTime"];</code>
   */
  com.google.protobuf.TimestampOrBuilder getStartTimeOrBuilder();

  /**
   * <pre>
   * The UNIX time (for gRPC clients) or ISO string (for REST clients) when the tournament will be stopped.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp end_time = 15 [json_name = "endTime"];</code>
   * @return Whether the endTime field is set.
   */
  boolean hasEndTime();
  /**
   * <pre>
   * The UNIX time (for gRPC clients) or ISO string (for REST clients) when the tournament will be stopped.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp end_time = 15 [json_name = "endTime"];</code>
   * @return The endTime.
   */
  com.google.protobuf.Timestamp getEndTime();
  /**
   * <pre>
   * The UNIX time (for gRPC clients) or ISO string (for REST clients) when the tournament will be stopped.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp end_time = 15 [json_name = "endTime"];</code>
   */
  com.google.protobuf.TimestampOrBuilder getEndTimeOrBuilder();

  /**
   * <pre>
   * Duration of the tournament in seconds.
   * </pre>
   *
   * <code>uint32 duration = 16 [json_name = "duration"];</code>
   * @return The duration.
   */
  int getDuration();

  /**
   * <pre>
   * The UNIX time when the tournament start being active. A computed value.
   * </pre>
   *
   * <code>uint32 start_active = 17 [json_name = "startActive"];</code>
   * @return The startActive.
   */
  int getStartActive();

  /**
   * <pre>
   * The UNIX time when the tournament was last reset. A computed value.
   * </pre>
   *
   * <code>uint32 prev_reset = 18 [json_name = "prevReset"];</code>
   * @return The prevReset.
   */
  int getPrevReset();

  /**
   * <pre>
   * Operator.
   * </pre>
   *
   * <code>.nakama.api.Operator operator = 19 [json_name = "operator"];</code>
   * @return The enum numeric value on the wire for operator.
   */
  int getOperatorValue();
  /**
   * <pre>
   * Operator.
   * </pre>
   *
   * <code>.nakama.api.Operator operator = 19 [json_name = "operator"];</code>
   * @return The operator.
   */
  com.heroiclabs.nakama.api.Operator getOperator();

  /**
   * <pre>
   * Whether the leaderboard was created authoritatively or not.
   * </pre>
   *
   * <code>bool authoritative = 20 [json_name = "authoritative"];</code>
   * @return The authoritative.
   */
  boolean getAuthoritative();
}
