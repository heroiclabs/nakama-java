// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: github.com/heroiclabs/nakama-common/api/api.proto
// Protobuf Java Version: 4.28.2

package com.heroiclabs.nakama.api;

public interface TournamentRecordListOrBuilder extends
    // @@protoc_insertion_point(interface_extends:nakama.api.TournamentRecordList)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * A list of tournament records.
   * </pre>
   *
   * <code>repeated .nakama.api.LeaderboardRecord records = 1 [json_name = "records"];</code>
   */
  java.util.List<com.heroiclabs.nakama.api.LeaderboardRecord> 
      getRecordsList();
  /**
   * <pre>
   * A list of tournament records.
   * </pre>
   *
   * <code>repeated .nakama.api.LeaderboardRecord records = 1 [json_name = "records"];</code>
   */
  com.heroiclabs.nakama.api.LeaderboardRecord getRecords(int index);
  /**
   * <pre>
   * A list of tournament records.
   * </pre>
   *
   * <code>repeated .nakama.api.LeaderboardRecord records = 1 [json_name = "records"];</code>
   */
  int getRecordsCount();
  /**
   * <pre>
   * A list of tournament records.
   * </pre>
   *
   * <code>repeated .nakama.api.LeaderboardRecord records = 1 [json_name = "records"];</code>
   */
  java.util.List<? extends com.heroiclabs.nakama.api.LeaderboardRecordOrBuilder> 
      getRecordsOrBuilderList();
  /**
   * <pre>
   * A list of tournament records.
   * </pre>
   *
   * <code>repeated .nakama.api.LeaderboardRecord records = 1 [json_name = "records"];</code>
   */
  com.heroiclabs.nakama.api.LeaderboardRecordOrBuilder getRecordsOrBuilder(
      int index);

  /**
   * <pre>
   * A batched set of tournament records belonging to specified owners.
   * </pre>
   *
   * <code>repeated .nakama.api.LeaderboardRecord owner_records = 2 [json_name = "ownerRecords"];</code>
   */
  java.util.List<com.heroiclabs.nakama.api.LeaderboardRecord> 
      getOwnerRecordsList();
  /**
   * <pre>
   * A batched set of tournament records belonging to specified owners.
   * </pre>
   *
   * <code>repeated .nakama.api.LeaderboardRecord owner_records = 2 [json_name = "ownerRecords"];</code>
   */
  com.heroiclabs.nakama.api.LeaderboardRecord getOwnerRecords(int index);
  /**
   * <pre>
   * A batched set of tournament records belonging to specified owners.
   * </pre>
   *
   * <code>repeated .nakama.api.LeaderboardRecord owner_records = 2 [json_name = "ownerRecords"];</code>
   */
  int getOwnerRecordsCount();
  /**
   * <pre>
   * A batched set of tournament records belonging to specified owners.
   * </pre>
   *
   * <code>repeated .nakama.api.LeaderboardRecord owner_records = 2 [json_name = "ownerRecords"];</code>
   */
  java.util.List<? extends com.heroiclabs.nakama.api.LeaderboardRecordOrBuilder> 
      getOwnerRecordsOrBuilderList();
  /**
   * <pre>
   * A batched set of tournament records belonging to specified owners.
   * </pre>
   *
   * <code>repeated .nakama.api.LeaderboardRecord owner_records = 2 [json_name = "ownerRecords"];</code>
   */
  com.heroiclabs.nakama.api.LeaderboardRecordOrBuilder getOwnerRecordsOrBuilder(
      int index);

  /**
   * <pre>
   * The cursor to send when retireving the next page (optional).
   * </pre>
   *
   * <code>string next_cursor = 3 [json_name = "nextCursor"];</code>
   * @return The nextCursor.
   */
  java.lang.String getNextCursor();
  /**
   * <pre>
   * The cursor to send when retireving the next page (optional).
   * </pre>
   *
   * <code>string next_cursor = 3 [json_name = "nextCursor"];</code>
   * @return The bytes for nextCursor.
   */
  com.google.protobuf.ByteString
      getNextCursorBytes();

  /**
   * <pre>
   * The cursor to send when retrieving the previous page (optional).
   * </pre>
   *
   * <code>string prev_cursor = 4 [json_name = "prevCursor"];</code>
   * @return The prevCursor.
   */
  java.lang.String getPrevCursor();
  /**
   * <pre>
   * The cursor to send when retrieving the previous page (optional).
   * </pre>
   *
   * <code>string prev_cursor = 4 [json_name = "prevCursor"];</code>
   * @return The bytes for prevCursor.
   */
  com.google.protobuf.ByteString
      getPrevCursorBytes();

  /**
   * <pre>
   * The total number of ranks available.
   * </pre>
   *
   * <code>int64 rank_count = 5 [json_name = "rankCount"];</code>
   * @return The rankCount.
   */
  long getRankCount();
}
