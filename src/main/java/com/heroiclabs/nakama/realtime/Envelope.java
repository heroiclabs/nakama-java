// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: github.com/heroiclabs/nakama-common/api/realtime.proto
// Protobuf Java Version: 4.28.2

package com.heroiclabs.nakama.realtime;

/**
 * <pre>
 * An envelope for a realtime message.
 * </pre>
 *
 * Protobuf type {@code nakama.realtime.Envelope}
 */
public final class Envelope extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:nakama.realtime.Envelope)
    EnvelopeOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 28,
      /* patch= */ 2,
      /* suffix= */ "",
      Envelope.class.getName());
  }
  // Use Envelope.newBuilder() to construct.
  private Envelope(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private Envelope() {
    cid_ = "";
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.heroiclabs.nakama.realtime.RealtimeProto.internal_static_nakama_realtime_Envelope_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.heroiclabs.nakama.realtime.RealtimeProto.internal_static_nakama_realtime_Envelope_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.heroiclabs.nakama.realtime.Envelope.class, com.heroiclabs.nakama.realtime.Envelope.Builder.class);
  }

  private int messageCase_ = 0;
  @SuppressWarnings("serial")
  private java.lang.Object message_;
  public enum MessageCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    CHANNEL(2),
    CHANNEL_JOIN(3),
    CHANNEL_LEAVE(4),
    CHANNEL_MESSAGE(5),
    CHANNEL_MESSAGE_ACK(6),
    CHANNEL_MESSAGE_SEND(7),
    CHANNEL_MESSAGE_UPDATE(8),
    CHANNEL_MESSAGE_REMOVE(9),
    CHANNEL_PRESENCE_EVENT(10),
    ERROR(11),
    MATCH(12),
    MATCH_CREATE(13),
    MATCH_DATA(14),
    MATCH_DATA_SEND(15),
    MATCH_JOIN(16),
    MATCH_LEAVE(17),
    MATCH_PRESENCE_EVENT(18),
    MATCHMAKER_ADD(19),
    MATCHMAKER_MATCHED(20),
    MATCHMAKER_REMOVE(21),
    MATCHMAKER_TICKET(22),
    NOTIFICATIONS(23),
    RPC(24),
    STATUS(25),
    STATUS_FOLLOW(26),
    STATUS_PRESENCE_EVENT(27),
    STATUS_UNFOLLOW(28),
    STATUS_UPDATE(29),
    STREAM_DATA(30),
    STREAM_PRESENCE_EVENT(31),
    PING(32),
    PONG(33),
    MESSAGE_NOT_SET(0);
    private final int value;
    private MessageCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static MessageCase valueOf(int value) {
      return forNumber(value);
    }

    public static MessageCase forNumber(int value) {
      switch (value) {
        case 2: return CHANNEL;
        case 3: return CHANNEL_JOIN;
        case 4: return CHANNEL_LEAVE;
        case 5: return CHANNEL_MESSAGE;
        case 6: return CHANNEL_MESSAGE_ACK;
        case 7: return CHANNEL_MESSAGE_SEND;
        case 8: return CHANNEL_MESSAGE_UPDATE;
        case 9: return CHANNEL_MESSAGE_REMOVE;
        case 10: return CHANNEL_PRESENCE_EVENT;
        case 11: return ERROR;
        case 12: return MATCH;
        case 13: return MATCH_CREATE;
        case 14: return MATCH_DATA;
        case 15: return MATCH_DATA_SEND;
        case 16: return MATCH_JOIN;
        case 17: return MATCH_LEAVE;
        case 18: return MATCH_PRESENCE_EVENT;
        case 19: return MATCHMAKER_ADD;
        case 20: return MATCHMAKER_MATCHED;
        case 21: return MATCHMAKER_REMOVE;
        case 22: return MATCHMAKER_TICKET;
        case 23: return NOTIFICATIONS;
        case 24: return RPC;
        case 25: return STATUS;
        case 26: return STATUS_FOLLOW;
        case 27: return STATUS_PRESENCE_EVENT;
        case 28: return STATUS_UNFOLLOW;
        case 29: return STATUS_UPDATE;
        case 30: return STREAM_DATA;
        case 31: return STREAM_PRESENCE_EVENT;
        case 32: return PING;
        case 33: return PONG;
        case 0: return MESSAGE_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public MessageCase
  getMessageCase() {
    return MessageCase.forNumber(
        messageCase_);
  }

  public static final int CID_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private volatile java.lang.Object cid_ = "";
  /**
   * <code>string cid = 1 [json_name = "cid"];</code>
   * @return The cid.
   */
  @java.lang.Override
  public java.lang.String getCid() {
    java.lang.Object ref = cid_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      cid_ = s;
      return s;
    }
  }
  /**
   * <code>string cid = 1 [json_name = "cid"];</code>
   * @return The bytes for cid.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getCidBytes() {
    java.lang.Object ref = cid_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      cid_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int CHANNEL_FIELD_NUMBER = 2;
  /**
   * <pre>
   * A response from a channel join operation.
   * </pre>
   *
   * <code>.nakama.realtime.Channel channel = 2 [json_name = "channel"];</code>
   * @return Whether the channel field is set.
   */
  @java.lang.Override
  public boolean hasChannel() {
    return messageCase_ == 2;
  }
  /**
   * <pre>
   * A response from a channel join operation.
   * </pre>
   *
   * <code>.nakama.realtime.Channel channel = 2 [json_name = "channel"];</code>
   * @return The channel.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.Channel getChannel() {
    if (messageCase_ == 2) {
       return (com.heroiclabs.nakama.realtime.Channel) message_;
    }
    return com.heroiclabs.nakama.realtime.Channel.getDefaultInstance();
  }
  /**
   * <pre>
   * A response from a channel join operation.
   * </pre>
   *
   * <code>.nakama.realtime.Channel channel = 2 [json_name = "channel"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.ChannelOrBuilder getChannelOrBuilder() {
    if (messageCase_ == 2) {
       return (com.heroiclabs.nakama.realtime.Channel) message_;
    }
    return com.heroiclabs.nakama.realtime.Channel.getDefaultInstance();
  }

  public static final int CHANNEL_JOIN_FIELD_NUMBER = 3;
  /**
   * <pre>
   * Join a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelJoin channel_join = 3 [json_name = "channelJoin"];</code>
   * @return Whether the channelJoin field is set.
   */
  @java.lang.Override
  public boolean hasChannelJoin() {
    return messageCase_ == 3;
  }
  /**
   * <pre>
   * Join a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelJoin channel_join = 3 [json_name = "channelJoin"];</code>
   * @return The channelJoin.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.ChannelJoin getChannelJoin() {
    if (messageCase_ == 3) {
       return (com.heroiclabs.nakama.realtime.ChannelJoin) message_;
    }
    return com.heroiclabs.nakama.realtime.ChannelJoin.getDefaultInstance();
  }
  /**
   * <pre>
   * Join a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelJoin channel_join = 3 [json_name = "channelJoin"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.ChannelJoinOrBuilder getChannelJoinOrBuilder() {
    if (messageCase_ == 3) {
       return (com.heroiclabs.nakama.realtime.ChannelJoin) message_;
    }
    return com.heroiclabs.nakama.realtime.ChannelJoin.getDefaultInstance();
  }

  public static final int CHANNEL_LEAVE_FIELD_NUMBER = 4;
  /**
   * <pre>
   * Leave a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelLeave channel_leave = 4 [json_name = "channelLeave"];</code>
   * @return Whether the channelLeave field is set.
   */
  @java.lang.Override
  public boolean hasChannelLeave() {
    return messageCase_ == 4;
  }
  /**
   * <pre>
   * Leave a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelLeave channel_leave = 4 [json_name = "channelLeave"];</code>
   * @return The channelLeave.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.ChannelLeave getChannelLeave() {
    if (messageCase_ == 4) {
       return (com.heroiclabs.nakama.realtime.ChannelLeave) message_;
    }
    return com.heroiclabs.nakama.realtime.ChannelLeave.getDefaultInstance();
  }
  /**
   * <pre>
   * Leave a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelLeave channel_leave = 4 [json_name = "channelLeave"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.ChannelLeaveOrBuilder getChannelLeaveOrBuilder() {
    if (messageCase_ == 4) {
       return (com.heroiclabs.nakama.realtime.ChannelLeave) message_;
    }
    return com.heroiclabs.nakama.realtime.ChannelLeave.getDefaultInstance();
  }

  public static final int CHANNEL_MESSAGE_FIELD_NUMBER = 5;
  /**
   * <pre>
   * An incoming message on a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.api.ChannelMessage channel_message = 5 [json_name = "channelMessage"];</code>
   * @return Whether the channelMessage field is set.
   */
  @java.lang.Override
  public boolean hasChannelMessage() {
    return messageCase_ == 5;
  }
  /**
   * <pre>
   * An incoming message on a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.api.ChannelMessage channel_message = 5 [json_name = "channelMessage"];</code>
   * @return The channelMessage.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.api.ChannelMessage getChannelMessage() {
    if (messageCase_ == 5) {
       return (com.heroiclabs.nakama.api.ChannelMessage) message_;
    }
    return com.heroiclabs.nakama.api.ChannelMessage.getDefaultInstance();
  }
  /**
   * <pre>
   * An incoming message on a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.api.ChannelMessage channel_message = 5 [json_name = "channelMessage"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.api.ChannelMessageOrBuilder getChannelMessageOrBuilder() {
    if (messageCase_ == 5) {
       return (com.heroiclabs.nakama.api.ChannelMessage) message_;
    }
    return com.heroiclabs.nakama.api.ChannelMessage.getDefaultInstance();
  }

  public static final int CHANNEL_MESSAGE_ACK_FIELD_NUMBER = 6;
  /**
   * <pre>
   * An acknowledgement received in response to sending a message on a chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageAck channel_message_ack = 6 [json_name = "channelMessageAck"];</code>
   * @return Whether the channelMessageAck field is set.
   */
  @java.lang.Override
  public boolean hasChannelMessageAck() {
    return messageCase_ == 6;
  }
  /**
   * <pre>
   * An acknowledgement received in response to sending a message on a chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageAck channel_message_ack = 6 [json_name = "channelMessageAck"];</code>
   * @return The channelMessageAck.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.ChannelMessageAck getChannelMessageAck() {
    if (messageCase_ == 6) {
       return (com.heroiclabs.nakama.realtime.ChannelMessageAck) message_;
    }
    return com.heroiclabs.nakama.realtime.ChannelMessageAck.getDefaultInstance();
  }
  /**
   * <pre>
   * An acknowledgement received in response to sending a message on a chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageAck channel_message_ack = 6 [json_name = "channelMessageAck"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.ChannelMessageAckOrBuilder getChannelMessageAckOrBuilder() {
    if (messageCase_ == 6) {
       return (com.heroiclabs.nakama.realtime.ChannelMessageAck) message_;
    }
    return com.heroiclabs.nakama.realtime.ChannelMessageAck.getDefaultInstance();
  }

  public static final int CHANNEL_MESSAGE_SEND_FIELD_NUMBER = 7;
  /**
   * <pre>
   * Send a message to a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageSend channel_message_send = 7 [json_name = "channelMessageSend"];</code>
   * @return Whether the channelMessageSend field is set.
   */
  @java.lang.Override
  public boolean hasChannelMessageSend() {
    return messageCase_ == 7;
  }
  /**
   * <pre>
   * Send a message to a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageSend channel_message_send = 7 [json_name = "channelMessageSend"];</code>
   * @return The channelMessageSend.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.ChannelMessageSend getChannelMessageSend() {
    if (messageCase_ == 7) {
       return (com.heroiclabs.nakama.realtime.ChannelMessageSend) message_;
    }
    return com.heroiclabs.nakama.realtime.ChannelMessageSend.getDefaultInstance();
  }
  /**
   * <pre>
   * Send a message to a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageSend channel_message_send = 7 [json_name = "channelMessageSend"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.ChannelMessageSendOrBuilder getChannelMessageSendOrBuilder() {
    if (messageCase_ == 7) {
       return (com.heroiclabs.nakama.realtime.ChannelMessageSend) message_;
    }
    return com.heroiclabs.nakama.realtime.ChannelMessageSend.getDefaultInstance();
  }

  public static final int CHANNEL_MESSAGE_UPDATE_FIELD_NUMBER = 8;
  /**
   * <pre>
   * Update a message previously sent to a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageUpdate channel_message_update = 8 [json_name = "channelMessageUpdate"];</code>
   * @return Whether the channelMessageUpdate field is set.
   */
  @java.lang.Override
  public boolean hasChannelMessageUpdate() {
    return messageCase_ == 8;
  }
  /**
   * <pre>
   * Update a message previously sent to a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageUpdate channel_message_update = 8 [json_name = "channelMessageUpdate"];</code>
   * @return The channelMessageUpdate.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.ChannelMessageUpdate getChannelMessageUpdate() {
    if (messageCase_ == 8) {
       return (com.heroiclabs.nakama.realtime.ChannelMessageUpdate) message_;
    }
    return com.heroiclabs.nakama.realtime.ChannelMessageUpdate.getDefaultInstance();
  }
  /**
   * <pre>
   * Update a message previously sent to a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageUpdate channel_message_update = 8 [json_name = "channelMessageUpdate"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.ChannelMessageUpdateOrBuilder getChannelMessageUpdateOrBuilder() {
    if (messageCase_ == 8) {
       return (com.heroiclabs.nakama.realtime.ChannelMessageUpdate) message_;
    }
    return com.heroiclabs.nakama.realtime.ChannelMessageUpdate.getDefaultInstance();
  }

  public static final int CHANNEL_MESSAGE_REMOVE_FIELD_NUMBER = 9;
  /**
   * <pre>
   * Remove a message previously sent to a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageRemove channel_message_remove = 9 [json_name = "channelMessageRemove"];</code>
   * @return Whether the channelMessageRemove field is set.
   */
  @java.lang.Override
  public boolean hasChannelMessageRemove() {
    return messageCase_ == 9;
  }
  /**
   * <pre>
   * Remove a message previously sent to a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageRemove channel_message_remove = 9 [json_name = "channelMessageRemove"];</code>
   * @return The channelMessageRemove.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.ChannelMessageRemove getChannelMessageRemove() {
    if (messageCase_ == 9) {
       return (com.heroiclabs.nakama.realtime.ChannelMessageRemove) message_;
    }
    return com.heroiclabs.nakama.realtime.ChannelMessageRemove.getDefaultInstance();
  }
  /**
   * <pre>
   * Remove a message previously sent to a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageRemove channel_message_remove = 9 [json_name = "channelMessageRemove"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.ChannelMessageRemoveOrBuilder getChannelMessageRemoveOrBuilder() {
    if (messageCase_ == 9) {
       return (com.heroiclabs.nakama.realtime.ChannelMessageRemove) message_;
    }
    return com.heroiclabs.nakama.realtime.ChannelMessageRemove.getDefaultInstance();
  }

  public static final int CHANNEL_PRESENCE_EVENT_FIELD_NUMBER = 10;
  /**
   * <pre>
   * Presence update for a particular realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelPresenceEvent channel_presence_event = 10 [json_name = "channelPresenceEvent"];</code>
   * @return Whether the channelPresenceEvent field is set.
   */
  @java.lang.Override
  public boolean hasChannelPresenceEvent() {
    return messageCase_ == 10;
  }
  /**
   * <pre>
   * Presence update for a particular realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelPresenceEvent channel_presence_event = 10 [json_name = "channelPresenceEvent"];</code>
   * @return The channelPresenceEvent.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.ChannelPresenceEvent getChannelPresenceEvent() {
    if (messageCase_ == 10) {
       return (com.heroiclabs.nakama.realtime.ChannelPresenceEvent) message_;
    }
    return com.heroiclabs.nakama.realtime.ChannelPresenceEvent.getDefaultInstance();
  }
  /**
   * <pre>
   * Presence update for a particular realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelPresenceEvent channel_presence_event = 10 [json_name = "channelPresenceEvent"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.ChannelPresenceEventOrBuilder getChannelPresenceEventOrBuilder() {
    if (messageCase_ == 10) {
       return (com.heroiclabs.nakama.realtime.ChannelPresenceEvent) message_;
    }
    return com.heroiclabs.nakama.realtime.ChannelPresenceEvent.getDefaultInstance();
  }

  public static final int ERROR_FIELD_NUMBER = 11;
  /**
   * <pre>
   * Describes an error which occurred on the server.
   * </pre>
   *
   * <code>.nakama.realtime.Error error = 11 [json_name = "error"];</code>
   * @return Whether the error field is set.
   */
  @java.lang.Override
  public boolean hasError() {
    return messageCase_ == 11;
  }
  /**
   * <pre>
   * Describes an error which occurred on the server.
   * </pre>
   *
   * <code>.nakama.realtime.Error error = 11 [json_name = "error"];</code>
   * @return The error.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.Error getError() {
    if (messageCase_ == 11) {
       return (com.heroiclabs.nakama.realtime.Error) message_;
    }
    return com.heroiclabs.nakama.realtime.Error.getDefaultInstance();
  }
  /**
   * <pre>
   * Describes an error which occurred on the server.
   * </pre>
   *
   * <code>.nakama.realtime.Error error = 11 [json_name = "error"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.ErrorOrBuilder getErrorOrBuilder() {
    if (messageCase_ == 11) {
       return (com.heroiclabs.nakama.realtime.Error) message_;
    }
    return com.heroiclabs.nakama.realtime.Error.getDefaultInstance();
  }

  public static final int MATCH_FIELD_NUMBER = 12;
  /**
   * <pre>
   * Incoming information about a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.Match match = 12 [json_name = "match"];</code>
   * @return Whether the match field is set.
   */
  @java.lang.Override
  public boolean hasMatch() {
    return messageCase_ == 12;
  }
  /**
   * <pre>
   * Incoming information about a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.Match match = 12 [json_name = "match"];</code>
   * @return The match.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.Match getMatch() {
    if (messageCase_ == 12) {
       return (com.heroiclabs.nakama.realtime.Match) message_;
    }
    return com.heroiclabs.nakama.realtime.Match.getDefaultInstance();
  }
  /**
   * <pre>
   * Incoming information about a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.Match match = 12 [json_name = "match"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.MatchOrBuilder getMatchOrBuilder() {
    if (messageCase_ == 12) {
       return (com.heroiclabs.nakama.realtime.Match) message_;
    }
    return com.heroiclabs.nakama.realtime.Match.getDefaultInstance();
  }

  public static final int MATCH_CREATE_FIELD_NUMBER = 13;
  /**
   * <pre>
   * A client to server request to create a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchCreate match_create = 13 [json_name = "matchCreate"];</code>
   * @return Whether the matchCreate field is set.
   */
  @java.lang.Override
  public boolean hasMatchCreate() {
    return messageCase_ == 13;
  }
  /**
   * <pre>
   * A client to server request to create a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchCreate match_create = 13 [json_name = "matchCreate"];</code>
   * @return The matchCreate.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.MatchCreate getMatchCreate() {
    if (messageCase_ == 13) {
       return (com.heroiclabs.nakama.realtime.MatchCreate) message_;
    }
    return com.heroiclabs.nakama.realtime.MatchCreate.getDefaultInstance();
  }
  /**
   * <pre>
   * A client to server request to create a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchCreate match_create = 13 [json_name = "matchCreate"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.MatchCreateOrBuilder getMatchCreateOrBuilder() {
    if (messageCase_ == 13) {
       return (com.heroiclabs.nakama.realtime.MatchCreate) message_;
    }
    return com.heroiclabs.nakama.realtime.MatchCreate.getDefaultInstance();
  }

  public static final int MATCH_DATA_FIELD_NUMBER = 14;
  /**
   * <pre>
   * Incoming realtime match data delivered from the server.
   * </pre>
   *
   * <code>.nakama.realtime.MatchData match_data = 14 [json_name = "matchData"];</code>
   * @return Whether the matchData field is set.
   */
  @java.lang.Override
  public boolean hasMatchData() {
    return messageCase_ == 14;
  }
  /**
   * <pre>
   * Incoming realtime match data delivered from the server.
   * </pre>
   *
   * <code>.nakama.realtime.MatchData match_data = 14 [json_name = "matchData"];</code>
   * @return The matchData.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.MatchData getMatchData() {
    if (messageCase_ == 14) {
       return (com.heroiclabs.nakama.realtime.MatchData) message_;
    }
    return com.heroiclabs.nakama.realtime.MatchData.getDefaultInstance();
  }
  /**
   * <pre>
   * Incoming realtime match data delivered from the server.
   * </pre>
   *
   * <code>.nakama.realtime.MatchData match_data = 14 [json_name = "matchData"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.MatchDataOrBuilder getMatchDataOrBuilder() {
    if (messageCase_ == 14) {
       return (com.heroiclabs.nakama.realtime.MatchData) message_;
    }
    return com.heroiclabs.nakama.realtime.MatchData.getDefaultInstance();
  }

  public static final int MATCH_DATA_SEND_FIELD_NUMBER = 15;
  /**
   * <pre>
   * A client to server request to send data to a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchDataSend match_data_send = 15 [json_name = "matchDataSend"];</code>
   * @return Whether the matchDataSend field is set.
   */
  @java.lang.Override
  public boolean hasMatchDataSend() {
    return messageCase_ == 15;
  }
  /**
   * <pre>
   * A client to server request to send data to a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchDataSend match_data_send = 15 [json_name = "matchDataSend"];</code>
   * @return The matchDataSend.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.MatchDataSend getMatchDataSend() {
    if (messageCase_ == 15) {
       return (com.heroiclabs.nakama.realtime.MatchDataSend) message_;
    }
    return com.heroiclabs.nakama.realtime.MatchDataSend.getDefaultInstance();
  }
  /**
   * <pre>
   * A client to server request to send data to a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchDataSend match_data_send = 15 [json_name = "matchDataSend"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.MatchDataSendOrBuilder getMatchDataSendOrBuilder() {
    if (messageCase_ == 15) {
       return (com.heroiclabs.nakama.realtime.MatchDataSend) message_;
    }
    return com.heroiclabs.nakama.realtime.MatchDataSend.getDefaultInstance();
  }

  public static final int MATCH_JOIN_FIELD_NUMBER = 16;
  /**
   * <pre>
   * A client to server request to join a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchJoin match_join = 16 [json_name = "matchJoin"];</code>
   * @return Whether the matchJoin field is set.
   */
  @java.lang.Override
  public boolean hasMatchJoin() {
    return messageCase_ == 16;
  }
  /**
   * <pre>
   * A client to server request to join a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchJoin match_join = 16 [json_name = "matchJoin"];</code>
   * @return The matchJoin.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.MatchJoin getMatchJoin() {
    if (messageCase_ == 16) {
       return (com.heroiclabs.nakama.realtime.MatchJoin) message_;
    }
    return com.heroiclabs.nakama.realtime.MatchJoin.getDefaultInstance();
  }
  /**
   * <pre>
   * A client to server request to join a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchJoin match_join = 16 [json_name = "matchJoin"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.MatchJoinOrBuilder getMatchJoinOrBuilder() {
    if (messageCase_ == 16) {
       return (com.heroiclabs.nakama.realtime.MatchJoin) message_;
    }
    return com.heroiclabs.nakama.realtime.MatchJoin.getDefaultInstance();
  }

  public static final int MATCH_LEAVE_FIELD_NUMBER = 17;
  /**
   * <pre>
   * A client to server request to leave a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchLeave match_leave = 17 [json_name = "matchLeave"];</code>
   * @return Whether the matchLeave field is set.
   */
  @java.lang.Override
  public boolean hasMatchLeave() {
    return messageCase_ == 17;
  }
  /**
   * <pre>
   * A client to server request to leave a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchLeave match_leave = 17 [json_name = "matchLeave"];</code>
   * @return The matchLeave.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.MatchLeave getMatchLeave() {
    if (messageCase_ == 17) {
       return (com.heroiclabs.nakama.realtime.MatchLeave) message_;
    }
    return com.heroiclabs.nakama.realtime.MatchLeave.getDefaultInstance();
  }
  /**
   * <pre>
   * A client to server request to leave a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchLeave match_leave = 17 [json_name = "matchLeave"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.MatchLeaveOrBuilder getMatchLeaveOrBuilder() {
    if (messageCase_ == 17) {
       return (com.heroiclabs.nakama.realtime.MatchLeave) message_;
    }
    return com.heroiclabs.nakama.realtime.MatchLeave.getDefaultInstance();
  }

  public static final int MATCH_PRESENCE_EVENT_FIELD_NUMBER = 18;
  /**
   * <pre>
   * Presence update for a particular realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchPresenceEvent match_presence_event = 18 [json_name = "matchPresenceEvent"];</code>
   * @return Whether the matchPresenceEvent field is set.
   */
  @java.lang.Override
  public boolean hasMatchPresenceEvent() {
    return messageCase_ == 18;
  }
  /**
   * <pre>
   * Presence update for a particular realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchPresenceEvent match_presence_event = 18 [json_name = "matchPresenceEvent"];</code>
   * @return The matchPresenceEvent.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.MatchPresenceEvent getMatchPresenceEvent() {
    if (messageCase_ == 18) {
       return (com.heroiclabs.nakama.realtime.MatchPresenceEvent) message_;
    }
    return com.heroiclabs.nakama.realtime.MatchPresenceEvent.getDefaultInstance();
  }
  /**
   * <pre>
   * Presence update for a particular realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchPresenceEvent match_presence_event = 18 [json_name = "matchPresenceEvent"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.MatchPresenceEventOrBuilder getMatchPresenceEventOrBuilder() {
    if (messageCase_ == 18) {
       return (com.heroiclabs.nakama.realtime.MatchPresenceEvent) message_;
    }
    return com.heroiclabs.nakama.realtime.MatchPresenceEvent.getDefaultInstance();
  }

  public static final int MATCHMAKER_ADD_FIELD_NUMBER = 19;
  /**
   * <pre>
   * Submit a new matchmaking process request.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerAdd matchmaker_add = 19 [json_name = "matchmakerAdd"];</code>
   * @return Whether the matchmakerAdd field is set.
   */
  @java.lang.Override
  public boolean hasMatchmakerAdd() {
    return messageCase_ == 19;
  }
  /**
   * <pre>
   * Submit a new matchmaking process request.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerAdd matchmaker_add = 19 [json_name = "matchmakerAdd"];</code>
   * @return The matchmakerAdd.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.MatchmakerAdd getMatchmakerAdd() {
    if (messageCase_ == 19) {
       return (com.heroiclabs.nakama.realtime.MatchmakerAdd) message_;
    }
    return com.heroiclabs.nakama.realtime.MatchmakerAdd.getDefaultInstance();
  }
  /**
   * <pre>
   * Submit a new matchmaking process request.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerAdd matchmaker_add = 19 [json_name = "matchmakerAdd"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.MatchmakerAddOrBuilder getMatchmakerAddOrBuilder() {
    if (messageCase_ == 19) {
       return (com.heroiclabs.nakama.realtime.MatchmakerAdd) message_;
    }
    return com.heroiclabs.nakama.realtime.MatchmakerAdd.getDefaultInstance();
  }

  public static final int MATCHMAKER_MATCHED_FIELD_NUMBER = 20;
  /**
   * <pre>
   * A successful matchmaking result.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerMatched matchmaker_matched = 20 [json_name = "matchmakerMatched"];</code>
   * @return Whether the matchmakerMatched field is set.
   */
  @java.lang.Override
  public boolean hasMatchmakerMatched() {
    return messageCase_ == 20;
  }
  /**
   * <pre>
   * A successful matchmaking result.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerMatched matchmaker_matched = 20 [json_name = "matchmakerMatched"];</code>
   * @return The matchmakerMatched.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.MatchmakerMatched getMatchmakerMatched() {
    if (messageCase_ == 20) {
       return (com.heroiclabs.nakama.realtime.MatchmakerMatched) message_;
    }
    return com.heroiclabs.nakama.realtime.MatchmakerMatched.getDefaultInstance();
  }
  /**
   * <pre>
   * A successful matchmaking result.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerMatched matchmaker_matched = 20 [json_name = "matchmakerMatched"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.MatchmakerMatchedOrBuilder getMatchmakerMatchedOrBuilder() {
    if (messageCase_ == 20) {
       return (com.heroiclabs.nakama.realtime.MatchmakerMatched) message_;
    }
    return com.heroiclabs.nakama.realtime.MatchmakerMatched.getDefaultInstance();
  }

  public static final int MATCHMAKER_REMOVE_FIELD_NUMBER = 21;
  /**
   * <pre>
   * Cancel a matchmaking process using a ticket.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerRemove matchmaker_remove = 21 [json_name = "matchmakerRemove"];</code>
   * @return Whether the matchmakerRemove field is set.
   */
  @java.lang.Override
  public boolean hasMatchmakerRemove() {
    return messageCase_ == 21;
  }
  /**
   * <pre>
   * Cancel a matchmaking process using a ticket.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerRemove matchmaker_remove = 21 [json_name = "matchmakerRemove"];</code>
   * @return The matchmakerRemove.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.MatchmakerRemove getMatchmakerRemove() {
    if (messageCase_ == 21) {
       return (com.heroiclabs.nakama.realtime.MatchmakerRemove) message_;
    }
    return com.heroiclabs.nakama.realtime.MatchmakerRemove.getDefaultInstance();
  }
  /**
   * <pre>
   * Cancel a matchmaking process using a ticket.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerRemove matchmaker_remove = 21 [json_name = "matchmakerRemove"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.MatchmakerRemoveOrBuilder getMatchmakerRemoveOrBuilder() {
    if (messageCase_ == 21) {
       return (com.heroiclabs.nakama.realtime.MatchmakerRemove) message_;
    }
    return com.heroiclabs.nakama.realtime.MatchmakerRemove.getDefaultInstance();
  }

  public static final int MATCHMAKER_TICKET_FIELD_NUMBER = 22;
  /**
   * <pre>
   * A response from starting a new matchmaking process.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerTicket matchmaker_ticket = 22 [json_name = "matchmakerTicket"];</code>
   * @return Whether the matchmakerTicket field is set.
   */
  @java.lang.Override
  public boolean hasMatchmakerTicket() {
    return messageCase_ == 22;
  }
  /**
   * <pre>
   * A response from starting a new matchmaking process.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerTicket matchmaker_ticket = 22 [json_name = "matchmakerTicket"];</code>
   * @return The matchmakerTicket.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.MatchmakerTicket getMatchmakerTicket() {
    if (messageCase_ == 22) {
       return (com.heroiclabs.nakama.realtime.MatchmakerTicket) message_;
    }
    return com.heroiclabs.nakama.realtime.MatchmakerTicket.getDefaultInstance();
  }
  /**
   * <pre>
   * A response from starting a new matchmaking process.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerTicket matchmaker_ticket = 22 [json_name = "matchmakerTicket"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.MatchmakerTicketOrBuilder getMatchmakerTicketOrBuilder() {
    if (messageCase_ == 22) {
       return (com.heroiclabs.nakama.realtime.MatchmakerTicket) message_;
    }
    return com.heroiclabs.nakama.realtime.MatchmakerTicket.getDefaultInstance();
  }

  public static final int NOTIFICATIONS_FIELD_NUMBER = 23;
  /**
   * <pre>
   * Notifications send by the server.
   * </pre>
   *
   * <code>.nakama.realtime.Notifications notifications = 23 [json_name = "notifications"];</code>
   * @return Whether the notifications field is set.
   */
  @java.lang.Override
  public boolean hasNotifications() {
    return messageCase_ == 23;
  }
  /**
   * <pre>
   * Notifications send by the server.
   * </pre>
   *
   * <code>.nakama.realtime.Notifications notifications = 23 [json_name = "notifications"];</code>
   * @return The notifications.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.Notifications getNotifications() {
    if (messageCase_ == 23) {
       return (com.heroiclabs.nakama.realtime.Notifications) message_;
    }
    return com.heroiclabs.nakama.realtime.Notifications.getDefaultInstance();
  }
  /**
   * <pre>
   * Notifications send by the server.
   * </pre>
   *
   * <code>.nakama.realtime.Notifications notifications = 23 [json_name = "notifications"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.NotificationsOrBuilder getNotificationsOrBuilder() {
    if (messageCase_ == 23) {
       return (com.heroiclabs.nakama.realtime.Notifications) message_;
    }
    return com.heroiclabs.nakama.realtime.Notifications.getDefaultInstance();
  }

  public static final int RPC_FIELD_NUMBER = 24;
  /**
   * <pre>
   * RPC call or response.
   * </pre>
   *
   * <code>.nakama.api.Rpc rpc = 24 [json_name = "rpc"];</code>
   * @return Whether the rpc field is set.
   */
  @java.lang.Override
  public boolean hasRpc() {
    return messageCase_ == 24;
  }
  /**
   * <pre>
   * RPC call or response.
   * </pre>
   *
   * <code>.nakama.api.Rpc rpc = 24 [json_name = "rpc"];</code>
   * @return The rpc.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.api.Rpc getRpc() {
    if (messageCase_ == 24) {
       return (com.heroiclabs.nakama.api.Rpc) message_;
    }
    return com.heroiclabs.nakama.api.Rpc.getDefaultInstance();
  }
  /**
   * <pre>
   * RPC call or response.
   * </pre>
   *
   * <code>.nakama.api.Rpc rpc = 24 [json_name = "rpc"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.api.RpcOrBuilder getRpcOrBuilder() {
    if (messageCase_ == 24) {
       return (com.heroiclabs.nakama.api.Rpc) message_;
    }
    return com.heroiclabs.nakama.api.Rpc.getDefaultInstance();
  }

  public static final int STATUS_FIELD_NUMBER = 25;
  /**
   * <pre>
   * An incoming status snapshot for some set of users.
   * </pre>
   *
   * <code>.nakama.realtime.Status status = 25 [json_name = "status"];</code>
   * @return Whether the status field is set.
   */
  @java.lang.Override
  public boolean hasStatus() {
    return messageCase_ == 25;
  }
  /**
   * <pre>
   * An incoming status snapshot for some set of users.
   * </pre>
   *
   * <code>.nakama.realtime.Status status = 25 [json_name = "status"];</code>
   * @return The status.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.Status getStatus() {
    if (messageCase_ == 25) {
       return (com.heroiclabs.nakama.realtime.Status) message_;
    }
    return com.heroiclabs.nakama.realtime.Status.getDefaultInstance();
  }
  /**
   * <pre>
   * An incoming status snapshot for some set of users.
   * </pre>
   *
   * <code>.nakama.realtime.Status status = 25 [json_name = "status"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.StatusOrBuilder getStatusOrBuilder() {
    if (messageCase_ == 25) {
       return (com.heroiclabs.nakama.realtime.Status) message_;
    }
    return com.heroiclabs.nakama.realtime.Status.getDefaultInstance();
  }

  public static final int STATUS_FOLLOW_FIELD_NUMBER = 26;
  /**
   * <pre>
   * Start following some set of users to receive their status updates.
   * </pre>
   *
   * <code>.nakama.realtime.StatusFollow status_follow = 26 [json_name = "statusFollow"];</code>
   * @return Whether the statusFollow field is set.
   */
  @java.lang.Override
  public boolean hasStatusFollow() {
    return messageCase_ == 26;
  }
  /**
   * <pre>
   * Start following some set of users to receive their status updates.
   * </pre>
   *
   * <code>.nakama.realtime.StatusFollow status_follow = 26 [json_name = "statusFollow"];</code>
   * @return The statusFollow.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.StatusFollow getStatusFollow() {
    if (messageCase_ == 26) {
       return (com.heroiclabs.nakama.realtime.StatusFollow) message_;
    }
    return com.heroiclabs.nakama.realtime.StatusFollow.getDefaultInstance();
  }
  /**
   * <pre>
   * Start following some set of users to receive their status updates.
   * </pre>
   *
   * <code>.nakama.realtime.StatusFollow status_follow = 26 [json_name = "statusFollow"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.StatusFollowOrBuilder getStatusFollowOrBuilder() {
    if (messageCase_ == 26) {
       return (com.heroiclabs.nakama.realtime.StatusFollow) message_;
    }
    return com.heroiclabs.nakama.realtime.StatusFollow.getDefaultInstance();
  }

  public static final int STATUS_PRESENCE_EVENT_FIELD_NUMBER = 27;
  /**
   * <pre>
   * An incoming status update.
   * </pre>
   *
   * <code>.nakama.realtime.StatusPresenceEvent status_presence_event = 27 [json_name = "statusPresenceEvent"];</code>
   * @return Whether the statusPresenceEvent field is set.
   */
  @java.lang.Override
  public boolean hasStatusPresenceEvent() {
    return messageCase_ == 27;
  }
  /**
   * <pre>
   * An incoming status update.
   * </pre>
   *
   * <code>.nakama.realtime.StatusPresenceEvent status_presence_event = 27 [json_name = "statusPresenceEvent"];</code>
   * @return The statusPresenceEvent.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.StatusPresenceEvent getStatusPresenceEvent() {
    if (messageCase_ == 27) {
       return (com.heroiclabs.nakama.realtime.StatusPresenceEvent) message_;
    }
    return com.heroiclabs.nakama.realtime.StatusPresenceEvent.getDefaultInstance();
  }
  /**
   * <pre>
   * An incoming status update.
   * </pre>
   *
   * <code>.nakama.realtime.StatusPresenceEvent status_presence_event = 27 [json_name = "statusPresenceEvent"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.StatusPresenceEventOrBuilder getStatusPresenceEventOrBuilder() {
    if (messageCase_ == 27) {
       return (com.heroiclabs.nakama.realtime.StatusPresenceEvent) message_;
    }
    return com.heroiclabs.nakama.realtime.StatusPresenceEvent.getDefaultInstance();
  }

  public static final int STATUS_UNFOLLOW_FIELD_NUMBER = 28;
  /**
   * <pre>
   * Stop following some set of users to no longer receive their status updates.
   * </pre>
   *
   * <code>.nakama.realtime.StatusUnfollow status_unfollow = 28 [json_name = "statusUnfollow"];</code>
   * @return Whether the statusUnfollow field is set.
   */
  @java.lang.Override
  public boolean hasStatusUnfollow() {
    return messageCase_ == 28;
  }
  /**
   * <pre>
   * Stop following some set of users to no longer receive their status updates.
   * </pre>
   *
   * <code>.nakama.realtime.StatusUnfollow status_unfollow = 28 [json_name = "statusUnfollow"];</code>
   * @return The statusUnfollow.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.StatusUnfollow getStatusUnfollow() {
    if (messageCase_ == 28) {
       return (com.heroiclabs.nakama.realtime.StatusUnfollow) message_;
    }
    return com.heroiclabs.nakama.realtime.StatusUnfollow.getDefaultInstance();
  }
  /**
   * <pre>
   * Stop following some set of users to no longer receive their status updates.
   * </pre>
   *
   * <code>.nakama.realtime.StatusUnfollow status_unfollow = 28 [json_name = "statusUnfollow"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.StatusUnfollowOrBuilder getStatusUnfollowOrBuilder() {
    if (messageCase_ == 28) {
       return (com.heroiclabs.nakama.realtime.StatusUnfollow) message_;
    }
    return com.heroiclabs.nakama.realtime.StatusUnfollow.getDefaultInstance();
  }

  public static final int STATUS_UPDATE_FIELD_NUMBER = 29;
  /**
   * <pre>
   * Set the user's own status.
   * </pre>
   *
   * <code>.nakama.realtime.StatusUpdate status_update = 29 [json_name = "statusUpdate"];</code>
   * @return Whether the statusUpdate field is set.
   */
  @java.lang.Override
  public boolean hasStatusUpdate() {
    return messageCase_ == 29;
  }
  /**
   * <pre>
   * Set the user's own status.
   * </pre>
   *
   * <code>.nakama.realtime.StatusUpdate status_update = 29 [json_name = "statusUpdate"];</code>
   * @return The statusUpdate.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.StatusUpdate getStatusUpdate() {
    if (messageCase_ == 29) {
       return (com.heroiclabs.nakama.realtime.StatusUpdate) message_;
    }
    return com.heroiclabs.nakama.realtime.StatusUpdate.getDefaultInstance();
  }
  /**
   * <pre>
   * Set the user's own status.
   * </pre>
   *
   * <code>.nakama.realtime.StatusUpdate status_update = 29 [json_name = "statusUpdate"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.StatusUpdateOrBuilder getStatusUpdateOrBuilder() {
    if (messageCase_ == 29) {
       return (com.heroiclabs.nakama.realtime.StatusUpdate) message_;
    }
    return com.heroiclabs.nakama.realtime.StatusUpdate.getDefaultInstance();
  }

  public static final int STREAM_DATA_FIELD_NUMBER = 30;
  /**
   * <pre>
   * A data message delivered over a stream.
   * </pre>
   *
   * <code>.nakama.realtime.StreamData stream_data = 30 [json_name = "streamData"];</code>
   * @return Whether the streamData field is set.
   */
  @java.lang.Override
  public boolean hasStreamData() {
    return messageCase_ == 30;
  }
  /**
   * <pre>
   * A data message delivered over a stream.
   * </pre>
   *
   * <code>.nakama.realtime.StreamData stream_data = 30 [json_name = "streamData"];</code>
   * @return The streamData.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.StreamData getStreamData() {
    if (messageCase_ == 30) {
       return (com.heroiclabs.nakama.realtime.StreamData) message_;
    }
    return com.heroiclabs.nakama.realtime.StreamData.getDefaultInstance();
  }
  /**
   * <pre>
   * A data message delivered over a stream.
   * </pre>
   *
   * <code>.nakama.realtime.StreamData stream_data = 30 [json_name = "streamData"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.StreamDataOrBuilder getStreamDataOrBuilder() {
    if (messageCase_ == 30) {
       return (com.heroiclabs.nakama.realtime.StreamData) message_;
    }
    return com.heroiclabs.nakama.realtime.StreamData.getDefaultInstance();
  }

  public static final int STREAM_PRESENCE_EVENT_FIELD_NUMBER = 31;
  /**
   * <pre>
   * Presence update for a particular stream.
   * </pre>
   *
   * <code>.nakama.realtime.StreamPresenceEvent stream_presence_event = 31 [json_name = "streamPresenceEvent"];</code>
   * @return Whether the streamPresenceEvent field is set.
   */
  @java.lang.Override
  public boolean hasStreamPresenceEvent() {
    return messageCase_ == 31;
  }
  /**
   * <pre>
   * Presence update for a particular stream.
   * </pre>
   *
   * <code>.nakama.realtime.StreamPresenceEvent stream_presence_event = 31 [json_name = "streamPresenceEvent"];</code>
   * @return The streamPresenceEvent.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.StreamPresenceEvent getStreamPresenceEvent() {
    if (messageCase_ == 31) {
       return (com.heroiclabs.nakama.realtime.StreamPresenceEvent) message_;
    }
    return com.heroiclabs.nakama.realtime.StreamPresenceEvent.getDefaultInstance();
  }
  /**
   * <pre>
   * Presence update for a particular stream.
   * </pre>
   *
   * <code>.nakama.realtime.StreamPresenceEvent stream_presence_event = 31 [json_name = "streamPresenceEvent"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.StreamPresenceEventOrBuilder getStreamPresenceEventOrBuilder() {
    if (messageCase_ == 31) {
       return (com.heroiclabs.nakama.realtime.StreamPresenceEvent) message_;
    }
    return com.heroiclabs.nakama.realtime.StreamPresenceEvent.getDefaultInstance();
  }

  public static final int PING_FIELD_NUMBER = 32;
  /**
   * <pre>
   * Application-level heartbeat and connection check.
   * </pre>
   *
   * <code>.nakama.realtime.Ping ping = 32 [json_name = "ping"];</code>
   * @return Whether the ping field is set.
   */
  @java.lang.Override
  public boolean hasPing() {
    return messageCase_ == 32;
  }
  /**
   * <pre>
   * Application-level heartbeat and connection check.
   * </pre>
   *
   * <code>.nakama.realtime.Ping ping = 32 [json_name = "ping"];</code>
   * @return The ping.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.Ping getPing() {
    if (messageCase_ == 32) {
       return (com.heroiclabs.nakama.realtime.Ping) message_;
    }
    return com.heroiclabs.nakama.realtime.Ping.getDefaultInstance();
  }
  /**
   * <pre>
   * Application-level heartbeat and connection check.
   * </pre>
   *
   * <code>.nakama.realtime.Ping ping = 32 [json_name = "ping"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.PingOrBuilder getPingOrBuilder() {
    if (messageCase_ == 32) {
       return (com.heroiclabs.nakama.realtime.Ping) message_;
    }
    return com.heroiclabs.nakama.realtime.Ping.getDefaultInstance();
  }

  public static final int PONG_FIELD_NUMBER = 33;
  /**
   * <pre>
   * Application-level heartbeat and connection check response.
   * </pre>
   *
   * <code>.nakama.realtime.Pong pong = 33 [json_name = "pong"];</code>
   * @return Whether the pong field is set.
   */
  @java.lang.Override
  public boolean hasPong() {
    return messageCase_ == 33;
  }
  /**
   * <pre>
   * Application-level heartbeat and connection check response.
   * </pre>
   *
   * <code>.nakama.realtime.Pong pong = 33 [json_name = "pong"];</code>
   * @return The pong.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.Pong getPong() {
    if (messageCase_ == 33) {
       return (com.heroiclabs.nakama.realtime.Pong) message_;
    }
    return com.heroiclabs.nakama.realtime.Pong.getDefaultInstance();
  }
  /**
   * <pre>
   * Application-level heartbeat and connection check response.
   * </pre>
   *
   * <code>.nakama.realtime.Pong pong = 33 [json_name = "pong"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.realtime.PongOrBuilder getPongOrBuilder() {
    if (messageCase_ == 33) {
       return (com.heroiclabs.nakama.realtime.Pong) message_;
    }
    return com.heroiclabs.nakama.realtime.Pong.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessage.isStringEmpty(cid_)) {
      com.google.protobuf.GeneratedMessage.writeString(output, 1, cid_);
    }
    if (messageCase_ == 2) {
      output.writeMessage(2, (com.heroiclabs.nakama.realtime.Channel) message_);
    }
    if (messageCase_ == 3) {
      output.writeMessage(3, (com.heroiclabs.nakama.realtime.ChannelJoin) message_);
    }
    if (messageCase_ == 4) {
      output.writeMessage(4, (com.heroiclabs.nakama.realtime.ChannelLeave) message_);
    }
    if (messageCase_ == 5) {
      output.writeMessage(5, (com.heroiclabs.nakama.api.ChannelMessage) message_);
    }
    if (messageCase_ == 6) {
      output.writeMessage(6, (com.heroiclabs.nakama.realtime.ChannelMessageAck) message_);
    }
    if (messageCase_ == 7) {
      output.writeMessage(7, (com.heroiclabs.nakama.realtime.ChannelMessageSend) message_);
    }
    if (messageCase_ == 8) {
      output.writeMessage(8, (com.heroiclabs.nakama.realtime.ChannelMessageUpdate) message_);
    }
    if (messageCase_ == 9) {
      output.writeMessage(9, (com.heroiclabs.nakama.realtime.ChannelMessageRemove) message_);
    }
    if (messageCase_ == 10) {
      output.writeMessage(10, (com.heroiclabs.nakama.realtime.ChannelPresenceEvent) message_);
    }
    if (messageCase_ == 11) {
      output.writeMessage(11, (com.heroiclabs.nakama.realtime.Error) message_);
    }
    if (messageCase_ == 12) {
      output.writeMessage(12, (com.heroiclabs.nakama.realtime.Match) message_);
    }
    if (messageCase_ == 13) {
      output.writeMessage(13, (com.heroiclabs.nakama.realtime.MatchCreate) message_);
    }
    if (messageCase_ == 14) {
      output.writeMessage(14, (com.heroiclabs.nakama.realtime.MatchData) message_);
    }
    if (messageCase_ == 15) {
      output.writeMessage(15, (com.heroiclabs.nakama.realtime.MatchDataSend) message_);
    }
    if (messageCase_ == 16) {
      output.writeMessage(16, (com.heroiclabs.nakama.realtime.MatchJoin) message_);
    }
    if (messageCase_ == 17) {
      output.writeMessage(17, (com.heroiclabs.nakama.realtime.MatchLeave) message_);
    }
    if (messageCase_ == 18) {
      output.writeMessage(18, (com.heroiclabs.nakama.realtime.MatchPresenceEvent) message_);
    }
    if (messageCase_ == 19) {
      output.writeMessage(19, (com.heroiclabs.nakama.realtime.MatchmakerAdd) message_);
    }
    if (messageCase_ == 20) {
      output.writeMessage(20, (com.heroiclabs.nakama.realtime.MatchmakerMatched) message_);
    }
    if (messageCase_ == 21) {
      output.writeMessage(21, (com.heroiclabs.nakama.realtime.MatchmakerRemove) message_);
    }
    if (messageCase_ == 22) {
      output.writeMessage(22, (com.heroiclabs.nakama.realtime.MatchmakerTicket) message_);
    }
    if (messageCase_ == 23) {
      output.writeMessage(23, (com.heroiclabs.nakama.realtime.Notifications) message_);
    }
    if (messageCase_ == 24) {
      output.writeMessage(24, (com.heroiclabs.nakama.api.Rpc) message_);
    }
    if (messageCase_ == 25) {
      output.writeMessage(25, (com.heroiclabs.nakama.realtime.Status) message_);
    }
    if (messageCase_ == 26) {
      output.writeMessage(26, (com.heroiclabs.nakama.realtime.StatusFollow) message_);
    }
    if (messageCase_ == 27) {
      output.writeMessage(27, (com.heroiclabs.nakama.realtime.StatusPresenceEvent) message_);
    }
    if (messageCase_ == 28) {
      output.writeMessage(28, (com.heroiclabs.nakama.realtime.StatusUnfollow) message_);
    }
    if (messageCase_ == 29) {
      output.writeMessage(29, (com.heroiclabs.nakama.realtime.StatusUpdate) message_);
    }
    if (messageCase_ == 30) {
      output.writeMessage(30, (com.heroiclabs.nakama.realtime.StreamData) message_);
    }
    if (messageCase_ == 31) {
      output.writeMessage(31, (com.heroiclabs.nakama.realtime.StreamPresenceEvent) message_);
    }
    if (messageCase_ == 32) {
      output.writeMessage(32, (com.heroiclabs.nakama.realtime.Ping) message_);
    }
    if (messageCase_ == 33) {
      output.writeMessage(33, (com.heroiclabs.nakama.realtime.Pong) message_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessage.isStringEmpty(cid_)) {
      size += com.google.protobuf.GeneratedMessage.computeStringSize(1, cid_);
    }
    if (messageCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (com.heroiclabs.nakama.realtime.Channel) message_);
    }
    if (messageCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (com.heroiclabs.nakama.realtime.ChannelJoin) message_);
    }
    if (messageCase_ == 4) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, (com.heroiclabs.nakama.realtime.ChannelLeave) message_);
    }
    if (messageCase_ == 5) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, (com.heroiclabs.nakama.api.ChannelMessage) message_);
    }
    if (messageCase_ == 6) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, (com.heroiclabs.nakama.realtime.ChannelMessageAck) message_);
    }
    if (messageCase_ == 7) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, (com.heroiclabs.nakama.realtime.ChannelMessageSend) message_);
    }
    if (messageCase_ == 8) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, (com.heroiclabs.nakama.realtime.ChannelMessageUpdate) message_);
    }
    if (messageCase_ == 9) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, (com.heroiclabs.nakama.realtime.ChannelMessageRemove) message_);
    }
    if (messageCase_ == 10) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, (com.heroiclabs.nakama.realtime.ChannelPresenceEvent) message_);
    }
    if (messageCase_ == 11) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, (com.heroiclabs.nakama.realtime.Error) message_);
    }
    if (messageCase_ == 12) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(12, (com.heroiclabs.nakama.realtime.Match) message_);
    }
    if (messageCase_ == 13) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(13, (com.heroiclabs.nakama.realtime.MatchCreate) message_);
    }
    if (messageCase_ == 14) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(14, (com.heroiclabs.nakama.realtime.MatchData) message_);
    }
    if (messageCase_ == 15) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(15, (com.heroiclabs.nakama.realtime.MatchDataSend) message_);
    }
    if (messageCase_ == 16) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(16, (com.heroiclabs.nakama.realtime.MatchJoin) message_);
    }
    if (messageCase_ == 17) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(17, (com.heroiclabs.nakama.realtime.MatchLeave) message_);
    }
    if (messageCase_ == 18) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(18, (com.heroiclabs.nakama.realtime.MatchPresenceEvent) message_);
    }
    if (messageCase_ == 19) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(19, (com.heroiclabs.nakama.realtime.MatchmakerAdd) message_);
    }
    if (messageCase_ == 20) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(20, (com.heroiclabs.nakama.realtime.MatchmakerMatched) message_);
    }
    if (messageCase_ == 21) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(21, (com.heroiclabs.nakama.realtime.MatchmakerRemove) message_);
    }
    if (messageCase_ == 22) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(22, (com.heroiclabs.nakama.realtime.MatchmakerTicket) message_);
    }
    if (messageCase_ == 23) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(23, (com.heroiclabs.nakama.realtime.Notifications) message_);
    }
    if (messageCase_ == 24) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(24, (com.heroiclabs.nakama.api.Rpc) message_);
    }
    if (messageCase_ == 25) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(25, (com.heroiclabs.nakama.realtime.Status) message_);
    }
    if (messageCase_ == 26) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(26, (com.heroiclabs.nakama.realtime.StatusFollow) message_);
    }
    if (messageCase_ == 27) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(27, (com.heroiclabs.nakama.realtime.StatusPresenceEvent) message_);
    }
    if (messageCase_ == 28) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(28, (com.heroiclabs.nakama.realtime.StatusUnfollow) message_);
    }
    if (messageCase_ == 29) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(29, (com.heroiclabs.nakama.realtime.StatusUpdate) message_);
    }
    if (messageCase_ == 30) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(30, (com.heroiclabs.nakama.realtime.StreamData) message_);
    }
    if (messageCase_ == 31) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(31, (com.heroiclabs.nakama.realtime.StreamPresenceEvent) message_);
    }
    if (messageCase_ == 32) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(32, (com.heroiclabs.nakama.realtime.Ping) message_);
    }
    if (messageCase_ == 33) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(33, (com.heroiclabs.nakama.realtime.Pong) message_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.heroiclabs.nakama.realtime.Envelope)) {
      return super.equals(obj);
    }
    com.heroiclabs.nakama.realtime.Envelope other = (com.heroiclabs.nakama.realtime.Envelope) obj;

    if (!getCid()
        .equals(other.getCid())) return false;
    if (!getMessageCase().equals(other.getMessageCase())) return false;
    switch (messageCase_) {
      case 2:
        if (!getChannel()
            .equals(other.getChannel())) return false;
        break;
      case 3:
        if (!getChannelJoin()
            .equals(other.getChannelJoin())) return false;
        break;
      case 4:
        if (!getChannelLeave()
            .equals(other.getChannelLeave())) return false;
        break;
      case 5:
        if (!getChannelMessage()
            .equals(other.getChannelMessage())) return false;
        break;
      case 6:
        if (!getChannelMessageAck()
            .equals(other.getChannelMessageAck())) return false;
        break;
      case 7:
        if (!getChannelMessageSend()
            .equals(other.getChannelMessageSend())) return false;
        break;
      case 8:
        if (!getChannelMessageUpdate()
            .equals(other.getChannelMessageUpdate())) return false;
        break;
      case 9:
        if (!getChannelMessageRemove()
            .equals(other.getChannelMessageRemove())) return false;
        break;
      case 10:
        if (!getChannelPresenceEvent()
            .equals(other.getChannelPresenceEvent())) return false;
        break;
      case 11:
        if (!getError()
            .equals(other.getError())) return false;
        break;
      case 12:
        if (!getMatch()
            .equals(other.getMatch())) return false;
        break;
      case 13:
        if (!getMatchCreate()
            .equals(other.getMatchCreate())) return false;
        break;
      case 14:
        if (!getMatchData()
            .equals(other.getMatchData())) return false;
        break;
      case 15:
        if (!getMatchDataSend()
            .equals(other.getMatchDataSend())) return false;
        break;
      case 16:
        if (!getMatchJoin()
            .equals(other.getMatchJoin())) return false;
        break;
      case 17:
        if (!getMatchLeave()
            .equals(other.getMatchLeave())) return false;
        break;
      case 18:
        if (!getMatchPresenceEvent()
            .equals(other.getMatchPresenceEvent())) return false;
        break;
      case 19:
        if (!getMatchmakerAdd()
            .equals(other.getMatchmakerAdd())) return false;
        break;
      case 20:
        if (!getMatchmakerMatched()
            .equals(other.getMatchmakerMatched())) return false;
        break;
      case 21:
        if (!getMatchmakerRemove()
            .equals(other.getMatchmakerRemove())) return false;
        break;
      case 22:
        if (!getMatchmakerTicket()
            .equals(other.getMatchmakerTicket())) return false;
        break;
      case 23:
        if (!getNotifications()
            .equals(other.getNotifications())) return false;
        break;
      case 24:
        if (!getRpc()
            .equals(other.getRpc())) return false;
        break;
      case 25:
        if (!getStatus()
            .equals(other.getStatus())) return false;
        break;
      case 26:
        if (!getStatusFollow()
            .equals(other.getStatusFollow())) return false;
        break;
      case 27:
        if (!getStatusPresenceEvent()
            .equals(other.getStatusPresenceEvent())) return false;
        break;
      case 28:
        if (!getStatusUnfollow()
            .equals(other.getStatusUnfollow())) return false;
        break;
      case 29:
        if (!getStatusUpdate()
            .equals(other.getStatusUpdate())) return false;
        break;
      case 30:
        if (!getStreamData()
            .equals(other.getStreamData())) return false;
        break;
      case 31:
        if (!getStreamPresenceEvent()
            .equals(other.getStreamPresenceEvent())) return false;
        break;
      case 32:
        if (!getPing()
            .equals(other.getPing())) return false;
        break;
      case 33:
        if (!getPong()
            .equals(other.getPong())) return false;
        break;
      case 0:
      default:
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + CID_FIELD_NUMBER;
    hash = (53 * hash) + getCid().hashCode();
    switch (messageCase_) {
      case 2:
        hash = (37 * hash) + CHANNEL_FIELD_NUMBER;
        hash = (53 * hash) + getChannel().hashCode();
        break;
      case 3:
        hash = (37 * hash) + CHANNEL_JOIN_FIELD_NUMBER;
        hash = (53 * hash) + getChannelJoin().hashCode();
        break;
      case 4:
        hash = (37 * hash) + CHANNEL_LEAVE_FIELD_NUMBER;
        hash = (53 * hash) + getChannelLeave().hashCode();
        break;
      case 5:
        hash = (37 * hash) + CHANNEL_MESSAGE_FIELD_NUMBER;
        hash = (53 * hash) + getChannelMessage().hashCode();
        break;
      case 6:
        hash = (37 * hash) + CHANNEL_MESSAGE_ACK_FIELD_NUMBER;
        hash = (53 * hash) + getChannelMessageAck().hashCode();
        break;
      case 7:
        hash = (37 * hash) + CHANNEL_MESSAGE_SEND_FIELD_NUMBER;
        hash = (53 * hash) + getChannelMessageSend().hashCode();
        break;
      case 8:
        hash = (37 * hash) + CHANNEL_MESSAGE_UPDATE_FIELD_NUMBER;
        hash = (53 * hash) + getChannelMessageUpdate().hashCode();
        break;
      case 9:
        hash = (37 * hash) + CHANNEL_MESSAGE_REMOVE_FIELD_NUMBER;
        hash = (53 * hash) + getChannelMessageRemove().hashCode();
        break;
      case 10:
        hash = (37 * hash) + CHANNEL_PRESENCE_EVENT_FIELD_NUMBER;
        hash = (53 * hash) + getChannelPresenceEvent().hashCode();
        break;
      case 11:
        hash = (37 * hash) + ERROR_FIELD_NUMBER;
        hash = (53 * hash) + getError().hashCode();
        break;
      case 12:
        hash = (37 * hash) + MATCH_FIELD_NUMBER;
        hash = (53 * hash) + getMatch().hashCode();
        break;
      case 13:
        hash = (37 * hash) + MATCH_CREATE_FIELD_NUMBER;
        hash = (53 * hash) + getMatchCreate().hashCode();
        break;
      case 14:
        hash = (37 * hash) + MATCH_DATA_FIELD_NUMBER;
        hash = (53 * hash) + getMatchData().hashCode();
        break;
      case 15:
        hash = (37 * hash) + MATCH_DATA_SEND_FIELD_NUMBER;
        hash = (53 * hash) + getMatchDataSend().hashCode();
        break;
      case 16:
        hash = (37 * hash) + MATCH_JOIN_FIELD_NUMBER;
        hash = (53 * hash) + getMatchJoin().hashCode();
        break;
      case 17:
        hash = (37 * hash) + MATCH_LEAVE_FIELD_NUMBER;
        hash = (53 * hash) + getMatchLeave().hashCode();
        break;
      case 18:
        hash = (37 * hash) + MATCH_PRESENCE_EVENT_FIELD_NUMBER;
        hash = (53 * hash) + getMatchPresenceEvent().hashCode();
        break;
      case 19:
        hash = (37 * hash) + MATCHMAKER_ADD_FIELD_NUMBER;
        hash = (53 * hash) + getMatchmakerAdd().hashCode();
        break;
      case 20:
        hash = (37 * hash) + MATCHMAKER_MATCHED_FIELD_NUMBER;
        hash = (53 * hash) + getMatchmakerMatched().hashCode();
        break;
      case 21:
        hash = (37 * hash) + MATCHMAKER_REMOVE_FIELD_NUMBER;
        hash = (53 * hash) + getMatchmakerRemove().hashCode();
        break;
      case 22:
        hash = (37 * hash) + MATCHMAKER_TICKET_FIELD_NUMBER;
        hash = (53 * hash) + getMatchmakerTicket().hashCode();
        break;
      case 23:
        hash = (37 * hash) + NOTIFICATIONS_FIELD_NUMBER;
        hash = (53 * hash) + getNotifications().hashCode();
        break;
      case 24:
        hash = (37 * hash) + RPC_FIELD_NUMBER;
        hash = (53 * hash) + getRpc().hashCode();
        break;
      case 25:
        hash = (37 * hash) + STATUS_FIELD_NUMBER;
        hash = (53 * hash) + getStatus().hashCode();
        break;
      case 26:
        hash = (37 * hash) + STATUS_FOLLOW_FIELD_NUMBER;
        hash = (53 * hash) + getStatusFollow().hashCode();
        break;
      case 27:
        hash = (37 * hash) + STATUS_PRESENCE_EVENT_FIELD_NUMBER;
        hash = (53 * hash) + getStatusPresenceEvent().hashCode();
        break;
      case 28:
        hash = (37 * hash) + STATUS_UNFOLLOW_FIELD_NUMBER;
        hash = (53 * hash) + getStatusUnfollow().hashCode();
        break;
      case 29:
        hash = (37 * hash) + STATUS_UPDATE_FIELD_NUMBER;
        hash = (53 * hash) + getStatusUpdate().hashCode();
        break;
      case 30:
        hash = (37 * hash) + STREAM_DATA_FIELD_NUMBER;
        hash = (53 * hash) + getStreamData().hashCode();
        break;
      case 31:
        hash = (37 * hash) + STREAM_PRESENCE_EVENT_FIELD_NUMBER;
        hash = (53 * hash) + getStreamPresenceEvent().hashCode();
        break;
      case 32:
        hash = (37 * hash) + PING_FIELD_NUMBER;
        hash = (53 * hash) + getPing().hashCode();
        break;
      case 33:
        hash = (37 * hash) + PONG_FIELD_NUMBER;
        hash = (53 * hash) + getPong().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.heroiclabs.nakama.realtime.Envelope parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.heroiclabs.nakama.realtime.Envelope parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.heroiclabs.nakama.realtime.Envelope parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.heroiclabs.nakama.realtime.Envelope parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.heroiclabs.nakama.realtime.Envelope parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.heroiclabs.nakama.realtime.Envelope parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.heroiclabs.nakama.realtime.Envelope parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static com.heroiclabs.nakama.realtime.Envelope parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.heroiclabs.nakama.realtime.Envelope parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.heroiclabs.nakama.realtime.Envelope parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.heroiclabs.nakama.realtime.Envelope parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static com.heroiclabs.nakama.realtime.Envelope parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.heroiclabs.nakama.realtime.Envelope prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * An envelope for a realtime message.
   * </pre>
   *
   * Protobuf type {@code nakama.realtime.Envelope}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:nakama.realtime.Envelope)
      com.heroiclabs.nakama.realtime.EnvelopeOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.heroiclabs.nakama.realtime.RealtimeProto.internal_static_nakama_realtime_Envelope_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.heroiclabs.nakama.realtime.RealtimeProto.internal_static_nakama_realtime_Envelope_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.heroiclabs.nakama.realtime.Envelope.class, com.heroiclabs.nakama.realtime.Envelope.Builder.class);
    }

    // Construct using com.heroiclabs.nakama.realtime.Envelope.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      bitField1_ = 0;
      cid_ = "";
      if (channelBuilder_ != null) {
        channelBuilder_.clear();
      }
      if (channelJoinBuilder_ != null) {
        channelJoinBuilder_.clear();
      }
      if (channelLeaveBuilder_ != null) {
        channelLeaveBuilder_.clear();
      }
      if (channelMessageBuilder_ != null) {
        channelMessageBuilder_.clear();
      }
      if (channelMessageAckBuilder_ != null) {
        channelMessageAckBuilder_.clear();
      }
      if (channelMessageSendBuilder_ != null) {
        channelMessageSendBuilder_.clear();
      }
      if (channelMessageUpdateBuilder_ != null) {
        channelMessageUpdateBuilder_.clear();
      }
      if (channelMessageRemoveBuilder_ != null) {
        channelMessageRemoveBuilder_.clear();
      }
      if (channelPresenceEventBuilder_ != null) {
        channelPresenceEventBuilder_.clear();
      }
      if (errorBuilder_ != null) {
        errorBuilder_.clear();
      }
      if (matchBuilder_ != null) {
        matchBuilder_.clear();
      }
      if (matchCreateBuilder_ != null) {
        matchCreateBuilder_.clear();
      }
      if (matchDataBuilder_ != null) {
        matchDataBuilder_.clear();
      }
      if (matchDataSendBuilder_ != null) {
        matchDataSendBuilder_.clear();
      }
      if (matchJoinBuilder_ != null) {
        matchJoinBuilder_.clear();
      }
      if (matchLeaveBuilder_ != null) {
        matchLeaveBuilder_.clear();
      }
      if (matchPresenceEventBuilder_ != null) {
        matchPresenceEventBuilder_.clear();
      }
      if (matchmakerAddBuilder_ != null) {
        matchmakerAddBuilder_.clear();
      }
      if (matchmakerMatchedBuilder_ != null) {
        matchmakerMatchedBuilder_.clear();
      }
      if (matchmakerRemoveBuilder_ != null) {
        matchmakerRemoveBuilder_.clear();
      }
      if (matchmakerTicketBuilder_ != null) {
        matchmakerTicketBuilder_.clear();
      }
      if (notificationsBuilder_ != null) {
        notificationsBuilder_.clear();
      }
      if (rpcBuilder_ != null) {
        rpcBuilder_.clear();
      }
      if (statusBuilder_ != null) {
        statusBuilder_.clear();
      }
      if (statusFollowBuilder_ != null) {
        statusFollowBuilder_.clear();
      }
      if (statusPresenceEventBuilder_ != null) {
        statusPresenceEventBuilder_.clear();
      }
      if (statusUnfollowBuilder_ != null) {
        statusUnfollowBuilder_.clear();
      }
      if (statusUpdateBuilder_ != null) {
        statusUpdateBuilder_.clear();
      }
      if (streamDataBuilder_ != null) {
        streamDataBuilder_.clear();
      }
      if (streamPresenceEventBuilder_ != null) {
        streamPresenceEventBuilder_.clear();
      }
      if (pingBuilder_ != null) {
        pingBuilder_.clear();
      }
      if (pongBuilder_ != null) {
        pongBuilder_.clear();
      }
      messageCase_ = 0;
      message_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.heroiclabs.nakama.realtime.RealtimeProto.internal_static_nakama_realtime_Envelope_descriptor;
    }

    @java.lang.Override
    public com.heroiclabs.nakama.realtime.Envelope getDefaultInstanceForType() {
      return com.heroiclabs.nakama.realtime.Envelope.getDefaultInstance();
    }

    @java.lang.Override
    public com.heroiclabs.nakama.realtime.Envelope build() {
      com.heroiclabs.nakama.realtime.Envelope result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.heroiclabs.nakama.realtime.Envelope buildPartial() {
      com.heroiclabs.nakama.realtime.Envelope result = new com.heroiclabs.nakama.realtime.Envelope(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      if (bitField1_ != 0) { buildPartial1(result); }
      buildPartialOneofs(result);
      onBuilt();
      return result;
    }

    private void buildPartial0(com.heroiclabs.nakama.realtime.Envelope result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.cid_ = cid_;
      }
    }

    private void buildPartial1(com.heroiclabs.nakama.realtime.Envelope result) {
      int from_bitField1_ = bitField1_;
    }

    private void buildPartialOneofs(com.heroiclabs.nakama.realtime.Envelope result) {
      result.messageCase_ = messageCase_;
      result.message_ = this.message_;
      if (messageCase_ == 2 &&
          channelBuilder_ != null) {
        result.message_ = channelBuilder_.build();
      }
      if (messageCase_ == 3 &&
          channelJoinBuilder_ != null) {
        result.message_ = channelJoinBuilder_.build();
      }
      if (messageCase_ == 4 &&
          channelLeaveBuilder_ != null) {
        result.message_ = channelLeaveBuilder_.build();
      }
      if (messageCase_ == 5 &&
          channelMessageBuilder_ != null) {
        result.message_ = channelMessageBuilder_.build();
      }
      if (messageCase_ == 6 &&
          channelMessageAckBuilder_ != null) {
        result.message_ = channelMessageAckBuilder_.build();
      }
      if (messageCase_ == 7 &&
          channelMessageSendBuilder_ != null) {
        result.message_ = channelMessageSendBuilder_.build();
      }
      if (messageCase_ == 8 &&
          channelMessageUpdateBuilder_ != null) {
        result.message_ = channelMessageUpdateBuilder_.build();
      }
      if (messageCase_ == 9 &&
          channelMessageRemoveBuilder_ != null) {
        result.message_ = channelMessageRemoveBuilder_.build();
      }
      if (messageCase_ == 10 &&
          channelPresenceEventBuilder_ != null) {
        result.message_ = channelPresenceEventBuilder_.build();
      }
      if (messageCase_ == 11 &&
          errorBuilder_ != null) {
        result.message_ = errorBuilder_.build();
      }
      if (messageCase_ == 12 &&
          matchBuilder_ != null) {
        result.message_ = matchBuilder_.build();
      }
      if (messageCase_ == 13 &&
          matchCreateBuilder_ != null) {
        result.message_ = matchCreateBuilder_.build();
      }
      if (messageCase_ == 14 &&
          matchDataBuilder_ != null) {
        result.message_ = matchDataBuilder_.build();
      }
      if (messageCase_ == 15 &&
          matchDataSendBuilder_ != null) {
        result.message_ = matchDataSendBuilder_.build();
      }
      if (messageCase_ == 16 &&
          matchJoinBuilder_ != null) {
        result.message_ = matchJoinBuilder_.build();
      }
      if (messageCase_ == 17 &&
          matchLeaveBuilder_ != null) {
        result.message_ = matchLeaveBuilder_.build();
      }
      if (messageCase_ == 18 &&
          matchPresenceEventBuilder_ != null) {
        result.message_ = matchPresenceEventBuilder_.build();
      }
      if (messageCase_ == 19 &&
          matchmakerAddBuilder_ != null) {
        result.message_ = matchmakerAddBuilder_.build();
      }
      if (messageCase_ == 20 &&
          matchmakerMatchedBuilder_ != null) {
        result.message_ = matchmakerMatchedBuilder_.build();
      }
      if (messageCase_ == 21 &&
          matchmakerRemoveBuilder_ != null) {
        result.message_ = matchmakerRemoveBuilder_.build();
      }
      if (messageCase_ == 22 &&
          matchmakerTicketBuilder_ != null) {
        result.message_ = matchmakerTicketBuilder_.build();
      }
      if (messageCase_ == 23 &&
          notificationsBuilder_ != null) {
        result.message_ = notificationsBuilder_.build();
      }
      if (messageCase_ == 24 &&
          rpcBuilder_ != null) {
        result.message_ = rpcBuilder_.build();
      }
      if (messageCase_ == 25 &&
          statusBuilder_ != null) {
        result.message_ = statusBuilder_.build();
      }
      if (messageCase_ == 26 &&
          statusFollowBuilder_ != null) {
        result.message_ = statusFollowBuilder_.build();
      }
      if (messageCase_ == 27 &&
          statusPresenceEventBuilder_ != null) {
        result.message_ = statusPresenceEventBuilder_.build();
      }
      if (messageCase_ == 28 &&
          statusUnfollowBuilder_ != null) {
        result.message_ = statusUnfollowBuilder_.build();
      }
      if (messageCase_ == 29 &&
          statusUpdateBuilder_ != null) {
        result.message_ = statusUpdateBuilder_.build();
      }
      if (messageCase_ == 30 &&
          streamDataBuilder_ != null) {
        result.message_ = streamDataBuilder_.build();
      }
      if (messageCase_ == 31 &&
          streamPresenceEventBuilder_ != null) {
        result.message_ = streamPresenceEventBuilder_.build();
      }
      if (messageCase_ == 32 &&
          pingBuilder_ != null) {
        result.message_ = pingBuilder_.build();
      }
      if (messageCase_ == 33 &&
          pongBuilder_ != null) {
        result.message_ = pongBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.heroiclabs.nakama.realtime.Envelope) {
        return mergeFrom((com.heroiclabs.nakama.realtime.Envelope)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.heroiclabs.nakama.realtime.Envelope other) {
      if (other == com.heroiclabs.nakama.realtime.Envelope.getDefaultInstance()) return this;
      if (!other.getCid().isEmpty()) {
        cid_ = other.cid_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      switch (other.getMessageCase()) {
        case CHANNEL: {
          mergeChannel(other.getChannel());
          break;
        }
        case CHANNEL_JOIN: {
          mergeChannelJoin(other.getChannelJoin());
          break;
        }
        case CHANNEL_LEAVE: {
          mergeChannelLeave(other.getChannelLeave());
          break;
        }
        case CHANNEL_MESSAGE: {
          mergeChannelMessage(other.getChannelMessage());
          break;
        }
        case CHANNEL_MESSAGE_ACK: {
          mergeChannelMessageAck(other.getChannelMessageAck());
          break;
        }
        case CHANNEL_MESSAGE_SEND: {
          mergeChannelMessageSend(other.getChannelMessageSend());
          break;
        }
        case CHANNEL_MESSAGE_UPDATE: {
          mergeChannelMessageUpdate(other.getChannelMessageUpdate());
          break;
        }
        case CHANNEL_MESSAGE_REMOVE: {
          mergeChannelMessageRemove(other.getChannelMessageRemove());
          break;
        }
        case CHANNEL_PRESENCE_EVENT: {
          mergeChannelPresenceEvent(other.getChannelPresenceEvent());
          break;
        }
        case ERROR: {
          mergeError(other.getError());
          break;
        }
        case MATCH: {
          mergeMatch(other.getMatch());
          break;
        }
        case MATCH_CREATE: {
          mergeMatchCreate(other.getMatchCreate());
          break;
        }
        case MATCH_DATA: {
          mergeMatchData(other.getMatchData());
          break;
        }
        case MATCH_DATA_SEND: {
          mergeMatchDataSend(other.getMatchDataSend());
          break;
        }
        case MATCH_JOIN: {
          mergeMatchJoin(other.getMatchJoin());
          break;
        }
        case MATCH_LEAVE: {
          mergeMatchLeave(other.getMatchLeave());
          break;
        }
        case MATCH_PRESENCE_EVENT: {
          mergeMatchPresenceEvent(other.getMatchPresenceEvent());
          break;
        }
        case MATCHMAKER_ADD: {
          mergeMatchmakerAdd(other.getMatchmakerAdd());
          break;
        }
        case MATCHMAKER_MATCHED: {
          mergeMatchmakerMatched(other.getMatchmakerMatched());
          break;
        }
        case MATCHMAKER_REMOVE: {
          mergeMatchmakerRemove(other.getMatchmakerRemove());
          break;
        }
        case MATCHMAKER_TICKET: {
          mergeMatchmakerTicket(other.getMatchmakerTicket());
          break;
        }
        case NOTIFICATIONS: {
          mergeNotifications(other.getNotifications());
          break;
        }
        case RPC: {
          mergeRpc(other.getRpc());
          break;
        }
        case STATUS: {
          mergeStatus(other.getStatus());
          break;
        }
        case STATUS_FOLLOW: {
          mergeStatusFollow(other.getStatusFollow());
          break;
        }
        case STATUS_PRESENCE_EVENT: {
          mergeStatusPresenceEvent(other.getStatusPresenceEvent());
          break;
        }
        case STATUS_UNFOLLOW: {
          mergeStatusUnfollow(other.getStatusUnfollow());
          break;
        }
        case STATUS_UPDATE: {
          mergeStatusUpdate(other.getStatusUpdate());
          break;
        }
        case STREAM_DATA: {
          mergeStreamData(other.getStreamData());
          break;
        }
        case STREAM_PRESENCE_EVENT: {
          mergeStreamPresenceEvent(other.getStreamPresenceEvent());
          break;
        }
        case PING: {
          mergePing(other.getPing());
          break;
        }
        case PONG: {
          mergePong(other.getPong());
          break;
        }
        case MESSAGE_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              cid_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getChannelFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 2;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getChannelJoinFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 3;
              break;
            } // case 26
            case 34: {
              input.readMessage(
                  getChannelLeaveFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 4;
              break;
            } // case 34
            case 42: {
              input.readMessage(
                  getChannelMessageFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 5;
              break;
            } // case 42
            case 50: {
              input.readMessage(
                  getChannelMessageAckFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 6;
              break;
            } // case 50
            case 58: {
              input.readMessage(
                  getChannelMessageSendFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 7;
              break;
            } // case 58
            case 66: {
              input.readMessage(
                  getChannelMessageUpdateFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 8;
              break;
            } // case 66
            case 74: {
              input.readMessage(
                  getChannelMessageRemoveFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 9;
              break;
            } // case 74
            case 82: {
              input.readMessage(
                  getChannelPresenceEventFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 10;
              break;
            } // case 82
            case 90: {
              input.readMessage(
                  getErrorFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 11;
              break;
            } // case 90
            case 98: {
              input.readMessage(
                  getMatchFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 12;
              break;
            } // case 98
            case 106: {
              input.readMessage(
                  getMatchCreateFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 13;
              break;
            } // case 106
            case 114: {
              input.readMessage(
                  getMatchDataFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 14;
              break;
            } // case 114
            case 122: {
              input.readMessage(
                  getMatchDataSendFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 15;
              break;
            } // case 122
            case 130: {
              input.readMessage(
                  getMatchJoinFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 16;
              break;
            } // case 130
            case 138: {
              input.readMessage(
                  getMatchLeaveFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 17;
              break;
            } // case 138
            case 146: {
              input.readMessage(
                  getMatchPresenceEventFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 18;
              break;
            } // case 146
            case 154: {
              input.readMessage(
                  getMatchmakerAddFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 19;
              break;
            } // case 154
            case 162: {
              input.readMessage(
                  getMatchmakerMatchedFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 20;
              break;
            } // case 162
            case 170: {
              input.readMessage(
                  getMatchmakerRemoveFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 21;
              break;
            } // case 170
            case 178: {
              input.readMessage(
                  getMatchmakerTicketFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 22;
              break;
            } // case 178
            case 186: {
              input.readMessage(
                  getNotificationsFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 23;
              break;
            } // case 186
            case 194: {
              input.readMessage(
                  getRpcFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 24;
              break;
            } // case 194
            case 202: {
              input.readMessage(
                  getStatusFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 25;
              break;
            } // case 202
            case 210: {
              input.readMessage(
                  getStatusFollowFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 26;
              break;
            } // case 210
            case 218: {
              input.readMessage(
                  getStatusPresenceEventFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 27;
              break;
            } // case 218
            case 226: {
              input.readMessage(
                  getStatusUnfollowFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 28;
              break;
            } // case 226
            case 234: {
              input.readMessage(
                  getStatusUpdateFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 29;
              break;
            } // case 234
            case 242: {
              input.readMessage(
                  getStreamDataFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 30;
              break;
            } // case 242
            case 250: {
              input.readMessage(
                  getStreamPresenceEventFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 31;
              break;
            } // case 250
            case 258: {
              input.readMessage(
                  getPingFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 32;
              break;
            } // case 258
            case 266: {
              input.readMessage(
                  getPongFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 33;
              break;
            } // case 266
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int messageCase_ = 0;
    private java.lang.Object message_;
    public MessageCase
        getMessageCase() {
      return MessageCase.forNumber(
          messageCase_);
    }

    public Builder clearMessage() {
      messageCase_ = 0;
      message_ = null;
      onChanged();
      return this;
    }

    private int bitField0_;
    private int bitField1_;

    private java.lang.Object cid_ = "";
    /**
     * <code>string cid = 1 [json_name = "cid"];</code>
     * @return The cid.
     */
    public java.lang.String getCid() {
      java.lang.Object ref = cid_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        cid_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>string cid = 1 [json_name = "cid"];</code>
     * @return The bytes for cid.
     */
    public com.google.protobuf.ByteString
        getCidBytes() {
      java.lang.Object ref = cid_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        cid_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>string cid = 1 [json_name = "cid"];</code>
     * @param value The cid to set.
     * @return This builder for chaining.
     */
    public Builder setCid(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      cid_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>string cid = 1 [json_name = "cid"];</code>
     * @return This builder for chaining.
     */
    public Builder clearCid() {
      cid_ = getDefaultInstance().getCid();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <code>string cid = 1 [json_name = "cid"];</code>
     * @param value The bytes for cid to set.
     * @return This builder for chaining.
     */
    public Builder setCidBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      cid_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.Channel, com.heroiclabs.nakama.realtime.Channel.Builder, com.heroiclabs.nakama.realtime.ChannelOrBuilder> channelBuilder_;
    /**
     * <pre>
     * A response from a channel join operation.
     * </pre>
     *
     * <code>.nakama.realtime.Channel channel = 2 [json_name = "channel"];</code>
     * @return Whether the channel field is set.
     */
    @java.lang.Override
    public boolean hasChannel() {
      return messageCase_ == 2;
    }
    /**
     * <pre>
     * A response from a channel join operation.
     * </pre>
     *
     * <code>.nakama.realtime.Channel channel = 2 [json_name = "channel"];</code>
     * @return The channel.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.Channel getChannel() {
      if (channelBuilder_ == null) {
        if (messageCase_ == 2) {
          return (com.heroiclabs.nakama.realtime.Channel) message_;
        }
        return com.heroiclabs.nakama.realtime.Channel.getDefaultInstance();
      } else {
        if (messageCase_ == 2) {
          return channelBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.realtime.Channel.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A response from a channel join operation.
     * </pre>
     *
     * <code>.nakama.realtime.Channel channel = 2 [json_name = "channel"];</code>
     */
    public Builder setChannel(com.heroiclabs.nakama.realtime.Channel value) {
      if (channelBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        channelBuilder_.setMessage(value);
      }
      messageCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * A response from a channel join operation.
     * </pre>
     *
     * <code>.nakama.realtime.Channel channel = 2 [json_name = "channel"];</code>
     */
    public Builder setChannel(
        com.heroiclabs.nakama.realtime.Channel.Builder builderForValue) {
      if (channelBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        channelBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * A response from a channel join operation.
     * </pre>
     *
     * <code>.nakama.realtime.Channel channel = 2 [json_name = "channel"];</code>
     */
    public Builder mergeChannel(com.heroiclabs.nakama.realtime.Channel value) {
      if (channelBuilder_ == null) {
        if (messageCase_ == 2 &&
            message_ != com.heroiclabs.nakama.realtime.Channel.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.realtime.Channel.newBuilder((com.heroiclabs.nakama.realtime.Channel) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 2) {
          channelBuilder_.mergeFrom(value);
        } else {
          channelBuilder_.setMessage(value);
        }
      }
      messageCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * A response from a channel join operation.
     * </pre>
     *
     * <code>.nakama.realtime.Channel channel = 2 [json_name = "channel"];</code>
     */
    public Builder clearChannel() {
      if (channelBuilder_ == null) {
        if (messageCase_ == 2) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 2) {
          messageCase_ = 0;
          message_ = null;
        }
        channelBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * A response from a channel join operation.
     * </pre>
     *
     * <code>.nakama.realtime.Channel channel = 2 [json_name = "channel"];</code>
     */
    public com.heroiclabs.nakama.realtime.Channel.Builder getChannelBuilder() {
      return getChannelFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * A response from a channel join operation.
     * </pre>
     *
     * <code>.nakama.realtime.Channel channel = 2 [json_name = "channel"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.ChannelOrBuilder getChannelOrBuilder() {
      if ((messageCase_ == 2) && (channelBuilder_ != null)) {
        return channelBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 2) {
          return (com.heroiclabs.nakama.realtime.Channel) message_;
        }
        return com.heroiclabs.nakama.realtime.Channel.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A response from a channel join operation.
     * </pre>
     *
     * <code>.nakama.realtime.Channel channel = 2 [json_name = "channel"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.Channel, com.heroiclabs.nakama.realtime.Channel.Builder, com.heroiclabs.nakama.realtime.ChannelOrBuilder> 
        getChannelFieldBuilder() {
      if (channelBuilder_ == null) {
        if (!(messageCase_ == 2)) {
          message_ = com.heroiclabs.nakama.realtime.Channel.getDefaultInstance();
        }
        channelBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.realtime.Channel, com.heroiclabs.nakama.realtime.Channel.Builder, com.heroiclabs.nakama.realtime.ChannelOrBuilder>(
                (com.heroiclabs.nakama.realtime.Channel) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 2;
      onChanged();
      return channelBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.ChannelJoin, com.heroiclabs.nakama.realtime.ChannelJoin.Builder, com.heroiclabs.nakama.realtime.ChannelJoinOrBuilder> channelJoinBuilder_;
    /**
     * <pre>
     * Join a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelJoin channel_join = 3 [json_name = "channelJoin"];</code>
     * @return Whether the channelJoin field is set.
     */
    @java.lang.Override
    public boolean hasChannelJoin() {
      return messageCase_ == 3;
    }
    /**
     * <pre>
     * Join a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelJoin channel_join = 3 [json_name = "channelJoin"];</code>
     * @return The channelJoin.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.ChannelJoin getChannelJoin() {
      if (channelJoinBuilder_ == null) {
        if (messageCase_ == 3) {
          return (com.heroiclabs.nakama.realtime.ChannelJoin) message_;
        }
        return com.heroiclabs.nakama.realtime.ChannelJoin.getDefaultInstance();
      } else {
        if (messageCase_ == 3) {
          return channelJoinBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.realtime.ChannelJoin.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Join a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelJoin channel_join = 3 [json_name = "channelJoin"];</code>
     */
    public Builder setChannelJoin(com.heroiclabs.nakama.realtime.ChannelJoin value) {
      if (channelJoinBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        channelJoinBuilder_.setMessage(value);
      }
      messageCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * Join a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelJoin channel_join = 3 [json_name = "channelJoin"];</code>
     */
    public Builder setChannelJoin(
        com.heroiclabs.nakama.realtime.ChannelJoin.Builder builderForValue) {
      if (channelJoinBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        channelJoinBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * Join a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelJoin channel_join = 3 [json_name = "channelJoin"];</code>
     */
    public Builder mergeChannelJoin(com.heroiclabs.nakama.realtime.ChannelJoin value) {
      if (channelJoinBuilder_ == null) {
        if (messageCase_ == 3 &&
            message_ != com.heroiclabs.nakama.realtime.ChannelJoin.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.realtime.ChannelJoin.newBuilder((com.heroiclabs.nakama.realtime.ChannelJoin) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 3) {
          channelJoinBuilder_.mergeFrom(value);
        } else {
          channelJoinBuilder_.setMessage(value);
        }
      }
      messageCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * Join a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelJoin channel_join = 3 [json_name = "channelJoin"];</code>
     */
    public Builder clearChannelJoin() {
      if (channelJoinBuilder_ == null) {
        if (messageCase_ == 3) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 3) {
          messageCase_ = 0;
          message_ = null;
        }
        channelJoinBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Join a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelJoin channel_join = 3 [json_name = "channelJoin"];</code>
     */
    public com.heroiclabs.nakama.realtime.ChannelJoin.Builder getChannelJoinBuilder() {
      return getChannelJoinFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Join a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelJoin channel_join = 3 [json_name = "channelJoin"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.ChannelJoinOrBuilder getChannelJoinOrBuilder() {
      if ((messageCase_ == 3) && (channelJoinBuilder_ != null)) {
        return channelJoinBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 3) {
          return (com.heroiclabs.nakama.realtime.ChannelJoin) message_;
        }
        return com.heroiclabs.nakama.realtime.ChannelJoin.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Join a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelJoin channel_join = 3 [json_name = "channelJoin"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.ChannelJoin, com.heroiclabs.nakama.realtime.ChannelJoin.Builder, com.heroiclabs.nakama.realtime.ChannelJoinOrBuilder> 
        getChannelJoinFieldBuilder() {
      if (channelJoinBuilder_ == null) {
        if (!(messageCase_ == 3)) {
          message_ = com.heroiclabs.nakama.realtime.ChannelJoin.getDefaultInstance();
        }
        channelJoinBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.realtime.ChannelJoin, com.heroiclabs.nakama.realtime.ChannelJoin.Builder, com.heroiclabs.nakama.realtime.ChannelJoinOrBuilder>(
                (com.heroiclabs.nakama.realtime.ChannelJoin) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 3;
      onChanged();
      return channelJoinBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.ChannelLeave, com.heroiclabs.nakama.realtime.ChannelLeave.Builder, com.heroiclabs.nakama.realtime.ChannelLeaveOrBuilder> channelLeaveBuilder_;
    /**
     * <pre>
     * Leave a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelLeave channel_leave = 4 [json_name = "channelLeave"];</code>
     * @return Whether the channelLeave field is set.
     */
    @java.lang.Override
    public boolean hasChannelLeave() {
      return messageCase_ == 4;
    }
    /**
     * <pre>
     * Leave a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelLeave channel_leave = 4 [json_name = "channelLeave"];</code>
     * @return The channelLeave.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.ChannelLeave getChannelLeave() {
      if (channelLeaveBuilder_ == null) {
        if (messageCase_ == 4) {
          return (com.heroiclabs.nakama.realtime.ChannelLeave) message_;
        }
        return com.heroiclabs.nakama.realtime.ChannelLeave.getDefaultInstance();
      } else {
        if (messageCase_ == 4) {
          return channelLeaveBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.realtime.ChannelLeave.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Leave a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelLeave channel_leave = 4 [json_name = "channelLeave"];</code>
     */
    public Builder setChannelLeave(com.heroiclabs.nakama.realtime.ChannelLeave value) {
      if (channelLeaveBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        channelLeaveBuilder_.setMessage(value);
      }
      messageCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * Leave a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelLeave channel_leave = 4 [json_name = "channelLeave"];</code>
     */
    public Builder setChannelLeave(
        com.heroiclabs.nakama.realtime.ChannelLeave.Builder builderForValue) {
      if (channelLeaveBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        channelLeaveBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * Leave a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelLeave channel_leave = 4 [json_name = "channelLeave"];</code>
     */
    public Builder mergeChannelLeave(com.heroiclabs.nakama.realtime.ChannelLeave value) {
      if (channelLeaveBuilder_ == null) {
        if (messageCase_ == 4 &&
            message_ != com.heroiclabs.nakama.realtime.ChannelLeave.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.realtime.ChannelLeave.newBuilder((com.heroiclabs.nakama.realtime.ChannelLeave) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 4) {
          channelLeaveBuilder_.mergeFrom(value);
        } else {
          channelLeaveBuilder_.setMessage(value);
        }
      }
      messageCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * Leave a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelLeave channel_leave = 4 [json_name = "channelLeave"];</code>
     */
    public Builder clearChannelLeave() {
      if (channelLeaveBuilder_ == null) {
        if (messageCase_ == 4) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 4) {
          messageCase_ = 0;
          message_ = null;
        }
        channelLeaveBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Leave a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelLeave channel_leave = 4 [json_name = "channelLeave"];</code>
     */
    public com.heroiclabs.nakama.realtime.ChannelLeave.Builder getChannelLeaveBuilder() {
      return getChannelLeaveFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Leave a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelLeave channel_leave = 4 [json_name = "channelLeave"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.ChannelLeaveOrBuilder getChannelLeaveOrBuilder() {
      if ((messageCase_ == 4) && (channelLeaveBuilder_ != null)) {
        return channelLeaveBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 4) {
          return (com.heroiclabs.nakama.realtime.ChannelLeave) message_;
        }
        return com.heroiclabs.nakama.realtime.ChannelLeave.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Leave a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelLeave channel_leave = 4 [json_name = "channelLeave"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.ChannelLeave, com.heroiclabs.nakama.realtime.ChannelLeave.Builder, com.heroiclabs.nakama.realtime.ChannelLeaveOrBuilder> 
        getChannelLeaveFieldBuilder() {
      if (channelLeaveBuilder_ == null) {
        if (!(messageCase_ == 4)) {
          message_ = com.heroiclabs.nakama.realtime.ChannelLeave.getDefaultInstance();
        }
        channelLeaveBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.realtime.ChannelLeave, com.heroiclabs.nakama.realtime.ChannelLeave.Builder, com.heroiclabs.nakama.realtime.ChannelLeaveOrBuilder>(
                (com.heroiclabs.nakama.realtime.ChannelLeave) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 4;
      onChanged();
      return channelLeaveBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.api.ChannelMessage, com.heroiclabs.nakama.api.ChannelMessage.Builder, com.heroiclabs.nakama.api.ChannelMessageOrBuilder> channelMessageBuilder_;
    /**
     * <pre>
     * An incoming message on a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.api.ChannelMessage channel_message = 5 [json_name = "channelMessage"];</code>
     * @return Whether the channelMessage field is set.
     */
    @java.lang.Override
    public boolean hasChannelMessage() {
      return messageCase_ == 5;
    }
    /**
     * <pre>
     * An incoming message on a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.api.ChannelMessage channel_message = 5 [json_name = "channelMessage"];</code>
     * @return The channelMessage.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.api.ChannelMessage getChannelMessage() {
      if (channelMessageBuilder_ == null) {
        if (messageCase_ == 5) {
          return (com.heroiclabs.nakama.api.ChannelMessage) message_;
        }
        return com.heroiclabs.nakama.api.ChannelMessage.getDefaultInstance();
      } else {
        if (messageCase_ == 5) {
          return channelMessageBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.api.ChannelMessage.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * An incoming message on a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.api.ChannelMessage channel_message = 5 [json_name = "channelMessage"];</code>
     */
    public Builder setChannelMessage(com.heroiclabs.nakama.api.ChannelMessage value) {
      if (channelMessageBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        channelMessageBuilder_.setMessage(value);
      }
      messageCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * An incoming message on a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.api.ChannelMessage channel_message = 5 [json_name = "channelMessage"];</code>
     */
    public Builder setChannelMessage(
        com.heroiclabs.nakama.api.ChannelMessage.Builder builderForValue) {
      if (channelMessageBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        channelMessageBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * An incoming message on a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.api.ChannelMessage channel_message = 5 [json_name = "channelMessage"];</code>
     */
    public Builder mergeChannelMessage(com.heroiclabs.nakama.api.ChannelMessage value) {
      if (channelMessageBuilder_ == null) {
        if (messageCase_ == 5 &&
            message_ != com.heroiclabs.nakama.api.ChannelMessage.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.api.ChannelMessage.newBuilder((com.heroiclabs.nakama.api.ChannelMessage) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 5) {
          channelMessageBuilder_.mergeFrom(value);
        } else {
          channelMessageBuilder_.setMessage(value);
        }
      }
      messageCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * An incoming message on a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.api.ChannelMessage channel_message = 5 [json_name = "channelMessage"];</code>
     */
    public Builder clearChannelMessage() {
      if (channelMessageBuilder_ == null) {
        if (messageCase_ == 5) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 5) {
          messageCase_ = 0;
          message_ = null;
        }
        channelMessageBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * An incoming message on a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.api.ChannelMessage channel_message = 5 [json_name = "channelMessage"];</code>
     */
    public com.heroiclabs.nakama.api.ChannelMessage.Builder getChannelMessageBuilder() {
      return getChannelMessageFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * An incoming message on a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.api.ChannelMessage channel_message = 5 [json_name = "channelMessage"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.api.ChannelMessageOrBuilder getChannelMessageOrBuilder() {
      if ((messageCase_ == 5) && (channelMessageBuilder_ != null)) {
        return channelMessageBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 5) {
          return (com.heroiclabs.nakama.api.ChannelMessage) message_;
        }
        return com.heroiclabs.nakama.api.ChannelMessage.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * An incoming message on a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.api.ChannelMessage channel_message = 5 [json_name = "channelMessage"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.api.ChannelMessage, com.heroiclabs.nakama.api.ChannelMessage.Builder, com.heroiclabs.nakama.api.ChannelMessageOrBuilder> 
        getChannelMessageFieldBuilder() {
      if (channelMessageBuilder_ == null) {
        if (!(messageCase_ == 5)) {
          message_ = com.heroiclabs.nakama.api.ChannelMessage.getDefaultInstance();
        }
        channelMessageBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.api.ChannelMessage, com.heroiclabs.nakama.api.ChannelMessage.Builder, com.heroiclabs.nakama.api.ChannelMessageOrBuilder>(
                (com.heroiclabs.nakama.api.ChannelMessage) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 5;
      onChanged();
      return channelMessageBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.ChannelMessageAck, com.heroiclabs.nakama.realtime.ChannelMessageAck.Builder, com.heroiclabs.nakama.realtime.ChannelMessageAckOrBuilder> channelMessageAckBuilder_;
    /**
     * <pre>
     * An acknowledgement received in response to sending a message on a chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageAck channel_message_ack = 6 [json_name = "channelMessageAck"];</code>
     * @return Whether the channelMessageAck field is set.
     */
    @java.lang.Override
    public boolean hasChannelMessageAck() {
      return messageCase_ == 6;
    }
    /**
     * <pre>
     * An acknowledgement received in response to sending a message on a chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageAck channel_message_ack = 6 [json_name = "channelMessageAck"];</code>
     * @return The channelMessageAck.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.ChannelMessageAck getChannelMessageAck() {
      if (channelMessageAckBuilder_ == null) {
        if (messageCase_ == 6) {
          return (com.heroiclabs.nakama.realtime.ChannelMessageAck) message_;
        }
        return com.heroiclabs.nakama.realtime.ChannelMessageAck.getDefaultInstance();
      } else {
        if (messageCase_ == 6) {
          return channelMessageAckBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.realtime.ChannelMessageAck.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * An acknowledgement received in response to sending a message on a chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageAck channel_message_ack = 6 [json_name = "channelMessageAck"];</code>
     */
    public Builder setChannelMessageAck(com.heroiclabs.nakama.realtime.ChannelMessageAck value) {
      if (channelMessageAckBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        channelMessageAckBuilder_.setMessage(value);
      }
      messageCase_ = 6;
      return this;
    }
    /**
     * <pre>
     * An acknowledgement received in response to sending a message on a chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageAck channel_message_ack = 6 [json_name = "channelMessageAck"];</code>
     */
    public Builder setChannelMessageAck(
        com.heroiclabs.nakama.realtime.ChannelMessageAck.Builder builderForValue) {
      if (channelMessageAckBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        channelMessageAckBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 6;
      return this;
    }
    /**
     * <pre>
     * An acknowledgement received in response to sending a message on a chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageAck channel_message_ack = 6 [json_name = "channelMessageAck"];</code>
     */
    public Builder mergeChannelMessageAck(com.heroiclabs.nakama.realtime.ChannelMessageAck value) {
      if (channelMessageAckBuilder_ == null) {
        if (messageCase_ == 6 &&
            message_ != com.heroiclabs.nakama.realtime.ChannelMessageAck.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.realtime.ChannelMessageAck.newBuilder((com.heroiclabs.nakama.realtime.ChannelMessageAck) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 6) {
          channelMessageAckBuilder_.mergeFrom(value);
        } else {
          channelMessageAckBuilder_.setMessage(value);
        }
      }
      messageCase_ = 6;
      return this;
    }
    /**
     * <pre>
     * An acknowledgement received in response to sending a message on a chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageAck channel_message_ack = 6 [json_name = "channelMessageAck"];</code>
     */
    public Builder clearChannelMessageAck() {
      if (channelMessageAckBuilder_ == null) {
        if (messageCase_ == 6) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 6) {
          messageCase_ = 0;
          message_ = null;
        }
        channelMessageAckBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * An acknowledgement received in response to sending a message on a chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageAck channel_message_ack = 6 [json_name = "channelMessageAck"];</code>
     */
    public com.heroiclabs.nakama.realtime.ChannelMessageAck.Builder getChannelMessageAckBuilder() {
      return getChannelMessageAckFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * An acknowledgement received in response to sending a message on a chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageAck channel_message_ack = 6 [json_name = "channelMessageAck"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.ChannelMessageAckOrBuilder getChannelMessageAckOrBuilder() {
      if ((messageCase_ == 6) && (channelMessageAckBuilder_ != null)) {
        return channelMessageAckBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 6) {
          return (com.heroiclabs.nakama.realtime.ChannelMessageAck) message_;
        }
        return com.heroiclabs.nakama.realtime.ChannelMessageAck.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * An acknowledgement received in response to sending a message on a chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageAck channel_message_ack = 6 [json_name = "channelMessageAck"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.ChannelMessageAck, com.heroiclabs.nakama.realtime.ChannelMessageAck.Builder, com.heroiclabs.nakama.realtime.ChannelMessageAckOrBuilder> 
        getChannelMessageAckFieldBuilder() {
      if (channelMessageAckBuilder_ == null) {
        if (!(messageCase_ == 6)) {
          message_ = com.heroiclabs.nakama.realtime.ChannelMessageAck.getDefaultInstance();
        }
        channelMessageAckBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.realtime.ChannelMessageAck, com.heroiclabs.nakama.realtime.ChannelMessageAck.Builder, com.heroiclabs.nakama.realtime.ChannelMessageAckOrBuilder>(
                (com.heroiclabs.nakama.realtime.ChannelMessageAck) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 6;
      onChanged();
      return channelMessageAckBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.ChannelMessageSend, com.heroiclabs.nakama.realtime.ChannelMessageSend.Builder, com.heroiclabs.nakama.realtime.ChannelMessageSendOrBuilder> channelMessageSendBuilder_;
    /**
     * <pre>
     * Send a message to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageSend channel_message_send = 7 [json_name = "channelMessageSend"];</code>
     * @return Whether the channelMessageSend field is set.
     */
    @java.lang.Override
    public boolean hasChannelMessageSend() {
      return messageCase_ == 7;
    }
    /**
     * <pre>
     * Send a message to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageSend channel_message_send = 7 [json_name = "channelMessageSend"];</code>
     * @return The channelMessageSend.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.ChannelMessageSend getChannelMessageSend() {
      if (channelMessageSendBuilder_ == null) {
        if (messageCase_ == 7) {
          return (com.heroiclabs.nakama.realtime.ChannelMessageSend) message_;
        }
        return com.heroiclabs.nakama.realtime.ChannelMessageSend.getDefaultInstance();
      } else {
        if (messageCase_ == 7) {
          return channelMessageSendBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.realtime.ChannelMessageSend.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Send a message to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageSend channel_message_send = 7 [json_name = "channelMessageSend"];</code>
     */
    public Builder setChannelMessageSend(com.heroiclabs.nakama.realtime.ChannelMessageSend value) {
      if (channelMessageSendBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        channelMessageSendBuilder_.setMessage(value);
      }
      messageCase_ = 7;
      return this;
    }
    /**
     * <pre>
     * Send a message to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageSend channel_message_send = 7 [json_name = "channelMessageSend"];</code>
     */
    public Builder setChannelMessageSend(
        com.heroiclabs.nakama.realtime.ChannelMessageSend.Builder builderForValue) {
      if (channelMessageSendBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        channelMessageSendBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 7;
      return this;
    }
    /**
     * <pre>
     * Send a message to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageSend channel_message_send = 7 [json_name = "channelMessageSend"];</code>
     */
    public Builder mergeChannelMessageSend(com.heroiclabs.nakama.realtime.ChannelMessageSend value) {
      if (channelMessageSendBuilder_ == null) {
        if (messageCase_ == 7 &&
            message_ != com.heroiclabs.nakama.realtime.ChannelMessageSend.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.realtime.ChannelMessageSend.newBuilder((com.heroiclabs.nakama.realtime.ChannelMessageSend) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 7) {
          channelMessageSendBuilder_.mergeFrom(value);
        } else {
          channelMessageSendBuilder_.setMessage(value);
        }
      }
      messageCase_ = 7;
      return this;
    }
    /**
     * <pre>
     * Send a message to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageSend channel_message_send = 7 [json_name = "channelMessageSend"];</code>
     */
    public Builder clearChannelMessageSend() {
      if (channelMessageSendBuilder_ == null) {
        if (messageCase_ == 7) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 7) {
          messageCase_ = 0;
          message_ = null;
        }
        channelMessageSendBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Send a message to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageSend channel_message_send = 7 [json_name = "channelMessageSend"];</code>
     */
    public com.heroiclabs.nakama.realtime.ChannelMessageSend.Builder getChannelMessageSendBuilder() {
      return getChannelMessageSendFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Send a message to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageSend channel_message_send = 7 [json_name = "channelMessageSend"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.ChannelMessageSendOrBuilder getChannelMessageSendOrBuilder() {
      if ((messageCase_ == 7) && (channelMessageSendBuilder_ != null)) {
        return channelMessageSendBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 7) {
          return (com.heroiclabs.nakama.realtime.ChannelMessageSend) message_;
        }
        return com.heroiclabs.nakama.realtime.ChannelMessageSend.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Send a message to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageSend channel_message_send = 7 [json_name = "channelMessageSend"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.ChannelMessageSend, com.heroiclabs.nakama.realtime.ChannelMessageSend.Builder, com.heroiclabs.nakama.realtime.ChannelMessageSendOrBuilder> 
        getChannelMessageSendFieldBuilder() {
      if (channelMessageSendBuilder_ == null) {
        if (!(messageCase_ == 7)) {
          message_ = com.heroiclabs.nakama.realtime.ChannelMessageSend.getDefaultInstance();
        }
        channelMessageSendBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.realtime.ChannelMessageSend, com.heroiclabs.nakama.realtime.ChannelMessageSend.Builder, com.heroiclabs.nakama.realtime.ChannelMessageSendOrBuilder>(
                (com.heroiclabs.nakama.realtime.ChannelMessageSend) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 7;
      onChanged();
      return channelMessageSendBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.ChannelMessageUpdate, com.heroiclabs.nakama.realtime.ChannelMessageUpdate.Builder, com.heroiclabs.nakama.realtime.ChannelMessageUpdateOrBuilder> channelMessageUpdateBuilder_;
    /**
     * <pre>
     * Update a message previously sent to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageUpdate channel_message_update = 8 [json_name = "channelMessageUpdate"];</code>
     * @return Whether the channelMessageUpdate field is set.
     */
    @java.lang.Override
    public boolean hasChannelMessageUpdate() {
      return messageCase_ == 8;
    }
    /**
     * <pre>
     * Update a message previously sent to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageUpdate channel_message_update = 8 [json_name = "channelMessageUpdate"];</code>
     * @return The channelMessageUpdate.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.ChannelMessageUpdate getChannelMessageUpdate() {
      if (channelMessageUpdateBuilder_ == null) {
        if (messageCase_ == 8) {
          return (com.heroiclabs.nakama.realtime.ChannelMessageUpdate) message_;
        }
        return com.heroiclabs.nakama.realtime.ChannelMessageUpdate.getDefaultInstance();
      } else {
        if (messageCase_ == 8) {
          return channelMessageUpdateBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.realtime.ChannelMessageUpdate.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Update a message previously sent to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageUpdate channel_message_update = 8 [json_name = "channelMessageUpdate"];</code>
     */
    public Builder setChannelMessageUpdate(com.heroiclabs.nakama.realtime.ChannelMessageUpdate value) {
      if (channelMessageUpdateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        channelMessageUpdateBuilder_.setMessage(value);
      }
      messageCase_ = 8;
      return this;
    }
    /**
     * <pre>
     * Update a message previously sent to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageUpdate channel_message_update = 8 [json_name = "channelMessageUpdate"];</code>
     */
    public Builder setChannelMessageUpdate(
        com.heroiclabs.nakama.realtime.ChannelMessageUpdate.Builder builderForValue) {
      if (channelMessageUpdateBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        channelMessageUpdateBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 8;
      return this;
    }
    /**
     * <pre>
     * Update a message previously sent to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageUpdate channel_message_update = 8 [json_name = "channelMessageUpdate"];</code>
     */
    public Builder mergeChannelMessageUpdate(com.heroiclabs.nakama.realtime.ChannelMessageUpdate value) {
      if (channelMessageUpdateBuilder_ == null) {
        if (messageCase_ == 8 &&
            message_ != com.heroiclabs.nakama.realtime.ChannelMessageUpdate.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.realtime.ChannelMessageUpdate.newBuilder((com.heroiclabs.nakama.realtime.ChannelMessageUpdate) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 8) {
          channelMessageUpdateBuilder_.mergeFrom(value);
        } else {
          channelMessageUpdateBuilder_.setMessage(value);
        }
      }
      messageCase_ = 8;
      return this;
    }
    /**
     * <pre>
     * Update a message previously sent to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageUpdate channel_message_update = 8 [json_name = "channelMessageUpdate"];</code>
     */
    public Builder clearChannelMessageUpdate() {
      if (channelMessageUpdateBuilder_ == null) {
        if (messageCase_ == 8) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 8) {
          messageCase_ = 0;
          message_ = null;
        }
        channelMessageUpdateBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Update a message previously sent to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageUpdate channel_message_update = 8 [json_name = "channelMessageUpdate"];</code>
     */
    public com.heroiclabs.nakama.realtime.ChannelMessageUpdate.Builder getChannelMessageUpdateBuilder() {
      return getChannelMessageUpdateFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Update a message previously sent to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageUpdate channel_message_update = 8 [json_name = "channelMessageUpdate"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.ChannelMessageUpdateOrBuilder getChannelMessageUpdateOrBuilder() {
      if ((messageCase_ == 8) && (channelMessageUpdateBuilder_ != null)) {
        return channelMessageUpdateBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 8) {
          return (com.heroiclabs.nakama.realtime.ChannelMessageUpdate) message_;
        }
        return com.heroiclabs.nakama.realtime.ChannelMessageUpdate.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Update a message previously sent to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageUpdate channel_message_update = 8 [json_name = "channelMessageUpdate"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.ChannelMessageUpdate, com.heroiclabs.nakama.realtime.ChannelMessageUpdate.Builder, com.heroiclabs.nakama.realtime.ChannelMessageUpdateOrBuilder> 
        getChannelMessageUpdateFieldBuilder() {
      if (channelMessageUpdateBuilder_ == null) {
        if (!(messageCase_ == 8)) {
          message_ = com.heroiclabs.nakama.realtime.ChannelMessageUpdate.getDefaultInstance();
        }
        channelMessageUpdateBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.realtime.ChannelMessageUpdate, com.heroiclabs.nakama.realtime.ChannelMessageUpdate.Builder, com.heroiclabs.nakama.realtime.ChannelMessageUpdateOrBuilder>(
                (com.heroiclabs.nakama.realtime.ChannelMessageUpdate) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 8;
      onChanged();
      return channelMessageUpdateBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.ChannelMessageRemove, com.heroiclabs.nakama.realtime.ChannelMessageRemove.Builder, com.heroiclabs.nakama.realtime.ChannelMessageRemoveOrBuilder> channelMessageRemoveBuilder_;
    /**
     * <pre>
     * Remove a message previously sent to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageRemove channel_message_remove = 9 [json_name = "channelMessageRemove"];</code>
     * @return Whether the channelMessageRemove field is set.
     */
    @java.lang.Override
    public boolean hasChannelMessageRemove() {
      return messageCase_ == 9;
    }
    /**
     * <pre>
     * Remove a message previously sent to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageRemove channel_message_remove = 9 [json_name = "channelMessageRemove"];</code>
     * @return The channelMessageRemove.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.ChannelMessageRemove getChannelMessageRemove() {
      if (channelMessageRemoveBuilder_ == null) {
        if (messageCase_ == 9) {
          return (com.heroiclabs.nakama.realtime.ChannelMessageRemove) message_;
        }
        return com.heroiclabs.nakama.realtime.ChannelMessageRemove.getDefaultInstance();
      } else {
        if (messageCase_ == 9) {
          return channelMessageRemoveBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.realtime.ChannelMessageRemove.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Remove a message previously sent to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageRemove channel_message_remove = 9 [json_name = "channelMessageRemove"];</code>
     */
    public Builder setChannelMessageRemove(com.heroiclabs.nakama.realtime.ChannelMessageRemove value) {
      if (channelMessageRemoveBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        channelMessageRemoveBuilder_.setMessage(value);
      }
      messageCase_ = 9;
      return this;
    }
    /**
     * <pre>
     * Remove a message previously sent to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageRemove channel_message_remove = 9 [json_name = "channelMessageRemove"];</code>
     */
    public Builder setChannelMessageRemove(
        com.heroiclabs.nakama.realtime.ChannelMessageRemove.Builder builderForValue) {
      if (channelMessageRemoveBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        channelMessageRemoveBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 9;
      return this;
    }
    /**
     * <pre>
     * Remove a message previously sent to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageRemove channel_message_remove = 9 [json_name = "channelMessageRemove"];</code>
     */
    public Builder mergeChannelMessageRemove(com.heroiclabs.nakama.realtime.ChannelMessageRemove value) {
      if (channelMessageRemoveBuilder_ == null) {
        if (messageCase_ == 9 &&
            message_ != com.heroiclabs.nakama.realtime.ChannelMessageRemove.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.realtime.ChannelMessageRemove.newBuilder((com.heroiclabs.nakama.realtime.ChannelMessageRemove) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 9) {
          channelMessageRemoveBuilder_.mergeFrom(value);
        } else {
          channelMessageRemoveBuilder_.setMessage(value);
        }
      }
      messageCase_ = 9;
      return this;
    }
    /**
     * <pre>
     * Remove a message previously sent to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageRemove channel_message_remove = 9 [json_name = "channelMessageRemove"];</code>
     */
    public Builder clearChannelMessageRemove() {
      if (channelMessageRemoveBuilder_ == null) {
        if (messageCase_ == 9) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 9) {
          messageCase_ = 0;
          message_ = null;
        }
        channelMessageRemoveBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Remove a message previously sent to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageRemove channel_message_remove = 9 [json_name = "channelMessageRemove"];</code>
     */
    public com.heroiclabs.nakama.realtime.ChannelMessageRemove.Builder getChannelMessageRemoveBuilder() {
      return getChannelMessageRemoveFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Remove a message previously sent to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageRemove channel_message_remove = 9 [json_name = "channelMessageRemove"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.ChannelMessageRemoveOrBuilder getChannelMessageRemoveOrBuilder() {
      if ((messageCase_ == 9) && (channelMessageRemoveBuilder_ != null)) {
        return channelMessageRemoveBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 9) {
          return (com.heroiclabs.nakama.realtime.ChannelMessageRemove) message_;
        }
        return com.heroiclabs.nakama.realtime.ChannelMessageRemove.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Remove a message previously sent to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageRemove channel_message_remove = 9 [json_name = "channelMessageRemove"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.ChannelMessageRemove, com.heroiclabs.nakama.realtime.ChannelMessageRemove.Builder, com.heroiclabs.nakama.realtime.ChannelMessageRemoveOrBuilder> 
        getChannelMessageRemoveFieldBuilder() {
      if (channelMessageRemoveBuilder_ == null) {
        if (!(messageCase_ == 9)) {
          message_ = com.heroiclabs.nakama.realtime.ChannelMessageRemove.getDefaultInstance();
        }
        channelMessageRemoveBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.realtime.ChannelMessageRemove, com.heroiclabs.nakama.realtime.ChannelMessageRemove.Builder, com.heroiclabs.nakama.realtime.ChannelMessageRemoveOrBuilder>(
                (com.heroiclabs.nakama.realtime.ChannelMessageRemove) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 9;
      onChanged();
      return channelMessageRemoveBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.ChannelPresenceEvent, com.heroiclabs.nakama.realtime.ChannelPresenceEvent.Builder, com.heroiclabs.nakama.realtime.ChannelPresenceEventOrBuilder> channelPresenceEventBuilder_;
    /**
     * <pre>
     * Presence update for a particular realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelPresenceEvent channel_presence_event = 10 [json_name = "channelPresenceEvent"];</code>
     * @return Whether the channelPresenceEvent field is set.
     */
    @java.lang.Override
    public boolean hasChannelPresenceEvent() {
      return messageCase_ == 10;
    }
    /**
     * <pre>
     * Presence update for a particular realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelPresenceEvent channel_presence_event = 10 [json_name = "channelPresenceEvent"];</code>
     * @return The channelPresenceEvent.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.ChannelPresenceEvent getChannelPresenceEvent() {
      if (channelPresenceEventBuilder_ == null) {
        if (messageCase_ == 10) {
          return (com.heroiclabs.nakama.realtime.ChannelPresenceEvent) message_;
        }
        return com.heroiclabs.nakama.realtime.ChannelPresenceEvent.getDefaultInstance();
      } else {
        if (messageCase_ == 10) {
          return channelPresenceEventBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.realtime.ChannelPresenceEvent.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Presence update for a particular realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelPresenceEvent channel_presence_event = 10 [json_name = "channelPresenceEvent"];</code>
     */
    public Builder setChannelPresenceEvent(com.heroiclabs.nakama.realtime.ChannelPresenceEvent value) {
      if (channelPresenceEventBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        channelPresenceEventBuilder_.setMessage(value);
      }
      messageCase_ = 10;
      return this;
    }
    /**
     * <pre>
     * Presence update for a particular realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelPresenceEvent channel_presence_event = 10 [json_name = "channelPresenceEvent"];</code>
     */
    public Builder setChannelPresenceEvent(
        com.heroiclabs.nakama.realtime.ChannelPresenceEvent.Builder builderForValue) {
      if (channelPresenceEventBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        channelPresenceEventBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 10;
      return this;
    }
    /**
     * <pre>
     * Presence update for a particular realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelPresenceEvent channel_presence_event = 10 [json_name = "channelPresenceEvent"];</code>
     */
    public Builder mergeChannelPresenceEvent(com.heroiclabs.nakama.realtime.ChannelPresenceEvent value) {
      if (channelPresenceEventBuilder_ == null) {
        if (messageCase_ == 10 &&
            message_ != com.heroiclabs.nakama.realtime.ChannelPresenceEvent.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.realtime.ChannelPresenceEvent.newBuilder((com.heroiclabs.nakama.realtime.ChannelPresenceEvent) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 10) {
          channelPresenceEventBuilder_.mergeFrom(value);
        } else {
          channelPresenceEventBuilder_.setMessage(value);
        }
      }
      messageCase_ = 10;
      return this;
    }
    /**
     * <pre>
     * Presence update for a particular realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelPresenceEvent channel_presence_event = 10 [json_name = "channelPresenceEvent"];</code>
     */
    public Builder clearChannelPresenceEvent() {
      if (channelPresenceEventBuilder_ == null) {
        if (messageCase_ == 10) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 10) {
          messageCase_ = 0;
          message_ = null;
        }
        channelPresenceEventBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Presence update for a particular realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelPresenceEvent channel_presence_event = 10 [json_name = "channelPresenceEvent"];</code>
     */
    public com.heroiclabs.nakama.realtime.ChannelPresenceEvent.Builder getChannelPresenceEventBuilder() {
      return getChannelPresenceEventFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Presence update for a particular realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelPresenceEvent channel_presence_event = 10 [json_name = "channelPresenceEvent"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.ChannelPresenceEventOrBuilder getChannelPresenceEventOrBuilder() {
      if ((messageCase_ == 10) && (channelPresenceEventBuilder_ != null)) {
        return channelPresenceEventBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 10) {
          return (com.heroiclabs.nakama.realtime.ChannelPresenceEvent) message_;
        }
        return com.heroiclabs.nakama.realtime.ChannelPresenceEvent.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Presence update for a particular realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelPresenceEvent channel_presence_event = 10 [json_name = "channelPresenceEvent"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.ChannelPresenceEvent, com.heroiclabs.nakama.realtime.ChannelPresenceEvent.Builder, com.heroiclabs.nakama.realtime.ChannelPresenceEventOrBuilder> 
        getChannelPresenceEventFieldBuilder() {
      if (channelPresenceEventBuilder_ == null) {
        if (!(messageCase_ == 10)) {
          message_ = com.heroiclabs.nakama.realtime.ChannelPresenceEvent.getDefaultInstance();
        }
        channelPresenceEventBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.realtime.ChannelPresenceEvent, com.heroiclabs.nakama.realtime.ChannelPresenceEvent.Builder, com.heroiclabs.nakama.realtime.ChannelPresenceEventOrBuilder>(
                (com.heroiclabs.nakama.realtime.ChannelPresenceEvent) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 10;
      onChanged();
      return channelPresenceEventBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.Error, com.heroiclabs.nakama.realtime.Error.Builder, com.heroiclabs.nakama.realtime.ErrorOrBuilder> errorBuilder_;
    /**
     * <pre>
     * Describes an error which occurred on the server.
     * </pre>
     *
     * <code>.nakama.realtime.Error error = 11 [json_name = "error"];</code>
     * @return Whether the error field is set.
     */
    @java.lang.Override
    public boolean hasError() {
      return messageCase_ == 11;
    }
    /**
     * <pre>
     * Describes an error which occurred on the server.
     * </pre>
     *
     * <code>.nakama.realtime.Error error = 11 [json_name = "error"];</code>
     * @return The error.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.Error getError() {
      if (errorBuilder_ == null) {
        if (messageCase_ == 11) {
          return (com.heroiclabs.nakama.realtime.Error) message_;
        }
        return com.heroiclabs.nakama.realtime.Error.getDefaultInstance();
      } else {
        if (messageCase_ == 11) {
          return errorBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.realtime.Error.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Describes an error which occurred on the server.
     * </pre>
     *
     * <code>.nakama.realtime.Error error = 11 [json_name = "error"];</code>
     */
    public Builder setError(com.heroiclabs.nakama.realtime.Error value) {
      if (errorBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        errorBuilder_.setMessage(value);
      }
      messageCase_ = 11;
      return this;
    }
    /**
     * <pre>
     * Describes an error which occurred on the server.
     * </pre>
     *
     * <code>.nakama.realtime.Error error = 11 [json_name = "error"];</code>
     */
    public Builder setError(
        com.heroiclabs.nakama.realtime.Error.Builder builderForValue) {
      if (errorBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        errorBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 11;
      return this;
    }
    /**
     * <pre>
     * Describes an error which occurred on the server.
     * </pre>
     *
     * <code>.nakama.realtime.Error error = 11 [json_name = "error"];</code>
     */
    public Builder mergeError(com.heroiclabs.nakama.realtime.Error value) {
      if (errorBuilder_ == null) {
        if (messageCase_ == 11 &&
            message_ != com.heroiclabs.nakama.realtime.Error.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.realtime.Error.newBuilder((com.heroiclabs.nakama.realtime.Error) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 11) {
          errorBuilder_.mergeFrom(value);
        } else {
          errorBuilder_.setMessage(value);
        }
      }
      messageCase_ = 11;
      return this;
    }
    /**
     * <pre>
     * Describes an error which occurred on the server.
     * </pre>
     *
     * <code>.nakama.realtime.Error error = 11 [json_name = "error"];</code>
     */
    public Builder clearError() {
      if (errorBuilder_ == null) {
        if (messageCase_ == 11) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 11) {
          messageCase_ = 0;
          message_ = null;
        }
        errorBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Describes an error which occurred on the server.
     * </pre>
     *
     * <code>.nakama.realtime.Error error = 11 [json_name = "error"];</code>
     */
    public com.heroiclabs.nakama.realtime.Error.Builder getErrorBuilder() {
      return getErrorFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Describes an error which occurred on the server.
     * </pre>
     *
     * <code>.nakama.realtime.Error error = 11 [json_name = "error"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.ErrorOrBuilder getErrorOrBuilder() {
      if ((messageCase_ == 11) && (errorBuilder_ != null)) {
        return errorBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 11) {
          return (com.heroiclabs.nakama.realtime.Error) message_;
        }
        return com.heroiclabs.nakama.realtime.Error.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Describes an error which occurred on the server.
     * </pre>
     *
     * <code>.nakama.realtime.Error error = 11 [json_name = "error"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.Error, com.heroiclabs.nakama.realtime.Error.Builder, com.heroiclabs.nakama.realtime.ErrorOrBuilder> 
        getErrorFieldBuilder() {
      if (errorBuilder_ == null) {
        if (!(messageCase_ == 11)) {
          message_ = com.heroiclabs.nakama.realtime.Error.getDefaultInstance();
        }
        errorBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.realtime.Error, com.heroiclabs.nakama.realtime.Error.Builder, com.heroiclabs.nakama.realtime.ErrorOrBuilder>(
                (com.heroiclabs.nakama.realtime.Error) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 11;
      onChanged();
      return errorBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.Match, com.heroiclabs.nakama.realtime.Match.Builder, com.heroiclabs.nakama.realtime.MatchOrBuilder> matchBuilder_;
    /**
     * <pre>
     * Incoming information about a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.Match match = 12 [json_name = "match"];</code>
     * @return Whether the match field is set.
     */
    @java.lang.Override
    public boolean hasMatch() {
      return messageCase_ == 12;
    }
    /**
     * <pre>
     * Incoming information about a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.Match match = 12 [json_name = "match"];</code>
     * @return The match.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.Match getMatch() {
      if (matchBuilder_ == null) {
        if (messageCase_ == 12) {
          return (com.heroiclabs.nakama.realtime.Match) message_;
        }
        return com.heroiclabs.nakama.realtime.Match.getDefaultInstance();
      } else {
        if (messageCase_ == 12) {
          return matchBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.realtime.Match.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Incoming information about a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.Match match = 12 [json_name = "match"];</code>
     */
    public Builder setMatch(com.heroiclabs.nakama.realtime.Match value) {
      if (matchBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        matchBuilder_.setMessage(value);
      }
      messageCase_ = 12;
      return this;
    }
    /**
     * <pre>
     * Incoming information about a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.Match match = 12 [json_name = "match"];</code>
     */
    public Builder setMatch(
        com.heroiclabs.nakama.realtime.Match.Builder builderForValue) {
      if (matchBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        matchBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 12;
      return this;
    }
    /**
     * <pre>
     * Incoming information about a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.Match match = 12 [json_name = "match"];</code>
     */
    public Builder mergeMatch(com.heroiclabs.nakama.realtime.Match value) {
      if (matchBuilder_ == null) {
        if (messageCase_ == 12 &&
            message_ != com.heroiclabs.nakama.realtime.Match.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.realtime.Match.newBuilder((com.heroiclabs.nakama.realtime.Match) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 12) {
          matchBuilder_.mergeFrom(value);
        } else {
          matchBuilder_.setMessage(value);
        }
      }
      messageCase_ = 12;
      return this;
    }
    /**
     * <pre>
     * Incoming information about a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.Match match = 12 [json_name = "match"];</code>
     */
    public Builder clearMatch() {
      if (matchBuilder_ == null) {
        if (messageCase_ == 12) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 12) {
          messageCase_ = 0;
          message_ = null;
        }
        matchBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Incoming information about a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.Match match = 12 [json_name = "match"];</code>
     */
    public com.heroiclabs.nakama.realtime.Match.Builder getMatchBuilder() {
      return getMatchFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Incoming information about a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.Match match = 12 [json_name = "match"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.MatchOrBuilder getMatchOrBuilder() {
      if ((messageCase_ == 12) && (matchBuilder_ != null)) {
        return matchBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 12) {
          return (com.heroiclabs.nakama.realtime.Match) message_;
        }
        return com.heroiclabs.nakama.realtime.Match.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Incoming information about a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.Match match = 12 [json_name = "match"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.Match, com.heroiclabs.nakama.realtime.Match.Builder, com.heroiclabs.nakama.realtime.MatchOrBuilder> 
        getMatchFieldBuilder() {
      if (matchBuilder_ == null) {
        if (!(messageCase_ == 12)) {
          message_ = com.heroiclabs.nakama.realtime.Match.getDefaultInstance();
        }
        matchBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.realtime.Match, com.heroiclabs.nakama.realtime.Match.Builder, com.heroiclabs.nakama.realtime.MatchOrBuilder>(
                (com.heroiclabs.nakama.realtime.Match) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 12;
      onChanged();
      return matchBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.MatchCreate, com.heroiclabs.nakama.realtime.MatchCreate.Builder, com.heroiclabs.nakama.realtime.MatchCreateOrBuilder> matchCreateBuilder_;
    /**
     * <pre>
     * A client to server request to create a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchCreate match_create = 13 [json_name = "matchCreate"];</code>
     * @return Whether the matchCreate field is set.
     */
    @java.lang.Override
    public boolean hasMatchCreate() {
      return messageCase_ == 13;
    }
    /**
     * <pre>
     * A client to server request to create a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchCreate match_create = 13 [json_name = "matchCreate"];</code>
     * @return The matchCreate.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.MatchCreate getMatchCreate() {
      if (matchCreateBuilder_ == null) {
        if (messageCase_ == 13) {
          return (com.heroiclabs.nakama.realtime.MatchCreate) message_;
        }
        return com.heroiclabs.nakama.realtime.MatchCreate.getDefaultInstance();
      } else {
        if (messageCase_ == 13) {
          return matchCreateBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.realtime.MatchCreate.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A client to server request to create a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchCreate match_create = 13 [json_name = "matchCreate"];</code>
     */
    public Builder setMatchCreate(com.heroiclabs.nakama.realtime.MatchCreate value) {
      if (matchCreateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        matchCreateBuilder_.setMessage(value);
      }
      messageCase_ = 13;
      return this;
    }
    /**
     * <pre>
     * A client to server request to create a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchCreate match_create = 13 [json_name = "matchCreate"];</code>
     */
    public Builder setMatchCreate(
        com.heroiclabs.nakama.realtime.MatchCreate.Builder builderForValue) {
      if (matchCreateBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        matchCreateBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 13;
      return this;
    }
    /**
     * <pre>
     * A client to server request to create a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchCreate match_create = 13 [json_name = "matchCreate"];</code>
     */
    public Builder mergeMatchCreate(com.heroiclabs.nakama.realtime.MatchCreate value) {
      if (matchCreateBuilder_ == null) {
        if (messageCase_ == 13 &&
            message_ != com.heroiclabs.nakama.realtime.MatchCreate.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.realtime.MatchCreate.newBuilder((com.heroiclabs.nakama.realtime.MatchCreate) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 13) {
          matchCreateBuilder_.mergeFrom(value);
        } else {
          matchCreateBuilder_.setMessage(value);
        }
      }
      messageCase_ = 13;
      return this;
    }
    /**
     * <pre>
     * A client to server request to create a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchCreate match_create = 13 [json_name = "matchCreate"];</code>
     */
    public Builder clearMatchCreate() {
      if (matchCreateBuilder_ == null) {
        if (messageCase_ == 13) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 13) {
          messageCase_ = 0;
          message_ = null;
        }
        matchCreateBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * A client to server request to create a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchCreate match_create = 13 [json_name = "matchCreate"];</code>
     */
    public com.heroiclabs.nakama.realtime.MatchCreate.Builder getMatchCreateBuilder() {
      return getMatchCreateFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * A client to server request to create a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchCreate match_create = 13 [json_name = "matchCreate"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.MatchCreateOrBuilder getMatchCreateOrBuilder() {
      if ((messageCase_ == 13) && (matchCreateBuilder_ != null)) {
        return matchCreateBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 13) {
          return (com.heroiclabs.nakama.realtime.MatchCreate) message_;
        }
        return com.heroiclabs.nakama.realtime.MatchCreate.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A client to server request to create a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchCreate match_create = 13 [json_name = "matchCreate"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.MatchCreate, com.heroiclabs.nakama.realtime.MatchCreate.Builder, com.heroiclabs.nakama.realtime.MatchCreateOrBuilder> 
        getMatchCreateFieldBuilder() {
      if (matchCreateBuilder_ == null) {
        if (!(messageCase_ == 13)) {
          message_ = com.heroiclabs.nakama.realtime.MatchCreate.getDefaultInstance();
        }
        matchCreateBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.realtime.MatchCreate, com.heroiclabs.nakama.realtime.MatchCreate.Builder, com.heroiclabs.nakama.realtime.MatchCreateOrBuilder>(
                (com.heroiclabs.nakama.realtime.MatchCreate) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 13;
      onChanged();
      return matchCreateBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.MatchData, com.heroiclabs.nakama.realtime.MatchData.Builder, com.heroiclabs.nakama.realtime.MatchDataOrBuilder> matchDataBuilder_;
    /**
     * <pre>
     * Incoming realtime match data delivered from the server.
     * </pre>
     *
     * <code>.nakama.realtime.MatchData match_data = 14 [json_name = "matchData"];</code>
     * @return Whether the matchData field is set.
     */
    @java.lang.Override
    public boolean hasMatchData() {
      return messageCase_ == 14;
    }
    /**
     * <pre>
     * Incoming realtime match data delivered from the server.
     * </pre>
     *
     * <code>.nakama.realtime.MatchData match_data = 14 [json_name = "matchData"];</code>
     * @return The matchData.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.MatchData getMatchData() {
      if (matchDataBuilder_ == null) {
        if (messageCase_ == 14) {
          return (com.heroiclabs.nakama.realtime.MatchData) message_;
        }
        return com.heroiclabs.nakama.realtime.MatchData.getDefaultInstance();
      } else {
        if (messageCase_ == 14) {
          return matchDataBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.realtime.MatchData.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Incoming realtime match data delivered from the server.
     * </pre>
     *
     * <code>.nakama.realtime.MatchData match_data = 14 [json_name = "matchData"];</code>
     */
    public Builder setMatchData(com.heroiclabs.nakama.realtime.MatchData value) {
      if (matchDataBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        matchDataBuilder_.setMessage(value);
      }
      messageCase_ = 14;
      return this;
    }
    /**
     * <pre>
     * Incoming realtime match data delivered from the server.
     * </pre>
     *
     * <code>.nakama.realtime.MatchData match_data = 14 [json_name = "matchData"];</code>
     */
    public Builder setMatchData(
        com.heroiclabs.nakama.realtime.MatchData.Builder builderForValue) {
      if (matchDataBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        matchDataBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 14;
      return this;
    }
    /**
     * <pre>
     * Incoming realtime match data delivered from the server.
     * </pre>
     *
     * <code>.nakama.realtime.MatchData match_data = 14 [json_name = "matchData"];</code>
     */
    public Builder mergeMatchData(com.heroiclabs.nakama.realtime.MatchData value) {
      if (matchDataBuilder_ == null) {
        if (messageCase_ == 14 &&
            message_ != com.heroiclabs.nakama.realtime.MatchData.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.realtime.MatchData.newBuilder((com.heroiclabs.nakama.realtime.MatchData) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 14) {
          matchDataBuilder_.mergeFrom(value);
        } else {
          matchDataBuilder_.setMessage(value);
        }
      }
      messageCase_ = 14;
      return this;
    }
    /**
     * <pre>
     * Incoming realtime match data delivered from the server.
     * </pre>
     *
     * <code>.nakama.realtime.MatchData match_data = 14 [json_name = "matchData"];</code>
     */
    public Builder clearMatchData() {
      if (matchDataBuilder_ == null) {
        if (messageCase_ == 14) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 14) {
          messageCase_ = 0;
          message_ = null;
        }
        matchDataBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Incoming realtime match data delivered from the server.
     * </pre>
     *
     * <code>.nakama.realtime.MatchData match_data = 14 [json_name = "matchData"];</code>
     */
    public com.heroiclabs.nakama.realtime.MatchData.Builder getMatchDataBuilder() {
      return getMatchDataFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Incoming realtime match data delivered from the server.
     * </pre>
     *
     * <code>.nakama.realtime.MatchData match_data = 14 [json_name = "matchData"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.MatchDataOrBuilder getMatchDataOrBuilder() {
      if ((messageCase_ == 14) && (matchDataBuilder_ != null)) {
        return matchDataBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 14) {
          return (com.heroiclabs.nakama.realtime.MatchData) message_;
        }
        return com.heroiclabs.nakama.realtime.MatchData.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Incoming realtime match data delivered from the server.
     * </pre>
     *
     * <code>.nakama.realtime.MatchData match_data = 14 [json_name = "matchData"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.MatchData, com.heroiclabs.nakama.realtime.MatchData.Builder, com.heroiclabs.nakama.realtime.MatchDataOrBuilder> 
        getMatchDataFieldBuilder() {
      if (matchDataBuilder_ == null) {
        if (!(messageCase_ == 14)) {
          message_ = com.heroiclabs.nakama.realtime.MatchData.getDefaultInstance();
        }
        matchDataBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.realtime.MatchData, com.heroiclabs.nakama.realtime.MatchData.Builder, com.heroiclabs.nakama.realtime.MatchDataOrBuilder>(
                (com.heroiclabs.nakama.realtime.MatchData) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 14;
      onChanged();
      return matchDataBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.MatchDataSend, com.heroiclabs.nakama.realtime.MatchDataSend.Builder, com.heroiclabs.nakama.realtime.MatchDataSendOrBuilder> matchDataSendBuilder_;
    /**
     * <pre>
     * A client to server request to send data to a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchDataSend match_data_send = 15 [json_name = "matchDataSend"];</code>
     * @return Whether the matchDataSend field is set.
     */
    @java.lang.Override
    public boolean hasMatchDataSend() {
      return messageCase_ == 15;
    }
    /**
     * <pre>
     * A client to server request to send data to a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchDataSend match_data_send = 15 [json_name = "matchDataSend"];</code>
     * @return The matchDataSend.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.MatchDataSend getMatchDataSend() {
      if (matchDataSendBuilder_ == null) {
        if (messageCase_ == 15) {
          return (com.heroiclabs.nakama.realtime.MatchDataSend) message_;
        }
        return com.heroiclabs.nakama.realtime.MatchDataSend.getDefaultInstance();
      } else {
        if (messageCase_ == 15) {
          return matchDataSendBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.realtime.MatchDataSend.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A client to server request to send data to a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchDataSend match_data_send = 15 [json_name = "matchDataSend"];</code>
     */
    public Builder setMatchDataSend(com.heroiclabs.nakama.realtime.MatchDataSend value) {
      if (matchDataSendBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        matchDataSendBuilder_.setMessage(value);
      }
      messageCase_ = 15;
      return this;
    }
    /**
     * <pre>
     * A client to server request to send data to a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchDataSend match_data_send = 15 [json_name = "matchDataSend"];</code>
     */
    public Builder setMatchDataSend(
        com.heroiclabs.nakama.realtime.MatchDataSend.Builder builderForValue) {
      if (matchDataSendBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        matchDataSendBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 15;
      return this;
    }
    /**
     * <pre>
     * A client to server request to send data to a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchDataSend match_data_send = 15 [json_name = "matchDataSend"];</code>
     */
    public Builder mergeMatchDataSend(com.heroiclabs.nakama.realtime.MatchDataSend value) {
      if (matchDataSendBuilder_ == null) {
        if (messageCase_ == 15 &&
            message_ != com.heroiclabs.nakama.realtime.MatchDataSend.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.realtime.MatchDataSend.newBuilder((com.heroiclabs.nakama.realtime.MatchDataSend) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 15) {
          matchDataSendBuilder_.mergeFrom(value);
        } else {
          matchDataSendBuilder_.setMessage(value);
        }
      }
      messageCase_ = 15;
      return this;
    }
    /**
     * <pre>
     * A client to server request to send data to a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchDataSend match_data_send = 15 [json_name = "matchDataSend"];</code>
     */
    public Builder clearMatchDataSend() {
      if (matchDataSendBuilder_ == null) {
        if (messageCase_ == 15) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 15) {
          messageCase_ = 0;
          message_ = null;
        }
        matchDataSendBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * A client to server request to send data to a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchDataSend match_data_send = 15 [json_name = "matchDataSend"];</code>
     */
    public com.heroiclabs.nakama.realtime.MatchDataSend.Builder getMatchDataSendBuilder() {
      return getMatchDataSendFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * A client to server request to send data to a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchDataSend match_data_send = 15 [json_name = "matchDataSend"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.MatchDataSendOrBuilder getMatchDataSendOrBuilder() {
      if ((messageCase_ == 15) && (matchDataSendBuilder_ != null)) {
        return matchDataSendBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 15) {
          return (com.heroiclabs.nakama.realtime.MatchDataSend) message_;
        }
        return com.heroiclabs.nakama.realtime.MatchDataSend.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A client to server request to send data to a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchDataSend match_data_send = 15 [json_name = "matchDataSend"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.MatchDataSend, com.heroiclabs.nakama.realtime.MatchDataSend.Builder, com.heroiclabs.nakama.realtime.MatchDataSendOrBuilder> 
        getMatchDataSendFieldBuilder() {
      if (matchDataSendBuilder_ == null) {
        if (!(messageCase_ == 15)) {
          message_ = com.heroiclabs.nakama.realtime.MatchDataSend.getDefaultInstance();
        }
        matchDataSendBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.realtime.MatchDataSend, com.heroiclabs.nakama.realtime.MatchDataSend.Builder, com.heroiclabs.nakama.realtime.MatchDataSendOrBuilder>(
                (com.heroiclabs.nakama.realtime.MatchDataSend) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 15;
      onChanged();
      return matchDataSendBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.MatchJoin, com.heroiclabs.nakama.realtime.MatchJoin.Builder, com.heroiclabs.nakama.realtime.MatchJoinOrBuilder> matchJoinBuilder_;
    /**
     * <pre>
     * A client to server request to join a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchJoin match_join = 16 [json_name = "matchJoin"];</code>
     * @return Whether the matchJoin field is set.
     */
    @java.lang.Override
    public boolean hasMatchJoin() {
      return messageCase_ == 16;
    }
    /**
     * <pre>
     * A client to server request to join a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchJoin match_join = 16 [json_name = "matchJoin"];</code>
     * @return The matchJoin.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.MatchJoin getMatchJoin() {
      if (matchJoinBuilder_ == null) {
        if (messageCase_ == 16) {
          return (com.heroiclabs.nakama.realtime.MatchJoin) message_;
        }
        return com.heroiclabs.nakama.realtime.MatchJoin.getDefaultInstance();
      } else {
        if (messageCase_ == 16) {
          return matchJoinBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.realtime.MatchJoin.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A client to server request to join a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchJoin match_join = 16 [json_name = "matchJoin"];</code>
     */
    public Builder setMatchJoin(com.heroiclabs.nakama.realtime.MatchJoin value) {
      if (matchJoinBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        matchJoinBuilder_.setMessage(value);
      }
      messageCase_ = 16;
      return this;
    }
    /**
     * <pre>
     * A client to server request to join a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchJoin match_join = 16 [json_name = "matchJoin"];</code>
     */
    public Builder setMatchJoin(
        com.heroiclabs.nakama.realtime.MatchJoin.Builder builderForValue) {
      if (matchJoinBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        matchJoinBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 16;
      return this;
    }
    /**
     * <pre>
     * A client to server request to join a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchJoin match_join = 16 [json_name = "matchJoin"];</code>
     */
    public Builder mergeMatchJoin(com.heroiclabs.nakama.realtime.MatchJoin value) {
      if (matchJoinBuilder_ == null) {
        if (messageCase_ == 16 &&
            message_ != com.heroiclabs.nakama.realtime.MatchJoin.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.realtime.MatchJoin.newBuilder((com.heroiclabs.nakama.realtime.MatchJoin) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 16) {
          matchJoinBuilder_.mergeFrom(value);
        } else {
          matchJoinBuilder_.setMessage(value);
        }
      }
      messageCase_ = 16;
      return this;
    }
    /**
     * <pre>
     * A client to server request to join a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchJoin match_join = 16 [json_name = "matchJoin"];</code>
     */
    public Builder clearMatchJoin() {
      if (matchJoinBuilder_ == null) {
        if (messageCase_ == 16) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 16) {
          messageCase_ = 0;
          message_ = null;
        }
        matchJoinBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * A client to server request to join a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchJoin match_join = 16 [json_name = "matchJoin"];</code>
     */
    public com.heroiclabs.nakama.realtime.MatchJoin.Builder getMatchJoinBuilder() {
      return getMatchJoinFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * A client to server request to join a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchJoin match_join = 16 [json_name = "matchJoin"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.MatchJoinOrBuilder getMatchJoinOrBuilder() {
      if ((messageCase_ == 16) && (matchJoinBuilder_ != null)) {
        return matchJoinBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 16) {
          return (com.heroiclabs.nakama.realtime.MatchJoin) message_;
        }
        return com.heroiclabs.nakama.realtime.MatchJoin.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A client to server request to join a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchJoin match_join = 16 [json_name = "matchJoin"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.MatchJoin, com.heroiclabs.nakama.realtime.MatchJoin.Builder, com.heroiclabs.nakama.realtime.MatchJoinOrBuilder> 
        getMatchJoinFieldBuilder() {
      if (matchJoinBuilder_ == null) {
        if (!(messageCase_ == 16)) {
          message_ = com.heroiclabs.nakama.realtime.MatchJoin.getDefaultInstance();
        }
        matchJoinBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.realtime.MatchJoin, com.heroiclabs.nakama.realtime.MatchJoin.Builder, com.heroiclabs.nakama.realtime.MatchJoinOrBuilder>(
                (com.heroiclabs.nakama.realtime.MatchJoin) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 16;
      onChanged();
      return matchJoinBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.MatchLeave, com.heroiclabs.nakama.realtime.MatchLeave.Builder, com.heroiclabs.nakama.realtime.MatchLeaveOrBuilder> matchLeaveBuilder_;
    /**
     * <pre>
     * A client to server request to leave a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchLeave match_leave = 17 [json_name = "matchLeave"];</code>
     * @return Whether the matchLeave field is set.
     */
    @java.lang.Override
    public boolean hasMatchLeave() {
      return messageCase_ == 17;
    }
    /**
     * <pre>
     * A client to server request to leave a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchLeave match_leave = 17 [json_name = "matchLeave"];</code>
     * @return The matchLeave.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.MatchLeave getMatchLeave() {
      if (matchLeaveBuilder_ == null) {
        if (messageCase_ == 17) {
          return (com.heroiclabs.nakama.realtime.MatchLeave) message_;
        }
        return com.heroiclabs.nakama.realtime.MatchLeave.getDefaultInstance();
      } else {
        if (messageCase_ == 17) {
          return matchLeaveBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.realtime.MatchLeave.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A client to server request to leave a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchLeave match_leave = 17 [json_name = "matchLeave"];</code>
     */
    public Builder setMatchLeave(com.heroiclabs.nakama.realtime.MatchLeave value) {
      if (matchLeaveBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        matchLeaveBuilder_.setMessage(value);
      }
      messageCase_ = 17;
      return this;
    }
    /**
     * <pre>
     * A client to server request to leave a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchLeave match_leave = 17 [json_name = "matchLeave"];</code>
     */
    public Builder setMatchLeave(
        com.heroiclabs.nakama.realtime.MatchLeave.Builder builderForValue) {
      if (matchLeaveBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        matchLeaveBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 17;
      return this;
    }
    /**
     * <pre>
     * A client to server request to leave a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchLeave match_leave = 17 [json_name = "matchLeave"];</code>
     */
    public Builder mergeMatchLeave(com.heroiclabs.nakama.realtime.MatchLeave value) {
      if (matchLeaveBuilder_ == null) {
        if (messageCase_ == 17 &&
            message_ != com.heroiclabs.nakama.realtime.MatchLeave.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.realtime.MatchLeave.newBuilder((com.heroiclabs.nakama.realtime.MatchLeave) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 17) {
          matchLeaveBuilder_.mergeFrom(value);
        } else {
          matchLeaveBuilder_.setMessage(value);
        }
      }
      messageCase_ = 17;
      return this;
    }
    /**
     * <pre>
     * A client to server request to leave a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchLeave match_leave = 17 [json_name = "matchLeave"];</code>
     */
    public Builder clearMatchLeave() {
      if (matchLeaveBuilder_ == null) {
        if (messageCase_ == 17) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 17) {
          messageCase_ = 0;
          message_ = null;
        }
        matchLeaveBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * A client to server request to leave a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchLeave match_leave = 17 [json_name = "matchLeave"];</code>
     */
    public com.heroiclabs.nakama.realtime.MatchLeave.Builder getMatchLeaveBuilder() {
      return getMatchLeaveFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * A client to server request to leave a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchLeave match_leave = 17 [json_name = "matchLeave"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.MatchLeaveOrBuilder getMatchLeaveOrBuilder() {
      if ((messageCase_ == 17) && (matchLeaveBuilder_ != null)) {
        return matchLeaveBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 17) {
          return (com.heroiclabs.nakama.realtime.MatchLeave) message_;
        }
        return com.heroiclabs.nakama.realtime.MatchLeave.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A client to server request to leave a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchLeave match_leave = 17 [json_name = "matchLeave"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.MatchLeave, com.heroiclabs.nakama.realtime.MatchLeave.Builder, com.heroiclabs.nakama.realtime.MatchLeaveOrBuilder> 
        getMatchLeaveFieldBuilder() {
      if (matchLeaveBuilder_ == null) {
        if (!(messageCase_ == 17)) {
          message_ = com.heroiclabs.nakama.realtime.MatchLeave.getDefaultInstance();
        }
        matchLeaveBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.realtime.MatchLeave, com.heroiclabs.nakama.realtime.MatchLeave.Builder, com.heroiclabs.nakama.realtime.MatchLeaveOrBuilder>(
                (com.heroiclabs.nakama.realtime.MatchLeave) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 17;
      onChanged();
      return matchLeaveBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.MatchPresenceEvent, com.heroiclabs.nakama.realtime.MatchPresenceEvent.Builder, com.heroiclabs.nakama.realtime.MatchPresenceEventOrBuilder> matchPresenceEventBuilder_;
    /**
     * <pre>
     * Presence update for a particular realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchPresenceEvent match_presence_event = 18 [json_name = "matchPresenceEvent"];</code>
     * @return Whether the matchPresenceEvent field is set.
     */
    @java.lang.Override
    public boolean hasMatchPresenceEvent() {
      return messageCase_ == 18;
    }
    /**
     * <pre>
     * Presence update for a particular realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchPresenceEvent match_presence_event = 18 [json_name = "matchPresenceEvent"];</code>
     * @return The matchPresenceEvent.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.MatchPresenceEvent getMatchPresenceEvent() {
      if (matchPresenceEventBuilder_ == null) {
        if (messageCase_ == 18) {
          return (com.heroiclabs.nakama.realtime.MatchPresenceEvent) message_;
        }
        return com.heroiclabs.nakama.realtime.MatchPresenceEvent.getDefaultInstance();
      } else {
        if (messageCase_ == 18) {
          return matchPresenceEventBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.realtime.MatchPresenceEvent.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Presence update for a particular realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchPresenceEvent match_presence_event = 18 [json_name = "matchPresenceEvent"];</code>
     */
    public Builder setMatchPresenceEvent(com.heroiclabs.nakama.realtime.MatchPresenceEvent value) {
      if (matchPresenceEventBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        matchPresenceEventBuilder_.setMessage(value);
      }
      messageCase_ = 18;
      return this;
    }
    /**
     * <pre>
     * Presence update for a particular realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchPresenceEvent match_presence_event = 18 [json_name = "matchPresenceEvent"];</code>
     */
    public Builder setMatchPresenceEvent(
        com.heroiclabs.nakama.realtime.MatchPresenceEvent.Builder builderForValue) {
      if (matchPresenceEventBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        matchPresenceEventBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 18;
      return this;
    }
    /**
     * <pre>
     * Presence update for a particular realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchPresenceEvent match_presence_event = 18 [json_name = "matchPresenceEvent"];</code>
     */
    public Builder mergeMatchPresenceEvent(com.heroiclabs.nakama.realtime.MatchPresenceEvent value) {
      if (matchPresenceEventBuilder_ == null) {
        if (messageCase_ == 18 &&
            message_ != com.heroiclabs.nakama.realtime.MatchPresenceEvent.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.realtime.MatchPresenceEvent.newBuilder((com.heroiclabs.nakama.realtime.MatchPresenceEvent) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 18) {
          matchPresenceEventBuilder_.mergeFrom(value);
        } else {
          matchPresenceEventBuilder_.setMessage(value);
        }
      }
      messageCase_ = 18;
      return this;
    }
    /**
     * <pre>
     * Presence update for a particular realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchPresenceEvent match_presence_event = 18 [json_name = "matchPresenceEvent"];</code>
     */
    public Builder clearMatchPresenceEvent() {
      if (matchPresenceEventBuilder_ == null) {
        if (messageCase_ == 18) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 18) {
          messageCase_ = 0;
          message_ = null;
        }
        matchPresenceEventBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Presence update for a particular realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchPresenceEvent match_presence_event = 18 [json_name = "matchPresenceEvent"];</code>
     */
    public com.heroiclabs.nakama.realtime.MatchPresenceEvent.Builder getMatchPresenceEventBuilder() {
      return getMatchPresenceEventFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Presence update for a particular realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchPresenceEvent match_presence_event = 18 [json_name = "matchPresenceEvent"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.MatchPresenceEventOrBuilder getMatchPresenceEventOrBuilder() {
      if ((messageCase_ == 18) && (matchPresenceEventBuilder_ != null)) {
        return matchPresenceEventBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 18) {
          return (com.heroiclabs.nakama.realtime.MatchPresenceEvent) message_;
        }
        return com.heroiclabs.nakama.realtime.MatchPresenceEvent.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Presence update for a particular realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchPresenceEvent match_presence_event = 18 [json_name = "matchPresenceEvent"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.MatchPresenceEvent, com.heroiclabs.nakama.realtime.MatchPresenceEvent.Builder, com.heroiclabs.nakama.realtime.MatchPresenceEventOrBuilder> 
        getMatchPresenceEventFieldBuilder() {
      if (matchPresenceEventBuilder_ == null) {
        if (!(messageCase_ == 18)) {
          message_ = com.heroiclabs.nakama.realtime.MatchPresenceEvent.getDefaultInstance();
        }
        matchPresenceEventBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.realtime.MatchPresenceEvent, com.heroiclabs.nakama.realtime.MatchPresenceEvent.Builder, com.heroiclabs.nakama.realtime.MatchPresenceEventOrBuilder>(
                (com.heroiclabs.nakama.realtime.MatchPresenceEvent) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 18;
      onChanged();
      return matchPresenceEventBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.MatchmakerAdd, com.heroiclabs.nakama.realtime.MatchmakerAdd.Builder, com.heroiclabs.nakama.realtime.MatchmakerAddOrBuilder> matchmakerAddBuilder_;
    /**
     * <pre>
     * Submit a new matchmaking process request.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerAdd matchmaker_add = 19 [json_name = "matchmakerAdd"];</code>
     * @return Whether the matchmakerAdd field is set.
     */
    @java.lang.Override
    public boolean hasMatchmakerAdd() {
      return messageCase_ == 19;
    }
    /**
     * <pre>
     * Submit a new matchmaking process request.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerAdd matchmaker_add = 19 [json_name = "matchmakerAdd"];</code>
     * @return The matchmakerAdd.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.MatchmakerAdd getMatchmakerAdd() {
      if (matchmakerAddBuilder_ == null) {
        if (messageCase_ == 19) {
          return (com.heroiclabs.nakama.realtime.MatchmakerAdd) message_;
        }
        return com.heroiclabs.nakama.realtime.MatchmakerAdd.getDefaultInstance();
      } else {
        if (messageCase_ == 19) {
          return matchmakerAddBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.realtime.MatchmakerAdd.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Submit a new matchmaking process request.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerAdd matchmaker_add = 19 [json_name = "matchmakerAdd"];</code>
     */
    public Builder setMatchmakerAdd(com.heroiclabs.nakama.realtime.MatchmakerAdd value) {
      if (matchmakerAddBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        matchmakerAddBuilder_.setMessage(value);
      }
      messageCase_ = 19;
      return this;
    }
    /**
     * <pre>
     * Submit a new matchmaking process request.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerAdd matchmaker_add = 19 [json_name = "matchmakerAdd"];</code>
     */
    public Builder setMatchmakerAdd(
        com.heroiclabs.nakama.realtime.MatchmakerAdd.Builder builderForValue) {
      if (matchmakerAddBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        matchmakerAddBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 19;
      return this;
    }
    /**
     * <pre>
     * Submit a new matchmaking process request.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerAdd matchmaker_add = 19 [json_name = "matchmakerAdd"];</code>
     */
    public Builder mergeMatchmakerAdd(com.heroiclabs.nakama.realtime.MatchmakerAdd value) {
      if (matchmakerAddBuilder_ == null) {
        if (messageCase_ == 19 &&
            message_ != com.heroiclabs.nakama.realtime.MatchmakerAdd.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.realtime.MatchmakerAdd.newBuilder((com.heroiclabs.nakama.realtime.MatchmakerAdd) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 19) {
          matchmakerAddBuilder_.mergeFrom(value);
        } else {
          matchmakerAddBuilder_.setMessage(value);
        }
      }
      messageCase_ = 19;
      return this;
    }
    /**
     * <pre>
     * Submit a new matchmaking process request.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerAdd matchmaker_add = 19 [json_name = "matchmakerAdd"];</code>
     */
    public Builder clearMatchmakerAdd() {
      if (matchmakerAddBuilder_ == null) {
        if (messageCase_ == 19) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 19) {
          messageCase_ = 0;
          message_ = null;
        }
        matchmakerAddBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Submit a new matchmaking process request.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerAdd matchmaker_add = 19 [json_name = "matchmakerAdd"];</code>
     */
    public com.heroiclabs.nakama.realtime.MatchmakerAdd.Builder getMatchmakerAddBuilder() {
      return getMatchmakerAddFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Submit a new matchmaking process request.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerAdd matchmaker_add = 19 [json_name = "matchmakerAdd"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.MatchmakerAddOrBuilder getMatchmakerAddOrBuilder() {
      if ((messageCase_ == 19) && (matchmakerAddBuilder_ != null)) {
        return matchmakerAddBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 19) {
          return (com.heroiclabs.nakama.realtime.MatchmakerAdd) message_;
        }
        return com.heroiclabs.nakama.realtime.MatchmakerAdd.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Submit a new matchmaking process request.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerAdd matchmaker_add = 19 [json_name = "matchmakerAdd"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.MatchmakerAdd, com.heroiclabs.nakama.realtime.MatchmakerAdd.Builder, com.heroiclabs.nakama.realtime.MatchmakerAddOrBuilder> 
        getMatchmakerAddFieldBuilder() {
      if (matchmakerAddBuilder_ == null) {
        if (!(messageCase_ == 19)) {
          message_ = com.heroiclabs.nakama.realtime.MatchmakerAdd.getDefaultInstance();
        }
        matchmakerAddBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.realtime.MatchmakerAdd, com.heroiclabs.nakama.realtime.MatchmakerAdd.Builder, com.heroiclabs.nakama.realtime.MatchmakerAddOrBuilder>(
                (com.heroiclabs.nakama.realtime.MatchmakerAdd) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 19;
      onChanged();
      return matchmakerAddBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.MatchmakerMatched, com.heroiclabs.nakama.realtime.MatchmakerMatched.Builder, com.heroiclabs.nakama.realtime.MatchmakerMatchedOrBuilder> matchmakerMatchedBuilder_;
    /**
     * <pre>
     * A successful matchmaking result.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerMatched matchmaker_matched = 20 [json_name = "matchmakerMatched"];</code>
     * @return Whether the matchmakerMatched field is set.
     */
    @java.lang.Override
    public boolean hasMatchmakerMatched() {
      return messageCase_ == 20;
    }
    /**
     * <pre>
     * A successful matchmaking result.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerMatched matchmaker_matched = 20 [json_name = "matchmakerMatched"];</code>
     * @return The matchmakerMatched.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.MatchmakerMatched getMatchmakerMatched() {
      if (matchmakerMatchedBuilder_ == null) {
        if (messageCase_ == 20) {
          return (com.heroiclabs.nakama.realtime.MatchmakerMatched) message_;
        }
        return com.heroiclabs.nakama.realtime.MatchmakerMatched.getDefaultInstance();
      } else {
        if (messageCase_ == 20) {
          return matchmakerMatchedBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.realtime.MatchmakerMatched.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A successful matchmaking result.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerMatched matchmaker_matched = 20 [json_name = "matchmakerMatched"];</code>
     */
    public Builder setMatchmakerMatched(com.heroiclabs.nakama.realtime.MatchmakerMatched value) {
      if (matchmakerMatchedBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        matchmakerMatchedBuilder_.setMessage(value);
      }
      messageCase_ = 20;
      return this;
    }
    /**
     * <pre>
     * A successful matchmaking result.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerMatched matchmaker_matched = 20 [json_name = "matchmakerMatched"];</code>
     */
    public Builder setMatchmakerMatched(
        com.heroiclabs.nakama.realtime.MatchmakerMatched.Builder builderForValue) {
      if (matchmakerMatchedBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        matchmakerMatchedBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 20;
      return this;
    }
    /**
     * <pre>
     * A successful matchmaking result.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerMatched matchmaker_matched = 20 [json_name = "matchmakerMatched"];</code>
     */
    public Builder mergeMatchmakerMatched(com.heroiclabs.nakama.realtime.MatchmakerMatched value) {
      if (matchmakerMatchedBuilder_ == null) {
        if (messageCase_ == 20 &&
            message_ != com.heroiclabs.nakama.realtime.MatchmakerMatched.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.realtime.MatchmakerMatched.newBuilder((com.heroiclabs.nakama.realtime.MatchmakerMatched) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 20) {
          matchmakerMatchedBuilder_.mergeFrom(value);
        } else {
          matchmakerMatchedBuilder_.setMessage(value);
        }
      }
      messageCase_ = 20;
      return this;
    }
    /**
     * <pre>
     * A successful matchmaking result.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerMatched matchmaker_matched = 20 [json_name = "matchmakerMatched"];</code>
     */
    public Builder clearMatchmakerMatched() {
      if (matchmakerMatchedBuilder_ == null) {
        if (messageCase_ == 20) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 20) {
          messageCase_ = 0;
          message_ = null;
        }
        matchmakerMatchedBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * A successful matchmaking result.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerMatched matchmaker_matched = 20 [json_name = "matchmakerMatched"];</code>
     */
    public com.heroiclabs.nakama.realtime.MatchmakerMatched.Builder getMatchmakerMatchedBuilder() {
      return getMatchmakerMatchedFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * A successful matchmaking result.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerMatched matchmaker_matched = 20 [json_name = "matchmakerMatched"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.MatchmakerMatchedOrBuilder getMatchmakerMatchedOrBuilder() {
      if ((messageCase_ == 20) && (matchmakerMatchedBuilder_ != null)) {
        return matchmakerMatchedBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 20) {
          return (com.heroiclabs.nakama.realtime.MatchmakerMatched) message_;
        }
        return com.heroiclabs.nakama.realtime.MatchmakerMatched.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A successful matchmaking result.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerMatched matchmaker_matched = 20 [json_name = "matchmakerMatched"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.MatchmakerMatched, com.heroiclabs.nakama.realtime.MatchmakerMatched.Builder, com.heroiclabs.nakama.realtime.MatchmakerMatchedOrBuilder> 
        getMatchmakerMatchedFieldBuilder() {
      if (matchmakerMatchedBuilder_ == null) {
        if (!(messageCase_ == 20)) {
          message_ = com.heroiclabs.nakama.realtime.MatchmakerMatched.getDefaultInstance();
        }
        matchmakerMatchedBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.realtime.MatchmakerMatched, com.heroiclabs.nakama.realtime.MatchmakerMatched.Builder, com.heroiclabs.nakama.realtime.MatchmakerMatchedOrBuilder>(
                (com.heroiclabs.nakama.realtime.MatchmakerMatched) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 20;
      onChanged();
      return matchmakerMatchedBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.MatchmakerRemove, com.heroiclabs.nakama.realtime.MatchmakerRemove.Builder, com.heroiclabs.nakama.realtime.MatchmakerRemoveOrBuilder> matchmakerRemoveBuilder_;
    /**
     * <pre>
     * Cancel a matchmaking process using a ticket.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerRemove matchmaker_remove = 21 [json_name = "matchmakerRemove"];</code>
     * @return Whether the matchmakerRemove field is set.
     */
    @java.lang.Override
    public boolean hasMatchmakerRemove() {
      return messageCase_ == 21;
    }
    /**
     * <pre>
     * Cancel a matchmaking process using a ticket.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerRemove matchmaker_remove = 21 [json_name = "matchmakerRemove"];</code>
     * @return The matchmakerRemove.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.MatchmakerRemove getMatchmakerRemove() {
      if (matchmakerRemoveBuilder_ == null) {
        if (messageCase_ == 21) {
          return (com.heroiclabs.nakama.realtime.MatchmakerRemove) message_;
        }
        return com.heroiclabs.nakama.realtime.MatchmakerRemove.getDefaultInstance();
      } else {
        if (messageCase_ == 21) {
          return matchmakerRemoveBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.realtime.MatchmakerRemove.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Cancel a matchmaking process using a ticket.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerRemove matchmaker_remove = 21 [json_name = "matchmakerRemove"];</code>
     */
    public Builder setMatchmakerRemove(com.heroiclabs.nakama.realtime.MatchmakerRemove value) {
      if (matchmakerRemoveBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        matchmakerRemoveBuilder_.setMessage(value);
      }
      messageCase_ = 21;
      return this;
    }
    /**
     * <pre>
     * Cancel a matchmaking process using a ticket.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerRemove matchmaker_remove = 21 [json_name = "matchmakerRemove"];</code>
     */
    public Builder setMatchmakerRemove(
        com.heroiclabs.nakama.realtime.MatchmakerRemove.Builder builderForValue) {
      if (matchmakerRemoveBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        matchmakerRemoveBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 21;
      return this;
    }
    /**
     * <pre>
     * Cancel a matchmaking process using a ticket.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerRemove matchmaker_remove = 21 [json_name = "matchmakerRemove"];</code>
     */
    public Builder mergeMatchmakerRemove(com.heroiclabs.nakama.realtime.MatchmakerRemove value) {
      if (matchmakerRemoveBuilder_ == null) {
        if (messageCase_ == 21 &&
            message_ != com.heroiclabs.nakama.realtime.MatchmakerRemove.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.realtime.MatchmakerRemove.newBuilder((com.heroiclabs.nakama.realtime.MatchmakerRemove) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 21) {
          matchmakerRemoveBuilder_.mergeFrom(value);
        } else {
          matchmakerRemoveBuilder_.setMessage(value);
        }
      }
      messageCase_ = 21;
      return this;
    }
    /**
     * <pre>
     * Cancel a matchmaking process using a ticket.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerRemove matchmaker_remove = 21 [json_name = "matchmakerRemove"];</code>
     */
    public Builder clearMatchmakerRemove() {
      if (matchmakerRemoveBuilder_ == null) {
        if (messageCase_ == 21) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 21) {
          messageCase_ = 0;
          message_ = null;
        }
        matchmakerRemoveBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Cancel a matchmaking process using a ticket.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerRemove matchmaker_remove = 21 [json_name = "matchmakerRemove"];</code>
     */
    public com.heroiclabs.nakama.realtime.MatchmakerRemove.Builder getMatchmakerRemoveBuilder() {
      return getMatchmakerRemoveFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Cancel a matchmaking process using a ticket.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerRemove matchmaker_remove = 21 [json_name = "matchmakerRemove"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.MatchmakerRemoveOrBuilder getMatchmakerRemoveOrBuilder() {
      if ((messageCase_ == 21) && (matchmakerRemoveBuilder_ != null)) {
        return matchmakerRemoveBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 21) {
          return (com.heroiclabs.nakama.realtime.MatchmakerRemove) message_;
        }
        return com.heroiclabs.nakama.realtime.MatchmakerRemove.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Cancel a matchmaking process using a ticket.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerRemove matchmaker_remove = 21 [json_name = "matchmakerRemove"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.MatchmakerRemove, com.heroiclabs.nakama.realtime.MatchmakerRemove.Builder, com.heroiclabs.nakama.realtime.MatchmakerRemoveOrBuilder> 
        getMatchmakerRemoveFieldBuilder() {
      if (matchmakerRemoveBuilder_ == null) {
        if (!(messageCase_ == 21)) {
          message_ = com.heroiclabs.nakama.realtime.MatchmakerRemove.getDefaultInstance();
        }
        matchmakerRemoveBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.realtime.MatchmakerRemove, com.heroiclabs.nakama.realtime.MatchmakerRemove.Builder, com.heroiclabs.nakama.realtime.MatchmakerRemoveOrBuilder>(
                (com.heroiclabs.nakama.realtime.MatchmakerRemove) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 21;
      onChanged();
      return matchmakerRemoveBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.MatchmakerTicket, com.heroiclabs.nakama.realtime.MatchmakerTicket.Builder, com.heroiclabs.nakama.realtime.MatchmakerTicketOrBuilder> matchmakerTicketBuilder_;
    /**
     * <pre>
     * A response from starting a new matchmaking process.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerTicket matchmaker_ticket = 22 [json_name = "matchmakerTicket"];</code>
     * @return Whether the matchmakerTicket field is set.
     */
    @java.lang.Override
    public boolean hasMatchmakerTicket() {
      return messageCase_ == 22;
    }
    /**
     * <pre>
     * A response from starting a new matchmaking process.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerTicket matchmaker_ticket = 22 [json_name = "matchmakerTicket"];</code>
     * @return The matchmakerTicket.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.MatchmakerTicket getMatchmakerTicket() {
      if (matchmakerTicketBuilder_ == null) {
        if (messageCase_ == 22) {
          return (com.heroiclabs.nakama.realtime.MatchmakerTicket) message_;
        }
        return com.heroiclabs.nakama.realtime.MatchmakerTicket.getDefaultInstance();
      } else {
        if (messageCase_ == 22) {
          return matchmakerTicketBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.realtime.MatchmakerTicket.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A response from starting a new matchmaking process.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerTicket matchmaker_ticket = 22 [json_name = "matchmakerTicket"];</code>
     */
    public Builder setMatchmakerTicket(com.heroiclabs.nakama.realtime.MatchmakerTicket value) {
      if (matchmakerTicketBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        matchmakerTicketBuilder_.setMessage(value);
      }
      messageCase_ = 22;
      return this;
    }
    /**
     * <pre>
     * A response from starting a new matchmaking process.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerTicket matchmaker_ticket = 22 [json_name = "matchmakerTicket"];</code>
     */
    public Builder setMatchmakerTicket(
        com.heroiclabs.nakama.realtime.MatchmakerTicket.Builder builderForValue) {
      if (matchmakerTicketBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        matchmakerTicketBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 22;
      return this;
    }
    /**
     * <pre>
     * A response from starting a new matchmaking process.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerTicket matchmaker_ticket = 22 [json_name = "matchmakerTicket"];</code>
     */
    public Builder mergeMatchmakerTicket(com.heroiclabs.nakama.realtime.MatchmakerTicket value) {
      if (matchmakerTicketBuilder_ == null) {
        if (messageCase_ == 22 &&
            message_ != com.heroiclabs.nakama.realtime.MatchmakerTicket.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.realtime.MatchmakerTicket.newBuilder((com.heroiclabs.nakama.realtime.MatchmakerTicket) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 22) {
          matchmakerTicketBuilder_.mergeFrom(value);
        } else {
          matchmakerTicketBuilder_.setMessage(value);
        }
      }
      messageCase_ = 22;
      return this;
    }
    /**
     * <pre>
     * A response from starting a new matchmaking process.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerTicket matchmaker_ticket = 22 [json_name = "matchmakerTicket"];</code>
     */
    public Builder clearMatchmakerTicket() {
      if (matchmakerTicketBuilder_ == null) {
        if (messageCase_ == 22) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 22) {
          messageCase_ = 0;
          message_ = null;
        }
        matchmakerTicketBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * A response from starting a new matchmaking process.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerTicket matchmaker_ticket = 22 [json_name = "matchmakerTicket"];</code>
     */
    public com.heroiclabs.nakama.realtime.MatchmakerTicket.Builder getMatchmakerTicketBuilder() {
      return getMatchmakerTicketFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * A response from starting a new matchmaking process.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerTicket matchmaker_ticket = 22 [json_name = "matchmakerTicket"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.MatchmakerTicketOrBuilder getMatchmakerTicketOrBuilder() {
      if ((messageCase_ == 22) && (matchmakerTicketBuilder_ != null)) {
        return matchmakerTicketBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 22) {
          return (com.heroiclabs.nakama.realtime.MatchmakerTicket) message_;
        }
        return com.heroiclabs.nakama.realtime.MatchmakerTicket.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A response from starting a new matchmaking process.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerTicket matchmaker_ticket = 22 [json_name = "matchmakerTicket"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.MatchmakerTicket, com.heroiclabs.nakama.realtime.MatchmakerTicket.Builder, com.heroiclabs.nakama.realtime.MatchmakerTicketOrBuilder> 
        getMatchmakerTicketFieldBuilder() {
      if (matchmakerTicketBuilder_ == null) {
        if (!(messageCase_ == 22)) {
          message_ = com.heroiclabs.nakama.realtime.MatchmakerTicket.getDefaultInstance();
        }
        matchmakerTicketBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.realtime.MatchmakerTicket, com.heroiclabs.nakama.realtime.MatchmakerTicket.Builder, com.heroiclabs.nakama.realtime.MatchmakerTicketOrBuilder>(
                (com.heroiclabs.nakama.realtime.MatchmakerTicket) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 22;
      onChanged();
      return matchmakerTicketBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.Notifications, com.heroiclabs.nakama.realtime.Notifications.Builder, com.heroiclabs.nakama.realtime.NotificationsOrBuilder> notificationsBuilder_;
    /**
     * <pre>
     * Notifications send by the server.
     * </pre>
     *
     * <code>.nakama.realtime.Notifications notifications = 23 [json_name = "notifications"];</code>
     * @return Whether the notifications field is set.
     */
    @java.lang.Override
    public boolean hasNotifications() {
      return messageCase_ == 23;
    }
    /**
     * <pre>
     * Notifications send by the server.
     * </pre>
     *
     * <code>.nakama.realtime.Notifications notifications = 23 [json_name = "notifications"];</code>
     * @return The notifications.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.Notifications getNotifications() {
      if (notificationsBuilder_ == null) {
        if (messageCase_ == 23) {
          return (com.heroiclabs.nakama.realtime.Notifications) message_;
        }
        return com.heroiclabs.nakama.realtime.Notifications.getDefaultInstance();
      } else {
        if (messageCase_ == 23) {
          return notificationsBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.realtime.Notifications.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Notifications send by the server.
     * </pre>
     *
     * <code>.nakama.realtime.Notifications notifications = 23 [json_name = "notifications"];</code>
     */
    public Builder setNotifications(com.heroiclabs.nakama.realtime.Notifications value) {
      if (notificationsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        notificationsBuilder_.setMessage(value);
      }
      messageCase_ = 23;
      return this;
    }
    /**
     * <pre>
     * Notifications send by the server.
     * </pre>
     *
     * <code>.nakama.realtime.Notifications notifications = 23 [json_name = "notifications"];</code>
     */
    public Builder setNotifications(
        com.heroiclabs.nakama.realtime.Notifications.Builder builderForValue) {
      if (notificationsBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        notificationsBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 23;
      return this;
    }
    /**
     * <pre>
     * Notifications send by the server.
     * </pre>
     *
     * <code>.nakama.realtime.Notifications notifications = 23 [json_name = "notifications"];</code>
     */
    public Builder mergeNotifications(com.heroiclabs.nakama.realtime.Notifications value) {
      if (notificationsBuilder_ == null) {
        if (messageCase_ == 23 &&
            message_ != com.heroiclabs.nakama.realtime.Notifications.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.realtime.Notifications.newBuilder((com.heroiclabs.nakama.realtime.Notifications) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 23) {
          notificationsBuilder_.mergeFrom(value);
        } else {
          notificationsBuilder_.setMessage(value);
        }
      }
      messageCase_ = 23;
      return this;
    }
    /**
     * <pre>
     * Notifications send by the server.
     * </pre>
     *
     * <code>.nakama.realtime.Notifications notifications = 23 [json_name = "notifications"];</code>
     */
    public Builder clearNotifications() {
      if (notificationsBuilder_ == null) {
        if (messageCase_ == 23) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 23) {
          messageCase_ = 0;
          message_ = null;
        }
        notificationsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Notifications send by the server.
     * </pre>
     *
     * <code>.nakama.realtime.Notifications notifications = 23 [json_name = "notifications"];</code>
     */
    public com.heroiclabs.nakama.realtime.Notifications.Builder getNotificationsBuilder() {
      return getNotificationsFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Notifications send by the server.
     * </pre>
     *
     * <code>.nakama.realtime.Notifications notifications = 23 [json_name = "notifications"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.NotificationsOrBuilder getNotificationsOrBuilder() {
      if ((messageCase_ == 23) && (notificationsBuilder_ != null)) {
        return notificationsBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 23) {
          return (com.heroiclabs.nakama.realtime.Notifications) message_;
        }
        return com.heroiclabs.nakama.realtime.Notifications.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Notifications send by the server.
     * </pre>
     *
     * <code>.nakama.realtime.Notifications notifications = 23 [json_name = "notifications"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.Notifications, com.heroiclabs.nakama.realtime.Notifications.Builder, com.heroiclabs.nakama.realtime.NotificationsOrBuilder> 
        getNotificationsFieldBuilder() {
      if (notificationsBuilder_ == null) {
        if (!(messageCase_ == 23)) {
          message_ = com.heroiclabs.nakama.realtime.Notifications.getDefaultInstance();
        }
        notificationsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.realtime.Notifications, com.heroiclabs.nakama.realtime.Notifications.Builder, com.heroiclabs.nakama.realtime.NotificationsOrBuilder>(
                (com.heroiclabs.nakama.realtime.Notifications) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 23;
      onChanged();
      return notificationsBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.api.Rpc, com.heroiclabs.nakama.api.Rpc.Builder, com.heroiclabs.nakama.api.RpcOrBuilder> rpcBuilder_;
    /**
     * <pre>
     * RPC call or response.
     * </pre>
     *
     * <code>.nakama.api.Rpc rpc = 24 [json_name = "rpc"];</code>
     * @return Whether the rpc field is set.
     */
    @java.lang.Override
    public boolean hasRpc() {
      return messageCase_ == 24;
    }
    /**
     * <pre>
     * RPC call or response.
     * </pre>
     *
     * <code>.nakama.api.Rpc rpc = 24 [json_name = "rpc"];</code>
     * @return The rpc.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.api.Rpc getRpc() {
      if (rpcBuilder_ == null) {
        if (messageCase_ == 24) {
          return (com.heroiclabs.nakama.api.Rpc) message_;
        }
        return com.heroiclabs.nakama.api.Rpc.getDefaultInstance();
      } else {
        if (messageCase_ == 24) {
          return rpcBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.api.Rpc.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * RPC call or response.
     * </pre>
     *
     * <code>.nakama.api.Rpc rpc = 24 [json_name = "rpc"];</code>
     */
    public Builder setRpc(com.heroiclabs.nakama.api.Rpc value) {
      if (rpcBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        rpcBuilder_.setMessage(value);
      }
      messageCase_ = 24;
      return this;
    }
    /**
     * <pre>
     * RPC call or response.
     * </pre>
     *
     * <code>.nakama.api.Rpc rpc = 24 [json_name = "rpc"];</code>
     */
    public Builder setRpc(
        com.heroiclabs.nakama.api.Rpc.Builder builderForValue) {
      if (rpcBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        rpcBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 24;
      return this;
    }
    /**
     * <pre>
     * RPC call or response.
     * </pre>
     *
     * <code>.nakama.api.Rpc rpc = 24 [json_name = "rpc"];</code>
     */
    public Builder mergeRpc(com.heroiclabs.nakama.api.Rpc value) {
      if (rpcBuilder_ == null) {
        if (messageCase_ == 24 &&
            message_ != com.heroiclabs.nakama.api.Rpc.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.api.Rpc.newBuilder((com.heroiclabs.nakama.api.Rpc) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 24) {
          rpcBuilder_.mergeFrom(value);
        } else {
          rpcBuilder_.setMessage(value);
        }
      }
      messageCase_ = 24;
      return this;
    }
    /**
     * <pre>
     * RPC call or response.
     * </pre>
     *
     * <code>.nakama.api.Rpc rpc = 24 [json_name = "rpc"];</code>
     */
    public Builder clearRpc() {
      if (rpcBuilder_ == null) {
        if (messageCase_ == 24) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 24) {
          messageCase_ = 0;
          message_ = null;
        }
        rpcBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * RPC call or response.
     * </pre>
     *
     * <code>.nakama.api.Rpc rpc = 24 [json_name = "rpc"];</code>
     */
    public com.heroiclabs.nakama.api.Rpc.Builder getRpcBuilder() {
      return getRpcFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * RPC call or response.
     * </pre>
     *
     * <code>.nakama.api.Rpc rpc = 24 [json_name = "rpc"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.api.RpcOrBuilder getRpcOrBuilder() {
      if ((messageCase_ == 24) && (rpcBuilder_ != null)) {
        return rpcBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 24) {
          return (com.heroiclabs.nakama.api.Rpc) message_;
        }
        return com.heroiclabs.nakama.api.Rpc.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * RPC call or response.
     * </pre>
     *
     * <code>.nakama.api.Rpc rpc = 24 [json_name = "rpc"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.api.Rpc, com.heroiclabs.nakama.api.Rpc.Builder, com.heroiclabs.nakama.api.RpcOrBuilder> 
        getRpcFieldBuilder() {
      if (rpcBuilder_ == null) {
        if (!(messageCase_ == 24)) {
          message_ = com.heroiclabs.nakama.api.Rpc.getDefaultInstance();
        }
        rpcBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.api.Rpc, com.heroiclabs.nakama.api.Rpc.Builder, com.heroiclabs.nakama.api.RpcOrBuilder>(
                (com.heroiclabs.nakama.api.Rpc) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 24;
      onChanged();
      return rpcBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.Status, com.heroiclabs.nakama.realtime.Status.Builder, com.heroiclabs.nakama.realtime.StatusOrBuilder> statusBuilder_;
    /**
     * <pre>
     * An incoming status snapshot for some set of users.
     * </pre>
     *
     * <code>.nakama.realtime.Status status = 25 [json_name = "status"];</code>
     * @return Whether the status field is set.
     */
    @java.lang.Override
    public boolean hasStatus() {
      return messageCase_ == 25;
    }
    /**
     * <pre>
     * An incoming status snapshot for some set of users.
     * </pre>
     *
     * <code>.nakama.realtime.Status status = 25 [json_name = "status"];</code>
     * @return The status.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.Status getStatus() {
      if (statusBuilder_ == null) {
        if (messageCase_ == 25) {
          return (com.heroiclabs.nakama.realtime.Status) message_;
        }
        return com.heroiclabs.nakama.realtime.Status.getDefaultInstance();
      } else {
        if (messageCase_ == 25) {
          return statusBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.realtime.Status.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * An incoming status snapshot for some set of users.
     * </pre>
     *
     * <code>.nakama.realtime.Status status = 25 [json_name = "status"];</code>
     */
    public Builder setStatus(com.heroiclabs.nakama.realtime.Status value) {
      if (statusBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        statusBuilder_.setMessage(value);
      }
      messageCase_ = 25;
      return this;
    }
    /**
     * <pre>
     * An incoming status snapshot for some set of users.
     * </pre>
     *
     * <code>.nakama.realtime.Status status = 25 [json_name = "status"];</code>
     */
    public Builder setStatus(
        com.heroiclabs.nakama.realtime.Status.Builder builderForValue) {
      if (statusBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        statusBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 25;
      return this;
    }
    /**
     * <pre>
     * An incoming status snapshot for some set of users.
     * </pre>
     *
     * <code>.nakama.realtime.Status status = 25 [json_name = "status"];</code>
     */
    public Builder mergeStatus(com.heroiclabs.nakama.realtime.Status value) {
      if (statusBuilder_ == null) {
        if (messageCase_ == 25 &&
            message_ != com.heroiclabs.nakama.realtime.Status.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.realtime.Status.newBuilder((com.heroiclabs.nakama.realtime.Status) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 25) {
          statusBuilder_.mergeFrom(value);
        } else {
          statusBuilder_.setMessage(value);
        }
      }
      messageCase_ = 25;
      return this;
    }
    /**
     * <pre>
     * An incoming status snapshot for some set of users.
     * </pre>
     *
     * <code>.nakama.realtime.Status status = 25 [json_name = "status"];</code>
     */
    public Builder clearStatus() {
      if (statusBuilder_ == null) {
        if (messageCase_ == 25) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 25) {
          messageCase_ = 0;
          message_ = null;
        }
        statusBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * An incoming status snapshot for some set of users.
     * </pre>
     *
     * <code>.nakama.realtime.Status status = 25 [json_name = "status"];</code>
     */
    public com.heroiclabs.nakama.realtime.Status.Builder getStatusBuilder() {
      return getStatusFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * An incoming status snapshot for some set of users.
     * </pre>
     *
     * <code>.nakama.realtime.Status status = 25 [json_name = "status"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.StatusOrBuilder getStatusOrBuilder() {
      if ((messageCase_ == 25) && (statusBuilder_ != null)) {
        return statusBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 25) {
          return (com.heroiclabs.nakama.realtime.Status) message_;
        }
        return com.heroiclabs.nakama.realtime.Status.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * An incoming status snapshot for some set of users.
     * </pre>
     *
     * <code>.nakama.realtime.Status status = 25 [json_name = "status"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.Status, com.heroiclabs.nakama.realtime.Status.Builder, com.heroiclabs.nakama.realtime.StatusOrBuilder> 
        getStatusFieldBuilder() {
      if (statusBuilder_ == null) {
        if (!(messageCase_ == 25)) {
          message_ = com.heroiclabs.nakama.realtime.Status.getDefaultInstance();
        }
        statusBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.realtime.Status, com.heroiclabs.nakama.realtime.Status.Builder, com.heroiclabs.nakama.realtime.StatusOrBuilder>(
                (com.heroiclabs.nakama.realtime.Status) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 25;
      onChanged();
      return statusBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.StatusFollow, com.heroiclabs.nakama.realtime.StatusFollow.Builder, com.heroiclabs.nakama.realtime.StatusFollowOrBuilder> statusFollowBuilder_;
    /**
     * <pre>
     * Start following some set of users to receive their status updates.
     * </pre>
     *
     * <code>.nakama.realtime.StatusFollow status_follow = 26 [json_name = "statusFollow"];</code>
     * @return Whether the statusFollow field is set.
     */
    @java.lang.Override
    public boolean hasStatusFollow() {
      return messageCase_ == 26;
    }
    /**
     * <pre>
     * Start following some set of users to receive their status updates.
     * </pre>
     *
     * <code>.nakama.realtime.StatusFollow status_follow = 26 [json_name = "statusFollow"];</code>
     * @return The statusFollow.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.StatusFollow getStatusFollow() {
      if (statusFollowBuilder_ == null) {
        if (messageCase_ == 26) {
          return (com.heroiclabs.nakama.realtime.StatusFollow) message_;
        }
        return com.heroiclabs.nakama.realtime.StatusFollow.getDefaultInstance();
      } else {
        if (messageCase_ == 26) {
          return statusFollowBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.realtime.StatusFollow.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Start following some set of users to receive their status updates.
     * </pre>
     *
     * <code>.nakama.realtime.StatusFollow status_follow = 26 [json_name = "statusFollow"];</code>
     */
    public Builder setStatusFollow(com.heroiclabs.nakama.realtime.StatusFollow value) {
      if (statusFollowBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        statusFollowBuilder_.setMessage(value);
      }
      messageCase_ = 26;
      return this;
    }
    /**
     * <pre>
     * Start following some set of users to receive their status updates.
     * </pre>
     *
     * <code>.nakama.realtime.StatusFollow status_follow = 26 [json_name = "statusFollow"];</code>
     */
    public Builder setStatusFollow(
        com.heroiclabs.nakama.realtime.StatusFollow.Builder builderForValue) {
      if (statusFollowBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        statusFollowBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 26;
      return this;
    }
    /**
     * <pre>
     * Start following some set of users to receive their status updates.
     * </pre>
     *
     * <code>.nakama.realtime.StatusFollow status_follow = 26 [json_name = "statusFollow"];</code>
     */
    public Builder mergeStatusFollow(com.heroiclabs.nakama.realtime.StatusFollow value) {
      if (statusFollowBuilder_ == null) {
        if (messageCase_ == 26 &&
            message_ != com.heroiclabs.nakama.realtime.StatusFollow.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.realtime.StatusFollow.newBuilder((com.heroiclabs.nakama.realtime.StatusFollow) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 26) {
          statusFollowBuilder_.mergeFrom(value);
        } else {
          statusFollowBuilder_.setMessage(value);
        }
      }
      messageCase_ = 26;
      return this;
    }
    /**
     * <pre>
     * Start following some set of users to receive their status updates.
     * </pre>
     *
     * <code>.nakama.realtime.StatusFollow status_follow = 26 [json_name = "statusFollow"];</code>
     */
    public Builder clearStatusFollow() {
      if (statusFollowBuilder_ == null) {
        if (messageCase_ == 26) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 26) {
          messageCase_ = 0;
          message_ = null;
        }
        statusFollowBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Start following some set of users to receive their status updates.
     * </pre>
     *
     * <code>.nakama.realtime.StatusFollow status_follow = 26 [json_name = "statusFollow"];</code>
     */
    public com.heroiclabs.nakama.realtime.StatusFollow.Builder getStatusFollowBuilder() {
      return getStatusFollowFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Start following some set of users to receive their status updates.
     * </pre>
     *
     * <code>.nakama.realtime.StatusFollow status_follow = 26 [json_name = "statusFollow"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.StatusFollowOrBuilder getStatusFollowOrBuilder() {
      if ((messageCase_ == 26) && (statusFollowBuilder_ != null)) {
        return statusFollowBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 26) {
          return (com.heroiclabs.nakama.realtime.StatusFollow) message_;
        }
        return com.heroiclabs.nakama.realtime.StatusFollow.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Start following some set of users to receive their status updates.
     * </pre>
     *
     * <code>.nakama.realtime.StatusFollow status_follow = 26 [json_name = "statusFollow"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.StatusFollow, com.heroiclabs.nakama.realtime.StatusFollow.Builder, com.heroiclabs.nakama.realtime.StatusFollowOrBuilder> 
        getStatusFollowFieldBuilder() {
      if (statusFollowBuilder_ == null) {
        if (!(messageCase_ == 26)) {
          message_ = com.heroiclabs.nakama.realtime.StatusFollow.getDefaultInstance();
        }
        statusFollowBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.realtime.StatusFollow, com.heroiclabs.nakama.realtime.StatusFollow.Builder, com.heroiclabs.nakama.realtime.StatusFollowOrBuilder>(
                (com.heroiclabs.nakama.realtime.StatusFollow) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 26;
      onChanged();
      return statusFollowBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.StatusPresenceEvent, com.heroiclabs.nakama.realtime.StatusPresenceEvent.Builder, com.heroiclabs.nakama.realtime.StatusPresenceEventOrBuilder> statusPresenceEventBuilder_;
    /**
     * <pre>
     * An incoming status update.
     * </pre>
     *
     * <code>.nakama.realtime.StatusPresenceEvent status_presence_event = 27 [json_name = "statusPresenceEvent"];</code>
     * @return Whether the statusPresenceEvent field is set.
     */
    @java.lang.Override
    public boolean hasStatusPresenceEvent() {
      return messageCase_ == 27;
    }
    /**
     * <pre>
     * An incoming status update.
     * </pre>
     *
     * <code>.nakama.realtime.StatusPresenceEvent status_presence_event = 27 [json_name = "statusPresenceEvent"];</code>
     * @return The statusPresenceEvent.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.StatusPresenceEvent getStatusPresenceEvent() {
      if (statusPresenceEventBuilder_ == null) {
        if (messageCase_ == 27) {
          return (com.heroiclabs.nakama.realtime.StatusPresenceEvent) message_;
        }
        return com.heroiclabs.nakama.realtime.StatusPresenceEvent.getDefaultInstance();
      } else {
        if (messageCase_ == 27) {
          return statusPresenceEventBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.realtime.StatusPresenceEvent.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * An incoming status update.
     * </pre>
     *
     * <code>.nakama.realtime.StatusPresenceEvent status_presence_event = 27 [json_name = "statusPresenceEvent"];</code>
     */
    public Builder setStatusPresenceEvent(com.heroiclabs.nakama.realtime.StatusPresenceEvent value) {
      if (statusPresenceEventBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        statusPresenceEventBuilder_.setMessage(value);
      }
      messageCase_ = 27;
      return this;
    }
    /**
     * <pre>
     * An incoming status update.
     * </pre>
     *
     * <code>.nakama.realtime.StatusPresenceEvent status_presence_event = 27 [json_name = "statusPresenceEvent"];</code>
     */
    public Builder setStatusPresenceEvent(
        com.heroiclabs.nakama.realtime.StatusPresenceEvent.Builder builderForValue) {
      if (statusPresenceEventBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        statusPresenceEventBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 27;
      return this;
    }
    /**
     * <pre>
     * An incoming status update.
     * </pre>
     *
     * <code>.nakama.realtime.StatusPresenceEvent status_presence_event = 27 [json_name = "statusPresenceEvent"];</code>
     */
    public Builder mergeStatusPresenceEvent(com.heroiclabs.nakama.realtime.StatusPresenceEvent value) {
      if (statusPresenceEventBuilder_ == null) {
        if (messageCase_ == 27 &&
            message_ != com.heroiclabs.nakama.realtime.StatusPresenceEvent.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.realtime.StatusPresenceEvent.newBuilder((com.heroiclabs.nakama.realtime.StatusPresenceEvent) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 27) {
          statusPresenceEventBuilder_.mergeFrom(value);
        } else {
          statusPresenceEventBuilder_.setMessage(value);
        }
      }
      messageCase_ = 27;
      return this;
    }
    /**
     * <pre>
     * An incoming status update.
     * </pre>
     *
     * <code>.nakama.realtime.StatusPresenceEvent status_presence_event = 27 [json_name = "statusPresenceEvent"];</code>
     */
    public Builder clearStatusPresenceEvent() {
      if (statusPresenceEventBuilder_ == null) {
        if (messageCase_ == 27) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 27) {
          messageCase_ = 0;
          message_ = null;
        }
        statusPresenceEventBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * An incoming status update.
     * </pre>
     *
     * <code>.nakama.realtime.StatusPresenceEvent status_presence_event = 27 [json_name = "statusPresenceEvent"];</code>
     */
    public com.heroiclabs.nakama.realtime.StatusPresenceEvent.Builder getStatusPresenceEventBuilder() {
      return getStatusPresenceEventFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * An incoming status update.
     * </pre>
     *
     * <code>.nakama.realtime.StatusPresenceEvent status_presence_event = 27 [json_name = "statusPresenceEvent"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.StatusPresenceEventOrBuilder getStatusPresenceEventOrBuilder() {
      if ((messageCase_ == 27) && (statusPresenceEventBuilder_ != null)) {
        return statusPresenceEventBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 27) {
          return (com.heroiclabs.nakama.realtime.StatusPresenceEvent) message_;
        }
        return com.heroiclabs.nakama.realtime.StatusPresenceEvent.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * An incoming status update.
     * </pre>
     *
     * <code>.nakama.realtime.StatusPresenceEvent status_presence_event = 27 [json_name = "statusPresenceEvent"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.StatusPresenceEvent, com.heroiclabs.nakama.realtime.StatusPresenceEvent.Builder, com.heroiclabs.nakama.realtime.StatusPresenceEventOrBuilder> 
        getStatusPresenceEventFieldBuilder() {
      if (statusPresenceEventBuilder_ == null) {
        if (!(messageCase_ == 27)) {
          message_ = com.heroiclabs.nakama.realtime.StatusPresenceEvent.getDefaultInstance();
        }
        statusPresenceEventBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.realtime.StatusPresenceEvent, com.heroiclabs.nakama.realtime.StatusPresenceEvent.Builder, com.heroiclabs.nakama.realtime.StatusPresenceEventOrBuilder>(
                (com.heroiclabs.nakama.realtime.StatusPresenceEvent) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 27;
      onChanged();
      return statusPresenceEventBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.StatusUnfollow, com.heroiclabs.nakama.realtime.StatusUnfollow.Builder, com.heroiclabs.nakama.realtime.StatusUnfollowOrBuilder> statusUnfollowBuilder_;
    /**
     * <pre>
     * Stop following some set of users to no longer receive their status updates.
     * </pre>
     *
     * <code>.nakama.realtime.StatusUnfollow status_unfollow = 28 [json_name = "statusUnfollow"];</code>
     * @return Whether the statusUnfollow field is set.
     */
    @java.lang.Override
    public boolean hasStatusUnfollow() {
      return messageCase_ == 28;
    }
    /**
     * <pre>
     * Stop following some set of users to no longer receive their status updates.
     * </pre>
     *
     * <code>.nakama.realtime.StatusUnfollow status_unfollow = 28 [json_name = "statusUnfollow"];</code>
     * @return The statusUnfollow.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.StatusUnfollow getStatusUnfollow() {
      if (statusUnfollowBuilder_ == null) {
        if (messageCase_ == 28) {
          return (com.heroiclabs.nakama.realtime.StatusUnfollow) message_;
        }
        return com.heroiclabs.nakama.realtime.StatusUnfollow.getDefaultInstance();
      } else {
        if (messageCase_ == 28) {
          return statusUnfollowBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.realtime.StatusUnfollow.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Stop following some set of users to no longer receive their status updates.
     * </pre>
     *
     * <code>.nakama.realtime.StatusUnfollow status_unfollow = 28 [json_name = "statusUnfollow"];</code>
     */
    public Builder setStatusUnfollow(com.heroiclabs.nakama.realtime.StatusUnfollow value) {
      if (statusUnfollowBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        statusUnfollowBuilder_.setMessage(value);
      }
      messageCase_ = 28;
      return this;
    }
    /**
     * <pre>
     * Stop following some set of users to no longer receive their status updates.
     * </pre>
     *
     * <code>.nakama.realtime.StatusUnfollow status_unfollow = 28 [json_name = "statusUnfollow"];</code>
     */
    public Builder setStatusUnfollow(
        com.heroiclabs.nakama.realtime.StatusUnfollow.Builder builderForValue) {
      if (statusUnfollowBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        statusUnfollowBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 28;
      return this;
    }
    /**
     * <pre>
     * Stop following some set of users to no longer receive their status updates.
     * </pre>
     *
     * <code>.nakama.realtime.StatusUnfollow status_unfollow = 28 [json_name = "statusUnfollow"];</code>
     */
    public Builder mergeStatusUnfollow(com.heroiclabs.nakama.realtime.StatusUnfollow value) {
      if (statusUnfollowBuilder_ == null) {
        if (messageCase_ == 28 &&
            message_ != com.heroiclabs.nakama.realtime.StatusUnfollow.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.realtime.StatusUnfollow.newBuilder((com.heroiclabs.nakama.realtime.StatusUnfollow) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 28) {
          statusUnfollowBuilder_.mergeFrom(value);
        } else {
          statusUnfollowBuilder_.setMessage(value);
        }
      }
      messageCase_ = 28;
      return this;
    }
    /**
     * <pre>
     * Stop following some set of users to no longer receive their status updates.
     * </pre>
     *
     * <code>.nakama.realtime.StatusUnfollow status_unfollow = 28 [json_name = "statusUnfollow"];</code>
     */
    public Builder clearStatusUnfollow() {
      if (statusUnfollowBuilder_ == null) {
        if (messageCase_ == 28) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 28) {
          messageCase_ = 0;
          message_ = null;
        }
        statusUnfollowBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Stop following some set of users to no longer receive their status updates.
     * </pre>
     *
     * <code>.nakama.realtime.StatusUnfollow status_unfollow = 28 [json_name = "statusUnfollow"];</code>
     */
    public com.heroiclabs.nakama.realtime.StatusUnfollow.Builder getStatusUnfollowBuilder() {
      return getStatusUnfollowFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Stop following some set of users to no longer receive their status updates.
     * </pre>
     *
     * <code>.nakama.realtime.StatusUnfollow status_unfollow = 28 [json_name = "statusUnfollow"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.StatusUnfollowOrBuilder getStatusUnfollowOrBuilder() {
      if ((messageCase_ == 28) && (statusUnfollowBuilder_ != null)) {
        return statusUnfollowBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 28) {
          return (com.heroiclabs.nakama.realtime.StatusUnfollow) message_;
        }
        return com.heroiclabs.nakama.realtime.StatusUnfollow.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Stop following some set of users to no longer receive their status updates.
     * </pre>
     *
     * <code>.nakama.realtime.StatusUnfollow status_unfollow = 28 [json_name = "statusUnfollow"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.StatusUnfollow, com.heroiclabs.nakama.realtime.StatusUnfollow.Builder, com.heroiclabs.nakama.realtime.StatusUnfollowOrBuilder> 
        getStatusUnfollowFieldBuilder() {
      if (statusUnfollowBuilder_ == null) {
        if (!(messageCase_ == 28)) {
          message_ = com.heroiclabs.nakama.realtime.StatusUnfollow.getDefaultInstance();
        }
        statusUnfollowBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.realtime.StatusUnfollow, com.heroiclabs.nakama.realtime.StatusUnfollow.Builder, com.heroiclabs.nakama.realtime.StatusUnfollowOrBuilder>(
                (com.heroiclabs.nakama.realtime.StatusUnfollow) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 28;
      onChanged();
      return statusUnfollowBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.StatusUpdate, com.heroiclabs.nakama.realtime.StatusUpdate.Builder, com.heroiclabs.nakama.realtime.StatusUpdateOrBuilder> statusUpdateBuilder_;
    /**
     * <pre>
     * Set the user's own status.
     * </pre>
     *
     * <code>.nakama.realtime.StatusUpdate status_update = 29 [json_name = "statusUpdate"];</code>
     * @return Whether the statusUpdate field is set.
     */
    @java.lang.Override
    public boolean hasStatusUpdate() {
      return messageCase_ == 29;
    }
    /**
     * <pre>
     * Set the user's own status.
     * </pre>
     *
     * <code>.nakama.realtime.StatusUpdate status_update = 29 [json_name = "statusUpdate"];</code>
     * @return The statusUpdate.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.StatusUpdate getStatusUpdate() {
      if (statusUpdateBuilder_ == null) {
        if (messageCase_ == 29) {
          return (com.heroiclabs.nakama.realtime.StatusUpdate) message_;
        }
        return com.heroiclabs.nakama.realtime.StatusUpdate.getDefaultInstance();
      } else {
        if (messageCase_ == 29) {
          return statusUpdateBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.realtime.StatusUpdate.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Set the user's own status.
     * </pre>
     *
     * <code>.nakama.realtime.StatusUpdate status_update = 29 [json_name = "statusUpdate"];</code>
     */
    public Builder setStatusUpdate(com.heroiclabs.nakama.realtime.StatusUpdate value) {
      if (statusUpdateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        statusUpdateBuilder_.setMessage(value);
      }
      messageCase_ = 29;
      return this;
    }
    /**
     * <pre>
     * Set the user's own status.
     * </pre>
     *
     * <code>.nakama.realtime.StatusUpdate status_update = 29 [json_name = "statusUpdate"];</code>
     */
    public Builder setStatusUpdate(
        com.heroiclabs.nakama.realtime.StatusUpdate.Builder builderForValue) {
      if (statusUpdateBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        statusUpdateBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 29;
      return this;
    }
    /**
     * <pre>
     * Set the user's own status.
     * </pre>
     *
     * <code>.nakama.realtime.StatusUpdate status_update = 29 [json_name = "statusUpdate"];</code>
     */
    public Builder mergeStatusUpdate(com.heroiclabs.nakama.realtime.StatusUpdate value) {
      if (statusUpdateBuilder_ == null) {
        if (messageCase_ == 29 &&
            message_ != com.heroiclabs.nakama.realtime.StatusUpdate.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.realtime.StatusUpdate.newBuilder((com.heroiclabs.nakama.realtime.StatusUpdate) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 29) {
          statusUpdateBuilder_.mergeFrom(value);
        } else {
          statusUpdateBuilder_.setMessage(value);
        }
      }
      messageCase_ = 29;
      return this;
    }
    /**
     * <pre>
     * Set the user's own status.
     * </pre>
     *
     * <code>.nakama.realtime.StatusUpdate status_update = 29 [json_name = "statusUpdate"];</code>
     */
    public Builder clearStatusUpdate() {
      if (statusUpdateBuilder_ == null) {
        if (messageCase_ == 29) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 29) {
          messageCase_ = 0;
          message_ = null;
        }
        statusUpdateBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Set the user's own status.
     * </pre>
     *
     * <code>.nakama.realtime.StatusUpdate status_update = 29 [json_name = "statusUpdate"];</code>
     */
    public com.heroiclabs.nakama.realtime.StatusUpdate.Builder getStatusUpdateBuilder() {
      return getStatusUpdateFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Set the user's own status.
     * </pre>
     *
     * <code>.nakama.realtime.StatusUpdate status_update = 29 [json_name = "statusUpdate"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.StatusUpdateOrBuilder getStatusUpdateOrBuilder() {
      if ((messageCase_ == 29) && (statusUpdateBuilder_ != null)) {
        return statusUpdateBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 29) {
          return (com.heroiclabs.nakama.realtime.StatusUpdate) message_;
        }
        return com.heroiclabs.nakama.realtime.StatusUpdate.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Set the user's own status.
     * </pre>
     *
     * <code>.nakama.realtime.StatusUpdate status_update = 29 [json_name = "statusUpdate"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.StatusUpdate, com.heroiclabs.nakama.realtime.StatusUpdate.Builder, com.heroiclabs.nakama.realtime.StatusUpdateOrBuilder> 
        getStatusUpdateFieldBuilder() {
      if (statusUpdateBuilder_ == null) {
        if (!(messageCase_ == 29)) {
          message_ = com.heroiclabs.nakama.realtime.StatusUpdate.getDefaultInstance();
        }
        statusUpdateBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.realtime.StatusUpdate, com.heroiclabs.nakama.realtime.StatusUpdate.Builder, com.heroiclabs.nakama.realtime.StatusUpdateOrBuilder>(
                (com.heroiclabs.nakama.realtime.StatusUpdate) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 29;
      onChanged();
      return statusUpdateBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.StreamData, com.heroiclabs.nakama.realtime.StreamData.Builder, com.heroiclabs.nakama.realtime.StreamDataOrBuilder> streamDataBuilder_;
    /**
     * <pre>
     * A data message delivered over a stream.
     * </pre>
     *
     * <code>.nakama.realtime.StreamData stream_data = 30 [json_name = "streamData"];</code>
     * @return Whether the streamData field is set.
     */
    @java.lang.Override
    public boolean hasStreamData() {
      return messageCase_ == 30;
    }
    /**
     * <pre>
     * A data message delivered over a stream.
     * </pre>
     *
     * <code>.nakama.realtime.StreamData stream_data = 30 [json_name = "streamData"];</code>
     * @return The streamData.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.StreamData getStreamData() {
      if (streamDataBuilder_ == null) {
        if (messageCase_ == 30) {
          return (com.heroiclabs.nakama.realtime.StreamData) message_;
        }
        return com.heroiclabs.nakama.realtime.StreamData.getDefaultInstance();
      } else {
        if (messageCase_ == 30) {
          return streamDataBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.realtime.StreamData.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A data message delivered over a stream.
     * </pre>
     *
     * <code>.nakama.realtime.StreamData stream_data = 30 [json_name = "streamData"];</code>
     */
    public Builder setStreamData(com.heroiclabs.nakama.realtime.StreamData value) {
      if (streamDataBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        streamDataBuilder_.setMessage(value);
      }
      messageCase_ = 30;
      return this;
    }
    /**
     * <pre>
     * A data message delivered over a stream.
     * </pre>
     *
     * <code>.nakama.realtime.StreamData stream_data = 30 [json_name = "streamData"];</code>
     */
    public Builder setStreamData(
        com.heroiclabs.nakama.realtime.StreamData.Builder builderForValue) {
      if (streamDataBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        streamDataBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 30;
      return this;
    }
    /**
     * <pre>
     * A data message delivered over a stream.
     * </pre>
     *
     * <code>.nakama.realtime.StreamData stream_data = 30 [json_name = "streamData"];</code>
     */
    public Builder mergeStreamData(com.heroiclabs.nakama.realtime.StreamData value) {
      if (streamDataBuilder_ == null) {
        if (messageCase_ == 30 &&
            message_ != com.heroiclabs.nakama.realtime.StreamData.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.realtime.StreamData.newBuilder((com.heroiclabs.nakama.realtime.StreamData) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 30) {
          streamDataBuilder_.mergeFrom(value);
        } else {
          streamDataBuilder_.setMessage(value);
        }
      }
      messageCase_ = 30;
      return this;
    }
    /**
     * <pre>
     * A data message delivered over a stream.
     * </pre>
     *
     * <code>.nakama.realtime.StreamData stream_data = 30 [json_name = "streamData"];</code>
     */
    public Builder clearStreamData() {
      if (streamDataBuilder_ == null) {
        if (messageCase_ == 30) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 30) {
          messageCase_ = 0;
          message_ = null;
        }
        streamDataBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * A data message delivered over a stream.
     * </pre>
     *
     * <code>.nakama.realtime.StreamData stream_data = 30 [json_name = "streamData"];</code>
     */
    public com.heroiclabs.nakama.realtime.StreamData.Builder getStreamDataBuilder() {
      return getStreamDataFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * A data message delivered over a stream.
     * </pre>
     *
     * <code>.nakama.realtime.StreamData stream_data = 30 [json_name = "streamData"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.StreamDataOrBuilder getStreamDataOrBuilder() {
      if ((messageCase_ == 30) && (streamDataBuilder_ != null)) {
        return streamDataBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 30) {
          return (com.heroiclabs.nakama.realtime.StreamData) message_;
        }
        return com.heroiclabs.nakama.realtime.StreamData.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A data message delivered over a stream.
     * </pre>
     *
     * <code>.nakama.realtime.StreamData stream_data = 30 [json_name = "streamData"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.StreamData, com.heroiclabs.nakama.realtime.StreamData.Builder, com.heroiclabs.nakama.realtime.StreamDataOrBuilder> 
        getStreamDataFieldBuilder() {
      if (streamDataBuilder_ == null) {
        if (!(messageCase_ == 30)) {
          message_ = com.heroiclabs.nakama.realtime.StreamData.getDefaultInstance();
        }
        streamDataBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.realtime.StreamData, com.heroiclabs.nakama.realtime.StreamData.Builder, com.heroiclabs.nakama.realtime.StreamDataOrBuilder>(
                (com.heroiclabs.nakama.realtime.StreamData) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 30;
      onChanged();
      return streamDataBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.StreamPresenceEvent, com.heroiclabs.nakama.realtime.StreamPresenceEvent.Builder, com.heroiclabs.nakama.realtime.StreamPresenceEventOrBuilder> streamPresenceEventBuilder_;
    /**
     * <pre>
     * Presence update for a particular stream.
     * </pre>
     *
     * <code>.nakama.realtime.StreamPresenceEvent stream_presence_event = 31 [json_name = "streamPresenceEvent"];</code>
     * @return Whether the streamPresenceEvent field is set.
     */
    @java.lang.Override
    public boolean hasStreamPresenceEvent() {
      return messageCase_ == 31;
    }
    /**
     * <pre>
     * Presence update for a particular stream.
     * </pre>
     *
     * <code>.nakama.realtime.StreamPresenceEvent stream_presence_event = 31 [json_name = "streamPresenceEvent"];</code>
     * @return The streamPresenceEvent.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.StreamPresenceEvent getStreamPresenceEvent() {
      if (streamPresenceEventBuilder_ == null) {
        if (messageCase_ == 31) {
          return (com.heroiclabs.nakama.realtime.StreamPresenceEvent) message_;
        }
        return com.heroiclabs.nakama.realtime.StreamPresenceEvent.getDefaultInstance();
      } else {
        if (messageCase_ == 31) {
          return streamPresenceEventBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.realtime.StreamPresenceEvent.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Presence update for a particular stream.
     * </pre>
     *
     * <code>.nakama.realtime.StreamPresenceEvent stream_presence_event = 31 [json_name = "streamPresenceEvent"];</code>
     */
    public Builder setStreamPresenceEvent(com.heroiclabs.nakama.realtime.StreamPresenceEvent value) {
      if (streamPresenceEventBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        streamPresenceEventBuilder_.setMessage(value);
      }
      messageCase_ = 31;
      return this;
    }
    /**
     * <pre>
     * Presence update for a particular stream.
     * </pre>
     *
     * <code>.nakama.realtime.StreamPresenceEvent stream_presence_event = 31 [json_name = "streamPresenceEvent"];</code>
     */
    public Builder setStreamPresenceEvent(
        com.heroiclabs.nakama.realtime.StreamPresenceEvent.Builder builderForValue) {
      if (streamPresenceEventBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        streamPresenceEventBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 31;
      return this;
    }
    /**
     * <pre>
     * Presence update for a particular stream.
     * </pre>
     *
     * <code>.nakama.realtime.StreamPresenceEvent stream_presence_event = 31 [json_name = "streamPresenceEvent"];</code>
     */
    public Builder mergeStreamPresenceEvent(com.heroiclabs.nakama.realtime.StreamPresenceEvent value) {
      if (streamPresenceEventBuilder_ == null) {
        if (messageCase_ == 31 &&
            message_ != com.heroiclabs.nakama.realtime.StreamPresenceEvent.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.realtime.StreamPresenceEvent.newBuilder((com.heroiclabs.nakama.realtime.StreamPresenceEvent) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 31) {
          streamPresenceEventBuilder_.mergeFrom(value);
        } else {
          streamPresenceEventBuilder_.setMessage(value);
        }
      }
      messageCase_ = 31;
      return this;
    }
    /**
     * <pre>
     * Presence update for a particular stream.
     * </pre>
     *
     * <code>.nakama.realtime.StreamPresenceEvent stream_presence_event = 31 [json_name = "streamPresenceEvent"];</code>
     */
    public Builder clearStreamPresenceEvent() {
      if (streamPresenceEventBuilder_ == null) {
        if (messageCase_ == 31) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 31) {
          messageCase_ = 0;
          message_ = null;
        }
        streamPresenceEventBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Presence update for a particular stream.
     * </pre>
     *
     * <code>.nakama.realtime.StreamPresenceEvent stream_presence_event = 31 [json_name = "streamPresenceEvent"];</code>
     */
    public com.heroiclabs.nakama.realtime.StreamPresenceEvent.Builder getStreamPresenceEventBuilder() {
      return getStreamPresenceEventFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Presence update for a particular stream.
     * </pre>
     *
     * <code>.nakama.realtime.StreamPresenceEvent stream_presence_event = 31 [json_name = "streamPresenceEvent"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.StreamPresenceEventOrBuilder getStreamPresenceEventOrBuilder() {
      if ((messageCase_ == 31) && (streamPresenceEventBuilder_ != null)) {
        return streamPresenceEventBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 31) {
          return (com.heroiclabs.nakama.realtime.StreamPresenceEvent) message_;
        }
        return com.heroiclabs.nakama.realtime.StreamPresenceEvent.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Presence update for a particular stream.
     * </pre>
     *
     * <code>.nakama.realtime.StreamPresenceEvent stream_presence_event = 31 [json_name = "streamPresenceEvent"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.StreamPresenceEvent, com.heroiclabs.nakama.realtime.StreamPresenceEvent.Builder, com.heroiclabs.nakama.realtime.StreamPresenceEventOrBuilder> 
        getStreamPresenceEventFieldBuilder() {
      if (streamPresenceEventBuilder_ == null) {
        if (!(messageCase_ == 31)) {
          message_ = com.heroiclabs.nakama.realtime.StreamPresenceEvent.getDefaultInstance();
        }
        streamPresenceEventBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.realtime.StreamPresenceEvent, com.heroiclabs.nakama.realtime.StreamPresenceEvent.Builder, com.heroiclabs.nakama.realtime.StreamPresenceEventOrBuilder>(
                (com.heroiclabs.nakama.realtime.StreamPresenceEvent) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 31;
      onChanged();
      return streamPresenceEventBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.Ping, com.heroiclabs.nakama.realtime.Ping.Builder, com.heroiclabs.nakama.realtime.PingOrBuilder> pingBuilder_;
    /**
     * <pre>
     * Application-level heartbeat and connection check.
     * </pre>
     *
     * <code>.nakama.realtime.Ping ping = 32 [json_name = "ping"];</code>
     * @return Whether the ping field is set.
     */
    @java.lang.Override
    public boolean hasPing() {
      return messageCase_ == 32;
    }
    /**
     * <pre>
     * Application-level heartbeat and connection check.
     * </pre>
     *
     * <code>.nakama.realtime.Ping ping = 32 [json_name = "ping"];</code>
     * @return The ping.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.Ping getPing() {
      if (pingBuilder_ == null) {
        if (messageCase_ == 32) {
          return (com.heroiclabs.nakama.realtime.Ping) message_;
        }
        return com.heroiclabs.nakama.realtime.Ping.getDefaultInstance();
      } else {
        if (messageCase_ == 32) {
          return pingBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.realtime.Ping.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Application-level heartbeat and connection check.
     * </pre>
     *
     * <code>.nakama.realtime.Ping ping = 32 [json_name = "ping"];</code>
     */
    public Builder setPing(com.heroiclabs.nakama.realtime.Ping value) {
      if (pingBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        pingBuilder_.setMessage(value);
      }
      messageCase_ = 32;
      return this;
    }
    /**
     * <pre>
     * Application-level heartbeat and connection check.
     * </pre>
     *
     * <code>.nakama.realtime.Ping ping = 32 [json_name = "ping"];</code>
     */
    public Builder setPing(
        com.heroiclabs.nakama.realtime.Ping.Builder builderForValue) {
      if (pingBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        pingBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 32;
      return this;
    }
    /**
     * <pre>
     * Application-level heartbeat and connection check.
     * </pre>
     *
     * <code>.nakama.realtime.Ping ping = 32 [json_name = "ping"];</code>
     */
    public Builder mergePing(com.heroiclabs.nakama.realtime.Ping value) {
      if (pingBuilder_ == null) {
        if (messageCase_ == 32 &&
            message_ != com.heroiclabs.nakama.realtime.Ping.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.realtime.Ping.newBuilder((com.heroiclabs.nakama.realtime.Ping) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 32) {
          pingBuilder_.mergeFrom(value);
        } else {
          pingBuilder_.setMessage(value);
        }
      }
      messageCase_ = 32;
      return this;
    }
    /**
     * <pre>
     * Application-level heartbeat and connection check.
     * </pre>
     *
     * <code>.nakama.realtime.Ping ping = 32 [json_name = "ping"];</code>
     */
    public Builder clearPing() {
      if (pingBuilder_ == null) {
        if (messageCase_ == 32) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 32) {
          messageCase_ = 0;
          message_ = null;
        }
        pingBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Application-level heartbeat and connection check.
     * </pre>
     *
     * <code>.nakama.realtime.Ping ping = 32 [json_name = "ping"];</code>
     */
    public com.heroiclabs.nakama.realtime.Ping.Builder getPingBuilder() {
      return getPingFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Application-level heartbeat and connection check.
     * </pre>
     *
     * <code>.nakama.realtime.Ping ping = 32 [json_name = "ping"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.PingOrBuilder getPingOrBuilder() {
      if ((messageCase_ == 32) && (pingBuilder_ != null)) {
        return pingBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 32) {
          return (com.heroiclabs.nakama.realtime.Ping) message_;
        }
        return com.heroiclabs.nakama.realtime.Ping.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Application-level heartbeat and connection check.
     * </pre>
     *
     * <code>.nakama.realtime.Ping ping = 32 [json_name = "ping"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.Ping, com.heroiclabs.nakama.realtime.Ping.Builder, com.heroiclabs.nakama.realtime.PingOrBuilder> 
        getPingFieldBuilder() {
      if (pingBuilder_ == null) {
        if (!(messageCase_ == 32)) {
          message_ = com.heroiclabs.nakama.realtime.Ping.getDefaultInstance();
        }
        pingBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.realtime.Ping, com.heroiclabs.nakama.realtime.Ping.Builder, com.heroiclabs.nakama.realtime.PingOrBuilder>(
                (com.heroiclabs.nakama.realtime.Ping) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 32;
      onChanged();
      return pingBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.Pong, com.heroiclabs.nakama.realtime.Pong.Builder, com.heroiclabs.nakama.realtime.PongOrBuilder> pongBuilder_;
    /**
     * <pre>
     * Application-level heartbeat and connection check response.
     * </pre>
     *
     * <code>.nakama.realtime.Pong pong = 33 [json_name = "pong"];</code>
     * @return Whether the pong field is set.
     */
    @java.lang.Override
    public boolean hasPong() {
      return messageCase_ == 33;
    }
    /**
     * <pre>
     * Application-level heartbeat and connection check response.
     * </pre>
     *
     * <code>.nakama.realtime.Pong pong = 33 [json_name = "pong"];</code>
     * @return The pong.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.Pong getPong() {
      if (pongBuilder_ == null) {
        if (messageCase_ == 33) {
          return (com.heroiclabs.nakama.realtime.Pong) message_;
        }
        return com.heroiclabs.nakama.realtime.Pong.getDefaultInstance();
      } else {
        if (messageCase_ == 33) {
          return pongBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.realtime.Pong.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Application-level heartbeat and connection check response.
     * </pre>
     *
     * <code>.nakama.realtime.Pong pong = 33 [json_name = "pong"];</code>
     */
    public Builder setPong(com.heroiclabs.nakama.realtime.Pong value) {
      if (pongBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        pongBuilder_.setMessage(value);
      }
      messageCase_ = 33;
      return this;
    }
    /**
     * <pre>
     * Application-level heartbeat and connection check response.
     * </pre>
     *
     * <code>.nakama.realtime.Pong pong = 33 [json_name = "pong"];</code>
     */
    public Builder setPong(
        com.heroiclabs.nakama.realtime.Pong.Builder builderForValue) {
      if (pongBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        pongBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 33;
      return this;
    }
    /**
     * <pre>
     * Application-level heartbeat and connection check response.
     * </pre>
     *
     * <code>.nakama.realtime.Pong pong = 33 [json_name = "pong"];</code>
     */
    public Builder mergePong(com.heroiclabs.nakama.realtime.Pong value) {
      if (pongBuilder_ == null) {
        if (messageCase_ == 33 &&
            message_ != com.heroiclabs.nakama.realtime.Pong.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.realtime.Pong.newBuilder((com.heroiclabs.nakama.realtime.Pong) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 33) {
          pongBuilder_.mergeFrom(value);
        } else {
          pongBuilder_.setMessage(value);
        }
      }
      messageCase_ = 33;
      return this;
    }
    /**
     * <pre>
     * Application-level heartbeat and connection check response.
     * </pre>
     *
     * <code>.nakama.realtime.Pong pong = 33 [json_name = "pong"];</code>
     */
    public Builder clearPong() {
      if (pongBuilder_ == null) {
        if (messageCase_ == 33) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 33) {
          messageCase_ = 0;
          message_ = null;
        }
        pongBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Application-level heartbeat and connection check response.
     * </pre>
     *
     * <code>.nakama.realtime.Pong pong = 33 [json_name = "pong"];</code>
     */
    public com.heroiclabs.nakama.realtime.Pong.Builder getPongBuilder() {
      return getPongFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Application-level heartbeat and connection check response.
     * </pre>
     *
     * <code>.nakama.realtime.Pong pong = 33 [json_name = "pong"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.realtime.PongOrBuilder getPongOrBuilder() {
      if ((messageCase_ == 33) && (pongBuilder_ != null)) {
        return pongBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 33) {
          return (com.heroiclabs.nakama.realtime.Pong) message_;
        }
        return com.heroiclabs.nakama.realtime.Pong.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Application-level heartbeat and connection check response.
     * </pre>
     *
     * <code>.nakama.realtime.Pong pong = 33 [json_name = "pong"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.realtime.Pong, com.heroiclabs.nakama.realtime.Pong.Builder, com.heroiclabs.nakama.realtime.PongOrBuilder> 
        getPongFieldBuilder() {
      if (pongBuilder_ == null) {
        if (!(messageCase_ == 33)) {
          message_ = com.heroiclabs.nakama.realtime.Pong.getDefaultInstance();
        }
        pongBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.realtime.Pong, com.heroiclabs.nakama.realtime.Pong.Builder, com.heroiclabs.nakama.realtime.PongOrBuilder>(
                (com.heroiclabs.nakama.realtime.Pong) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 33;
      onChanged();
      return pongBuilder_;
    }

    // @@protoc_insertion_point(builder_scope:nakama.realtime.Envelope)
  }

  // @@protoc_insertion_point(class_scope:nakama.realtime.Envelope)
  private static final com.heroiclabs.nakama.realtime.Envelope DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.heroiclabs.nakama.realtime.Envelope();
  }

  public static com.heroiclabs.nakama.realtime.Envelope getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Envelope>
      PARSER = new com.google.protobuf.AbstractParser<Envelope>() {
    @java.lang.Override
    public Envelope parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<Envelope> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Envelope> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.heroiclabs.nakama.realtime.Envelope getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

