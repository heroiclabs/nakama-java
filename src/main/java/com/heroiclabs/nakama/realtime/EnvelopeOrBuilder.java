// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: github.com/heroiclabs/nakama-common/api/realtime.proto
// Protobuf Java Version: 4.28.2

package com.heroiclabs.nakama.realtime;

public interface EnvelopeOrBuilder extends
    // @@protoc_insertion_point(interface_extends:nakama.realtime.Envelope)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>string cid = 1 [json_name = "cid"];</code>
   * @return The cid.
   */
  java.lang.String getCid();
  /**
   * <code>string cid = 1 [json_name = "cid"];</code>
   * @return The bytes for cid.
   */
  com.google.protobuf.ByteString
      getCidBytes();

  /**
   * <pre>
   * A response from a channel join operation.
   * </pre>
   *
   * <code>.nakama.realtime.Channel channel = 2 [json_name = "channel"];</code>
   * @return Whether the channel field is set.
   */
  boolean hasChannel();
  /**
   * <pre>
   * A response from a channel join operation.
   * </pre>
   *
   * <code>.nakama.realtime.Channel channel = 2 [json_name = "channel"];</code>
   * @return The channel.
   */
  com.heroiclabs.nakama.realtime.Channel getChannel();
  /**
   * <pre>
   * A response from a channel join operation.
   * </pre>
   *
   * <code>.nakama.realtime.Channel channel = 2 [json_name = "channel"];</code>
   */
  com.heroiclabs.nakama.realtime.ChannelOrBuilder getChannelOrBuilder();

  /**
   * <pre>
   * Join a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelJoin channel_join = 3 [json_name = "channelJoin"];</code>
   * @return Whether the channelJoin field is set.
   */
  boolean hasChannelJoin();
  /**
   * <pre>
   * Join a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelJoin channel_join = 3 [json_name = "channelJoin"];</code>
   * @return The channelJoin.
   */
  com.heroiclabs.nakama.realtime.ChannelJoin getChannelJoin();
  /**
   * <pre>
   * Join a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelJoin channel_join = 3 [json_name = "channelJoin"];</code>
   */
  com.heroiclabs.nakama.realtime.ChannelJoinOrBuilder getChannelJoinOrBuilder();

  /**
   * <pre>
   * Leave a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelLeave channel_leave = 4 [json_name = "channelLeave"];</code>
   * @return Whether the channelLeave field is set.
   */
  boolean hasChannelLeave();
  /**
   * <pre>
   * Leave a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelLeave channel_leave = 4 [json_name = "channelLeave"];</code>
   * @return The channelLeave.
   */
  com.heroiclabs.nakama.realtime.ChannelLeave getChannelLeave();
  /**
   * <pre>
   * Leave a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelLeave channel_leave = 4 [json_name = "channelLeave"];</code>
   */
  com.heroiclabs.nakama.realtime.ChannelLeaveOrBuilder getChannelLeaveOrBuilder();

  /**
   * <pre>
   * An incoming message on a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.api.ChannelMessage channel_message = 5 [json_name = "channelMessage"];</code>
   * @return Whether the channelMessage field is set.
   */
  boolean hasChannelMessage();
  /**
   * <pre>
   * An incoming message on a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.api.ChannelMessage channel_message = 5 [json_name = "channelMessage"];</code>
   * @return The channelMessage.
   */
  com.heroiclabs.nakama.api.ChannelMessage getChannelMessage();
  /**
   * <pre>
   * An incoming message on a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.api.ChannelMessage channel_message = 5 [json_name = "channelMessage"];</code>
   */
  com.heroiclabs.nakama.api.ChannelMessageOrBuilder getChannelMessageOrBuilder();

  /**
   * <pre>
   * An acknowledgement received in response to sending a message on a chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageAck channel_message_ack = 6 [json_name = "channelMessageAck"];</code>
   * @return Whether the channelMessageAck field is set.
   */
  boolean hasChannelMessageAck();
  /**
   * <pre>
   * An acknowledgement received in response to sending a message on a chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageAck channel_message_ack = 6 [json_name = "channelMessageAck"];</code>
   * @return The channelMessageAck.
   */
  com.heroiclabs.nakama.realtime.ChannelMessageAck getChannelMessageAck();
  /**
   * <pre>
   * An acknowledgement received in response to sending a message on a chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageAck channel_message_ack = 6 [json_name = "channelMessageAck"];</code>
   */
  com.heroiclabs.nakama.realtime.ChannelMessageAckOrBuilder getChannelMessageAckOrBuilder();

  /**
   * <pre>
   * Send a message to a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageSend channel_message_send = 7 [json_name = "channelMessageSend"];</code>
   * @return Whether the channelMessageSend field is set.
   */
  boolean hasChannelMessageSend();
  /**
   * <pre>
   * Send a message to a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageSend channel_message_send = 7 [json_name = "channelMessageSend"];</code>
   * @return The channelMessageSend.
   */
  com.heroiclabs.nakama.realtime.ChannelMessageSend getChannelMessageSend();
  /**
   * <pre>
   * Send a message to a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageSend channel_message_send = 7 [json_name = "channelMessageSend"];</code>
   */
  com.heroiclabs.nakama.realtime.ChannelMessageSendOrBuilder getChannelMessageSendOrBuilder();

  /**
   * <pre>
   * Update a message previously sent to a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageUpdate channel_message_update = 8 [json_name = "channelMessageUpdate"];</code>
   * @return Whether the channelMessageUpdate field is set.
   */
  boolean hasChannelMessageUpdate();
  /**
   * <pre>
   * Update a message previously sent to a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageUpdate channel_message_update = 8 [json_name = "channelMessageUpdate"];</code>
   * @return The channelMessageUpdate.
   */
  com.heroiclabs.nakama.realtime.ChannelMessageUpdate getChannelMessageUpdate();
  /**
   * <pre>
   * Update a message previously sent to a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageUpdate channel_message_update = 8 [json_name = "channelMessageUpdate"];</code>
   */
  com.heroiclabs.nakama.realtime.ChannelMessageUpdateOrBuilder getChannelMessageUpdateOrBuilder();

  /**
   * <pre>
   * Remove a message previously sent to a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageRemove channel_message_remove = 9 [json_name = "channelMessageRemove"];</code>
   * @return Whether the channelMessageRemove field is set.
   */
  boolean hasChannelMessageRemove();
  /**
   * <pre>
   * Remove a message previously sent to a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageRemove channel_message_remove = 9 [json_name = "channelMessageRemove"];</code>
   * @return The channelMessageRemove.
   */
  com.heroiclabs.nakama.realtime.ChannelMessageRemove getChannelMessageRemove();
  /**
   * <pre>
   * Remove a message previously sent to a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageRemove channel_message_remove = 9 [json_name = "channelMessageRemove"];</code>
   */
  com.heroiclabs.nakama.realtime.ChannelMessageRemoveOrBuilder getChannelMessageRemoveOrBuilder();

  /**
   * <pre>
   * Presence update for a particular realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelPresenceEvent channel_presence_event = 10 [json_name = "channelPresenceEvent"];</code>
   * @return Whether the channelPresenceEvent field is set.
   */
  boolean hasChannelPresenceEvent();
  /**
   * <pre>
   * Presence update for a particular realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelPresenceEvent channel_presence_event = 10 [json_name = "channelPresenceEvent"];</code>
   * @return The channelPresenceEvent.
   */
  com.heroiclabs.nakama.realtime.ChannelPresenceEvent getChannelPresenceEvent();
  /**
   * <pre>
   * Presence update for a particular realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelPresenceEvent channel_presence_event = 10 [json_name = "channelPresenceEvent"];</code>
   */
  com.heroiclabs.nakama.realtime.ChannelPresenceEventOrBuilder getChannelPresenceEventOrBuilder();

  /**
   * <pre>
   * Describes an error which occurred on the server.
   * </pre>
   *
   * <code>.nakama.realtime.Error error = 11 [json_name = "error"];</code>
   * @return Whether the error field is set.
   */
  boolean hasError();
  /**
   * <pre>
   * Describes an error which occurred on the server.
   * </pre>
   *
   * <code>.nakama.realtime.Error error = 11 [json_name = "error"];</code>
   * @return The error.
   */
  com.heroiclabs.nakama.realtime.Error getError();
  /**
   * <pre>
   * Describes an error which occurred on the server.
   * </pre>
   *
   * <code>.nakama.realtime.Error error = 11 [json_name = "error"];</code>
   */
  com.heroiclabs.nakama.realtime.ErrorOrBuilder getErrorOrBuilder();

  /**
   * <pre>
   * Incoming information about a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.Match match = 12 [json_name = "match"];</code>
   * @return Whether the match field is set.
   */
  boolean hasMatch();
  /**
   * <pre>
   * Incoming information about a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.Match match = 12 [json_name = "match"];</code>
   * @return The match.
   */
  com.heroiclabs.nakama.realtime.Match getMatch();
  /**
   * <pre>
   * Incoming information about a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.Match match = 12 [json_name = "match"];</code>
   */
  com.heroiclabs.nakama.realtime.MatchOrBuilder getMatchOrBuilder();

  /**
   * <pre>
   * A client to server request to create a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchCreate match_create = 13 [json_name = "matchCreate"];</code>
   * @return Whether the matchCreate field is set.
   */
  boolean hasMatchCreate();
  /**
   * <pre>
   * A client to server request to create a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchCreate match_create = 13 [json_name = "matchCreate"];</code>
   * @return The matchCreate.
   */
  com.heroiclabs.nakama.realtime.MatchCreate getMatchCreate();
  /**
   * <pre>
   * A client to server request to create a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchCreate match_create = 13 [json_name = "matchCreate"];</code>
   */
  com.heroiclabs.nakama.realtime.MatchCreateOrBuilder getMatchCreateOrBuilder();

  /**
   * <pre>
   * Incoming realtime match data delivered from the server.
   * </pre>
   *
   * <code>.nakama.realtime.MatchData match_data = 14 [json_name = "matchData"];</code>
   * @return Whether the matchData field is set.
   */
  boolean hasMatchData();
  /**
   * <pre>
   * Incoming realtime match data delivered from the server.
   * </pre>
   *
   * <code>.nakama.realtime.MatchData match_data = 14 [json_name = "matchData"];</code>
   * @return The matchData.
   */
  com.heroiclabs.nakama.realtime.MatchData getMatchData();
  /**
   * <pre>
   * Incoming realtime match data delivered from the server.
   * </pre>
   *
   * <code>.nakama.realtime.MatchData match_data = 14 [json_name = "matchData"];</code>
   */
  com.heroiclabs.nakama.realtime.MatchDataOrBuilder getMatchDataOrBuilder();

  /**
   * <pre>
   * A client to server request to send data to a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchDataSend match_data_send = 15 [json_name = "matchDataSend"];</code>
   * @return Whether the matchDataSend field is set.
   */
  boolean hasMatchDataSend();
  /**
   * <pre>
   * A client to server request to send data to a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchDataSend match_data_send = 15 [json_name = "matchDataSend"];</code>
   * @return The matchDataSend.
   */
  com.heroiclabs.nakama.realtime.MatchDataSend getMatchDataSend();
  /**
   * <pre>
   * A client to server request to send data to a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchDataSend match_data_send = 15 [json_name = "matchDataSend"];</code>
   */
  com.heroiclabs.nakama.realtime.MatchDataSendOrBuilder getMatchDataSendOrBuilder();

  /**
   * <pre>
   * A client to server request to join a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchJoin match_join = 16 [json_name = "matchJoin"];</code>
   * @return Whether the matchJoin field is set.
   */
  boolean hasMatchJoin();
  /**
   * <pre>
   * A client to server request to join a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchJoin match_join = 16 [json_name = "matchJoin"];</code>
   * @return The matchJoin.
   */
  com.heroiclabs.nakama.realtime.MatchJoin getMatchJoin();
  /**
   * <pre>
   * A client to server request to join a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchJoin match_join = 16 [json_name = "matchJoin"];</code>
   */
  com.heroiclabs.nakama.realtime.MatchJoinOrBuilder getMatchJoinOrBuilder();

  /**
   * <pre>
   * A client to server request to leave a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchLeave match_leave = 17 [json_name = "matchLeave"];</code>
   * @return Whether the matchLeave field is set.
   */
  boolean hasMatchLeave();
  /**
   * <pre>
   * A client to server request to leave a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchLeave match_leave = 17 [json_name = "matchLeave"];</code>
   * @return The matchLeave.
   */
  com.heroiclabs.nakama.realtime.MatchLeave getMatchLeave();
  /**
   * <pre>
   * A client to server request to leave a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchLeave match_leave = 17 [json_name = "matchLeave"];</code>
   */
  com.heroiclabs.nakama.realtime.MatchLeaveOrBuilder getMatchLeaveOrBuilder();

  /**
   * <pre>
   * Presence update for a particular realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchPresenceEvent match_presence_event = 18 [json_name = "matchPresenceEvent"];</code>
   * @return Whether the matchPresenceEvent field is set.
   */
  boolean hasMatchPresenceEvent();
  /**
   * <pre>
   * Presence update for a particular realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchPresenceEvent match_presence_event = 18 [json_name = "matchPresenceEvent"];</code>
   * @return The matchPresenceEvent.
   */
  com.heroiclabs.nakama.realtime.MatchPresenceEvent getMatchPresenceEvent();
  /**
   * <pre>
   * Presence update for a particular realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchPresenceEvent match_presence_event = 18 [json_name = "matchPresenceEvent"];</code>
   */
  com.heroiclabs.nakama.realtime.MatchPresenceEventOrBuilder getMatchPresenceEventOrBuilder();

  /**
   * <pre>
   * Submit a new matchmaking process request.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerAdd matchmaker_add = 19 [json_name = "matchmakerAdd"];</code>
   * @return Whether the matchmakerAdd field is set.
   */
  boolean hasMatchmakerAdd();
  /**
   * <pre>
   * Submit a new matchmaking process request.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerAdd matchmaker_add = 19 [json_name = "matchmakerAdd"];</code>
   * @return The matchmakerAdd.
   */
  com.heroiclabs.nakama.realtime.MatchmakerAdd getMatchmakerAdd();
  /**
   * <pre>
   * Submit a new matchmaking process request.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerAdd matchmaker_add = 19 [json_name = "matchmakerAdd"];</code>
   */
  com.heroiclabs.nakama.realtime.MatchmakerAddOrBuilder getMatchmakerAddOrBuilder();

  /**
   * <pre>
   * A successful matchmaking result.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerMatched matchmaker_matched = 20 [json_name = "matchmakerMatched"];</code>
   * @return Whether the matchmakerMatched field is set.
   */
  boolean hasMatchmakerMatched();
  /**
   * <pre>
   * A successful matchmaking result.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerMatched matchmaker_matched = 20 [json_name = "matchmakerMatched"];</code>
   * @return The matchmakerMatched.
   */
  com.heroiclabs.nakama.realtime.MatchmakerMatched getMatchmakerMatched();
  /**
   * <pre>
   * A successful matchmaking result.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerMatched matchmaker_matched = 20 [json_name = "matchmakerMatched"];</code>
   */
  com.heroiclabs.nakama.realtime.MatchmakerMatchedOrBuilder getMatchmakerMatchedOrBuilder();

  /**
   * <pre>
   * Cancel a matchmaking process using a ticket.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerRemove matchmaker_remove = 21 [json_name = "matchmakerRemove"];</code>
   * @return Whether the matchmakerRemove field is set.
   */
  boolean hasMatchmakerRemove();
  /**
   * <pre>
   * Cancel a matchmaking process using a ticket.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerRemove matchmaker_remove = 21 [json_name = "matchmakerRemove"];</code>
   * @return The matchmakerRemove.
   */
  com.heroiclabs.nakama.realtime.MatchmakerRemove getMatchmakerRemove();
  /**
   * <pre>
   * Cancel a matchmaking process using a ticket.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerRemove matchmaker_remove = 21 [json_name = "matchmakerRemove"];</code>
   */
  com.heroiclabs.nakama.realtime.MatchmakerRemoveOrBuilder getMatchmakerRemoveOrBuilder();

  /**
   * <pre>
   * A response from starting a new matchmaking process.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerTicket matchmaker_ticket = 22 [json_name = "matchmakerTicket"];</code>
   * @return Whether the matchmakerTicket field is set.
   */
  boolean hasMatchmakerTicket();
  /**
   * <pre>
   * A response from starting a new matchmaking process.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerTicket matchmaker_ticket = 22 [json_name = "matchmakerTicket"];</code>
   * @return The matchmakerTicket.
   */
  com.heroiclabs.nakama.realtime.MatchmakerTicket getMatchmakerTicket();
  /**
   * <pre>
   * A response from starting a new matchmaking process.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerTicket matchmaker_ticket = 22 [json_name = "matchmakerTicket"];</code>
   */
  com.heroiclabs.nakama.realtime.MatchmakerTicketOrBuilder getMatchmakerTicketOrBuilder();

  /**
   * <pre>
   * Notifications send by the server.
   * </pre>
   *
   * <code>.nakama.realtime.Notifications notifications = 23 [json_name = "notifications"];</code>
   * @return Whether the notifications field is set.
   */
  boolean hasNotifications();
  /**
   * <pre>
   * Notifications send by the server.
   * </pre>
   *
   * <code>.nakama.realtime.Notifications notifications = 23 [json_name = "notifications"];</code>
   * @return The notifications.
   */
  com.heroiclabs.nakama.realtime.Notifications getNotifications();
  /**
   * <pre>
   * Notifications send by the server.
   * </pre>
   *
   * <code>.nakama.realtime.Notifications notifications = 23 [json_name = "notifications"];</code>
   */
  com.heroiclabs.nakama.realtime.NotificationsOrBuilder getNotificationsOrBuilder();

  /**
   * <pre>
   * RPC call or response.
   * </pre>
   *
   * <code>.nakama.api.Rpc rpc = 24 [json_name = "rpc"];</code>
   * @return Whether the rpc field is set.
   */
  boolean hasRpc();
  /**
   * <pre>
   * RPC call or response.
   * </pre>
   *
   * <code>.nakama.api.Rpc rpc = 24 [json_name = "rpc"];</code>
   * @return The rpc.
   */
  com.heroiclabs.nakama.api.Rpc getRpc();
  /**
   * <pre>
   * RPC call or response.
   * </pre>
   *
   * <code>.nakama.api.Rpc rpc = 24 [json_name = "rpc"];</code>
   */
  com.heroiclabs.nakama.api.RpcOrBuilder getRpcOrBuilder();

  /**
   * <pre>
   * An incoming status snapshot for some set of users.
   * </pre>
   *
   * <code>.nakama.realtime.Status status = 25 [json_name = "status"];</code>
   * @return Whether the status field is set.
   */
  boolean hasStatus();
  /**
   * <pre>
   * An incoming status snapshot for some set of users.
   * </pre>
   *
   * <code>.nakama.realtime.Status status = 25 [json_name = "status"];</code>
   * @return The status.
   */
  com.heroiclabs.nakama.realtime.Status getStatus();
  /**
   * <pre>
   * An incoming status snapshot for some set of users.
   * </pre>
   *
   * <code>.nakama.realtime.Status status = 25 [json_name = "status"];</code>
   */
  com.heroiclabs.nakama.realtime.StatusOrBuilder getStatusOrBuilder();

  /**
   * <pre>
   * Start following some set of users to receive their status updates.
   * </pre>
   *
   * <code>.nakama.realtime.StatusFollow status_follow = 26 [json_name = "statusFollow"];</code>
   * @return Whether the statusFollow field is set.
   */
  boolean hasStatusFollow();
  /**
   * <pre>
   * Start following some set of users to receive their status updates.
   * </pre>
   *
   * <code>.nakama.realtime.StatusFollow status_follow = 26 [json_name = "statusFollow"];</code>
   * @return The statusFollow.
   */
  com.heroiclabs.nakama.realtime.StatusFollow getStatusFollow();
  /**
   * <pre>
   * Start following some set of users to receive their status updates.
   * </pre>
   *
   * <code>.nakama.realtime.StatusFollow status_follow = 26 [json_name = "statusFollow"];</code>
   */
  com.heroiclabs.nakama.realtime.StatusFollowOrBuilder getStatusFollowOrBuilder();

  /**
   * <pre>
   * An incoming status update.
   * </pre>
   *
   * <code>.nakama.realtime.StatusPresenceEvent status_presence_event = 27 [json_name = "statusPresenceEvent"];</code>
   * @return Whether the statusPresenceEvent field is set.
   */
  boolean hasStatusPresenceEvent();
  /**
   * <pre>
   * An incoming status update.
   * </pre>
   *
   * <code>.nakama.realtime.StatusPresenceEvent status_presence_event = 27 [json_name = "statusPresenceEvent"];</code>
   * @return The statusPresenceEvent.
   */
  com.heroiclabs.nakama.realtime.StatusPresenceEvent getStatusPresenceEvent();
  /**
   * <pre>
   * An incoming status update.
   * </pre>
   *
   * <code>.nakama.realtime.StatusPresenceEvent status_presence_event = 27 [json_name = "statusPresenceEvent"];</code>
   */
  com.heroiclabs.nakama.realtime.StatusPresenceEventOrBuilder getStatusPresenceEventOrBuilder();

  /**
   * <pre>
   * Stop following some set of users to no longer receive their status updates.
   * </pre>
   *
   * <code>.nakama.realtime.StatusUnfollow status_unfollow = 28 [json_name = "statusUnfollow"];</code>
   * @return Whether the statusUnfollow field is set.
   */
  boolean hasStatusUnfollow();
  /**
   * <pre>
   * Stop following some set of users to no longer receive their status updates.
   * </pre>
   *
   * <code>.nakama.realtime.StatusUnfollow status_unfollow = 28 [json_name = "statusUnfollow"];</code>
   * @return The statusUnfollow.
   */
  com.heroiclabs.nakama.realtime.StatusUnfollow getStatusUnfollow();
  /**
   * <pre>
   * Stop following some set of users to no longer receive their status updates.
   * </pre>
   *
   * <code>.nakama.realtime.StatusUnfollow status_unfollow = 28 [json_name = "statusUnfollow"];</code>
   */
  com.heroiclabs.nakama.realtime.StatusUnfollowOrBuilder getStatusUnfollowOrBuilder();

  /**
   * <pre>
   * Set the user's own status.
   * </pre>
   *
   * <code>.nakama.realtime.StatusUpdate status_update = 29 [json_name = "statusUpdate"];</code>
   * @return Whether the statusUpdate field is set.
   */
  boolean hasStatusUpdate();
  /**
   * <pre>
   * Set the user's own status.
   * </pre>
   *
   * <code>.nakama.realtime.StatusUpdate status_update = 29 [json_name = "statusUpdate"];</code>
   * @return The statusUpdate.
   */
  com.heroiclabs.nakama.realtime.StatusUpdate getStatusUpdate();
  /**
   * <pre>
   * Set the user's own status.
   * </pre>
   *
   * <code>.nakama.realtime.StatusUpdate status_update = 29 [json_name = "statusUpdate"];</code>
   */
  com.heroiclabs.nakama.realtime.StatusUpdateOrBuilder getStatusUpdateOrBuilder();

  /**
   * <pre>
   * A data message delivered over a stream.
   * </pre>
   *
   * <code>.nakama.realtime.StreamData stream_data = 30 [json_name = "streamData"];</code>
   * @return Whether the streamData field is set.
   */
  boolean hasStreamData();
  /**
   * <pre>
   * A data message delivered over a stream.
   * </pre>
   *
   * <code>.nakama.realtime.StreamData stream_data = 30 [json_name = "streamData"];</code>
   * @return The streamData.
   */
  com.heroiclabs.nakama.realtime.StreamData getStreamData();
  /**
   * <pre>
   * A data message delivered over a stream.
   * </pre>
   *
   * <code>.nakama.realtime.StreamData stream_data = 30 [json_name = "streamData"];</code>
   */
  com.heroiclabs.nakama.realtime.StreamDataOrBuilder getStreamDataOrBuilder();

  /**
   * <pre>
   * Presence update for a particular stream.
   * </pre>
   *
   * <code>.nakama.realtime.StreamPresenceEvent stream_presence_event = 31 [json_name = "streamPresenceEvent"];</code>
   * @return Whether the streamPresenceEvent field is set.
   */
  boolean hasStreamPresenceEvent();
  /**
   * <pre>
   * Presence update for a particular stream.
   * </pre>
   *
   * <code>.nakama.realtime.StreamPresenceEvent stream_presence_event = 31 [json_name = "streamPresenceEvent"];</code>
   * @return The streamPresenceEvent.
   */
  com.heroiclabs.nakama.realtime.StreamPresenceEvent getStreamPresenceEvent();
  /**
   * <pre>
   * Presence update for a particular stream.
   * </pre>
   *
   * <code>.nakama.realtime.StreamPresenceEvent stream_presence_event = 31 [json_name = "streamPresenceEvent"];</code>
   */
  com.heroiclabs.nakama.realtime.StreamPresenceEventOrBuilder getStreamPresenceEventOrBuilder();

  /**
   * <pre>
   * Application-level heartbeat and connection check.
   * </pre>
   *
   * <code>.nakama.realtime.Ping ping = 32 [json_name = "ping"];</code>
   * @return Whether the ping field is set.
   */
  boolean hasPing();
  /**
   * <pre>
   * Application-level heartbeat and connection check.
   * </pre>
   *
   * <code>.nakama.realtime.Ping ping = 32 [json_name = "ping"];</code>
   * @return The ping.
   */
  com.heroiclabs.nakama.realtime.Ping getPing();
  /**
   * <pre>
   * Application-level heartbeat and connection check.
   * </pre>
   *
   * <code>.nakama.realtime.Ping ping = 32 [json_name = "ping"];</code>
   */
  com.heroiclabs.nakama.realtime.PingOrBuilder getPingOrBuilder();

  /**
   * <pre>
   * Application-level heartbeat and connection check response.
   * </pre>
   *
   * <code>.nakama.realtime.Pong pong = 33 [json_name = "pong"];</code>
   * @return Whether the pong field is set.
   */
  boolean hasPong();
  /**
   * <pre>
   * Application-level heartbeat and connection check response.
   * </pre>
   *
   * <code>.nakama.realtime.Pong pong = 33 [json_name = "pong"];</code>
   * @return The pong.
   */
  com.heroiclabs.nakama.realtime.Pong getPong();
  /**
   * <pre>
   * Application-level heartbeat and connection check response.
   * </pre>
   *
   * <code>.nakama.realtime.Pong pong = 33 [json_name = "pong"];</code>
   */
  com.heroiclabs.nakama.realtime.PongOrBuilder getPongOrBuilder();

  com.heroiclabs.nakama.realtime.Envelope.MessageCase getMessageCase();
}
