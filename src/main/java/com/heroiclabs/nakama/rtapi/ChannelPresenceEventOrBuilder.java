// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: github.com/heroiclabs/nakama-common/rtapi/realtime.proto
// Protobuf Java Version: 4.28.2

package com.heroiclabs.nakama.rtapi;

public interface ChannelPresenceEventOrBuilder extends
    // @@protoc_insertion_point(interface_extends:nakama.realtime.ChannelPresenceEvent)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The channel identifier this event is for.
   * </pre>
   *
   * <code>string channel_id = 1 [json_name = "channelId"];</code>
   * @return The channelId.
   */
  java.lang.String getChannelId();
  /**
   * <pre>
   * The channel identifier this event is for.
   * </pre>
   *
   * <code>string channel_id = 1 [json_name = "channelId"];</code>
   * @return The bytes for channelId.
   */
  com.google.protobuf.ByteString
      getChannelIdBytes();

  /**
   * <pre>
   * Presences joining the channel as part of this event, if any.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence joins = 2 [json_name = "joins"];</code>
   */
  java.util.List<com.heroiclabs.nakama.rtapi.UserPresence> 
      getJoinsList();
  /**
   * <pre>
   * Presences joining the channel as part of this event, if any.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence joins = 2 [json_name = "joins"];</code>
   */
  com.heroiclabs.nakama.rtapi.UserPresence getJoins(int index);
  /**
   * <pre>
   * Presences joining the channel as part of this event, if any.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence joins = 2 [json_name = "joins"];</code>
   */
  int getJoinsCount();
  /**
   * <pre>
   * Presences joining the channel as part of this event, if any.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence joins = 2 [json_name = "joins"];</code>
   */
  java.util.List<? extends com.heroiclabs.nakama.rtapi.UserPresenceOrBuilder> 
      getJoinsOrBuilderList();
  /**
   * <pre>
   * Presences joining the channel as part of this event, if any.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence joins = 2 [json_name = "joins"];</code>
   */
  com.heroiclabs.nakama.rtapi.UserPresenceOrBuilder getJoinsOrBuilder(
      int index);

  /**
   * <pre>
   * Presences leaving the channel as part of this event, if any.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence leaves = 3 [json_name = "leaves"];</code>
   */
  java.util.List<com.heroiclabs.nakama.rtapi.UserPresence> 
      getLeavesList();
  /**
   * <pre>
   * Presences leaving the channel as part of this event, if any.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence leaves = 3 [json_name = "leaves"];</code>
   */
  com.heroiclabs.nakama.rtapi.UserPresence getLeaves(int index);
  /**
   * <pre>
   * Presences leaving the channel as part of this event, if any.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence leaves = 3 [json_name = "leaves"];</code>
   */
  int getLeavesCount();
  /**
   * <pre>
   * Presences leaving the channel as part of this event, if any.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence leaves = 3 [json_name = "leaves"];</code>
   */
  java.util.List<? extends com.heroiclabs.nakama.rtapi.UserPresenceOrBuilder> 
      getLeavesOrBuilderList();
  /**
   * <pre>
   * Presences leaving the channel as part of this event, if any.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence leaves = 3 [json_name = "leaves"];</code>
   */
  com.heroiclabs.nakama.rtapi.UserPresenceOrBuilder getLeavesOrBuilder(
      int index);

  /**
   * <pre>
   * The name of the chat room, or an empty string if this message was not sent through a chat room.
   * </pre>
   *
   * <code>string room_name = 4 [json_name = "roomName"];</code>
   * @return The roomName.
   */
  java.lang.String getRoomName();
  /**
   * <pre>
   * The name of the chat room, or an empty string if this message was not sent through a chat room.
   * </pre>
   *
   * <code>string room_name = 4 [json_name = "roomName"];</code>
   * @return The bytes for roomName.
   */
  com.google.protobuf.ByteString
      getRoomNameBytes();

  /**
   * <pre>
   * The ID of the group, or an empty string if this message was not sent through a group channel.
   * </pre>
   *
   * <code>string group_id = 5 [json_name = "groupId"];</code>
   * @return The groupId.
   */
  java.lang.String getGroupId();
  /**
   * <pre>
   * The ID of the group, or an empty string if this message was not sent through a group channel.
   * </pre>
   *
   * <code>string group_id = 5 [json_name = "groupId"];</code>
   * @return The bytes for groupId.
   */
  com.google.protobuf.ByteString
      getGroupIdBytes();

  /**
   * <pre>
   * The ID of the first DM user, or an empty string if this message was not sent through a DM chat.
   * </pre>
   *
   * <code>string user_id_one = 6 [json_name = "userIdOne"];</code>
   * @return The userIdOne.
   */
  java.lang.String getUserIdOne();
  /**
   * <pre>
   * The ID of the first DM user, or an empty string if this message was not sent through a DM chat.
   * </pre>
   *
   * <code>string user_id_one = 6 [json_name = "userIdOne"];</code>
   * @return The bytes for userIdOne.
   */
  com.google.protobuf.ByteString
      getUserIdOneBytes();

  /**
   * <pre>
   * The ID of the second DM user, or an empty string if this message was not sent through a DM chat.
   * </pre>
   *
   * <code>string user_id_two = 7 [json_name = "userIdTwo"];</code>
   * @return The userIdTwo.
   */
  java.lang.String getUserIdTwo();
  /**
   * <pre>
   * The ID of the second DM user, or an empty string if this message was not sent through a DM chat.
   * </pre>
   *
   * <code>string user_id_two = 7 [json_name = "userIdTwo"];</code>
   * @return The bytes for userIdTwo.
   */
  com.google.protobuf.ByteString
      getUserIdTwoBytes();
}
