// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: github.com/heroiclabs/nakama-common/rtapi/realtime.proto
// Protobuf Java Version: 4.28.2

package com.heroiclabs.nakama.rtapi;

/**
 * <pre>
 * An envelope for a realtime message.
 * </pre>
 *
 * Protobuf type {@code nakama.realtime.Envelope}
 */
public final class Envelope extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:nakama.realtime.Envelope)
    EnvelopeOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 28,
      /* patch= */ 2,
      /* suffix= */ "",
      Envelope.class.getName());
  }
  // Use Envelope.newBuilder() to construct.
  private Envelope(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private Envelope() {
    cid_ = "";
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.heroiclabs.nakama.rtapi.RealtimeProto.internal_static_nakama_realtime_Envelope_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.heroiclabs.nakama.rtapi.RealtimeProto.internal_static_nakama_realtime_Envelope_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.heroiclabs.nakama.rtapi.Envelope.class, com.heroiclabs.nakama.rtapi.Envelope.Builder.class);
  }

  private int messageCase_ = 0;
  @SuppressWarnings("serial")
  private java.lang.Object message_;
  public enum MessageCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    CHANNEL(2),
    CHANNEL_JOIN(3),
    CHANNEL_LEAVE(4),
    CHANNEL_MESSAGE(5),
    CHANNEL_MESSAGE_ACK(6),
    CHANNEL_MESSAGE_SEND(7),
    CHANNEL_MESSAGE_UPDATE(8),
    CHANNEL_MESSAGE_REMOVE(9),
    CHANNEL_PRESENCE_EVENT(10),
    ERROR(11),
    MATCH(12),
    MATCH_CREATE(13),
    MATCH_DATA(14),
    MATCH_DATA_SEND(15),
    MATCH_JOIN(16),
    MATCH_LEAVE(17),
    MATCH_PRESENCE_EVENT(18),
    MATCHMAKER_ADD(19),
    MATCHMAKER_MATCHED(20),
    MATCHMAKER_REMOVE(21),
    MATCHMAKER_TICKET(22),
    NOTIFICATIONS(23),
    RPC(24),
    STATUS(25),
    STATUS_FOLLOW(26),
    STATUS_PRESENCE_EVENT(27),
    STATUS_UNFOLLOW(28),
    STATUS_UPDATE(29),
    STREAM_DATA(30),
    STREAM_PRESENCE_EVENT(31),
    PING(32),
    PONG(33),
    PARTY(34),
    PARTY_CREATE(35),
    PARTY_JOIN(36),
    PARTY_LEAVE(37),
    PARTY_PROMOTE(38),
    PARTY_LEADER(39),
    PARTY_ACCEPT(40),
    PARTY_REMOVE(41),
    PARTY_CLOSE(42),
    PARTY_JOIN_REQUEST_LIST(43),
    PARTY_JOIN_REQUEST(44),
    PARTY_MATCHMAKER_ADD(45),
    PARTY_MATCHMAKER_REMOVE(46),
    PARTY_MATCHMAKER_TICKET(47),
    PARTY_DATA(48),
    PARTY_DATA_SEND(49),
    PARTY_PRESENCE_EVENT(50),
    MESSAGE_NOT_SET(0);
    private final int value;
    private MessageCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static MessageCase valueOf(int value) {
      return forNumber(value);
    }

    public static MessageCase forNumber(int value) {
      switch (value) {
        case 2: return CHANNEL;
        case 3: return CHANNEL_JOIN;
        case 4: return CHANNEL_LEAVE;
        case 5: return CHANNEL_MESSAGE;
        case 6: return CHANNEL_MESSAGE_ACK;
        case 7: return CHANNEL_MESSAGE_SEND;
        case 8: return CHANNEL_MESSAGE_UPDATE;
        case 9: return CHANNEL_MESSAGE_REMOVE;
        case 10: return CHANNEL_PRESENCE_EVENT;
        case 11: return ERROR;
        case 12: return MATCH;
        case 13: return MATCH_CREATE;
        case 14: return MATCH_DATA;
        case 15: return MATCH_DATA_SEND;
        case 16: return MATCH_JOIN;
        case 17: return MATCH_LEAVE;
        case 18: return MATCH_PRESENCE_EVENT;
        case 19: return MATCHMAKER_ADD;
        case 20: return MATCHMAKER_MATCHED;
        case 21: return MATCHMAKER_REMOVE;
        case 22: return MATCHMAKER_TICKET;
        case 23: return NOTIFICATIONS;
        case 24: return RPC;
        case 25: return STATUS;
        case 26: return STATUS_FOLLOW;
        case 27: return STATUS_PRESENCE_EVENT;
        case 28: return STATUS_UNFOLLOW;
        case 29: return STATUS_UPDATE;
        case 30: return STREAM_DATA;
        case 31: return STREAM_PRESENCE_EVENT;
        case 32: return PING;
        case 33: return PONG;
        case 34: return PARTY;
        case 35: return PARTY_CREATE;
        case 36: return PARTY_JOIN;
        case 37: return PARTY_LEAVE;
        case 38: return PARTY_PROMOTE;
        case 39: return PARTY_LEADER;
        case 40: return PARTY_ACCEPT;
        case 41: return PARTY_REMOVE;
        case 42: return PARTY_CLOSE;
        case 43: return PARTY_JOIN_REQUEST_LIST;
        case 44: return PARTY_JOIN_REQUEST;
        case 45: return PARTY_MATCHMAKER_ADD;
        case 46: return PARTY_MATCHMAKER_REMOVE;
        case 47: return PARTY_MATCHMAKER_TICKET;
        case 48: return PARTY_DATA;
        case 49: return PARTY_DATA_SEND;
        case 50: return PARTY_PRESENCE_EVENT;
        case 0: return MESSAGE_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public MessageCase
  getMessageCase() {
    return MessageCase.forNumber(
        messageCase_);
  }

  public static final int CID_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private volatile java.lang.Object cid_ = "";
  /**
   * <code>string cid = 1 [json_name = "cid"];</code>
   * @return The cid.
   */
  @java.lang.Override
  public java.lang.String getCid() {
    java.lang.Object ref = cid_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      cid_ = s;
      return s;
    }
  }
  /**
   * <code>string cid = 1 [json_name = "cid"];</code>
   * @return The bytes for cid.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getCidBytes() {
    java.lang.Object ref = cid_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      cid_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int CHANNEL_FIELD_NUMBER = 2;
  /**
   * <pre>
   * A response from a channel join operation.
   * </pre>
   *
   * <code>.nakama.realtime.Channel channel = 2 [json_name = "channel"];</code>
   * @return Whether the channel field is set.
   */
  @java.lang.Override
  public boolean hasChannel() {
    return messageCase_ == 2;
  }
  /**
   * <pre>
   * A response from a channel join operation.
   * </pre>
   *
   * <code>.nakama.realtime.Channel channel = 2 [json_name = "channel"];</code>
   * @return The channel.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.Channel getChannel() {
    if (messageCase_ == 2) {
       return (com.heroiclabs.nakama.rtapi.Channel) message_;
    }
    return com.heroiclabs.nakama.rtapi.Channel.getDefaultInstance();
  }
  /**
   * <pre>
   * A response from a channel join operation.
   * </pre>
   *
   * <code>.nakama.realtime.Channel channel = 2 [json_name = "channel"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.ChannelOrBuilder getChannelOrBuilder() {
    if (messageCase_ == 2) {
       return (com.heroiclabs.nakama.rtapi.Channel) message_;
    }
    return com.heroiclabs.nakama.rtapi.Channel.getDefaultInstance();
  }

  public static final int CHANNEL_JOIN_FIELD_NUMBER = 3;
  /**
   * <pre>
   * Join a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelJoin channel_join = 3 [json_name = "channelJoin"];</code>
   * @return Whether the channelJoin field is set.
   */
  @java.lang.Override
  public boolean hasChannelJoin() {
    return messageCase_ == 3;
  }
  /**
   * <pre>
   * Join a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelJoin channel_join = 3 [json_name = "channelJoin"];</code>
   * @return The channelJoin.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.ChannelJoin getChannelJoin() {
    if (messageCase_ == 3) {
       return (com.heroiclabs.nakama.rtapi.ChannelJoin) message_;
    }
    return com.heroiclabs.nakama.rtapi.ChannelJoin.getDefaultInstance();
  }
  /**
   * <pre>
   * Join a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelJoin channel_join = 3 [json_name = "channelJoin"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.ChannelJoinOrBuilder getChannelJoinOrBuilder() {
    if (messageCase_ == 3) {
       return (com.heroiclabs.nakama.rtapi.ChannelJoin) message_;
    }
    return com.heroiclabs.nakama.rtapi.ChannelJoin.getDefaultInstance();
  }

  public static final int CHANNEL_LEAVE_FIELD_NUMBER = 4;
  /**
   * <pre>
   * Leave a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelLeave channel_leave = 4 [json_name = "channelLeave"];</code>
   * @return Whether the channelLeave field is set.
   */
  @java.lang.Override
  public boolean hasChannelLeave() {
    return messageCase_ == 4;
  }
  /**
   * <pre>
   * Leave a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelLeave channel_leave = 4 [json_name = "channelLeave"];</code>
   * @return The channelLeave.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.ChannelLeave getChannelLeave() {
    if (messageCase_ == 4) {
       return (com.heroiclabs.nakama.rtapi.ChannelLeave) message_;
    }
    return com.heroiclabs.nakama.rtapi.ChannelLeave.getDefaultInstance();
  }
  /**
   * <pre>
   * Leave a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelLeave channel_leave = 4 [json_name = "channelLeave"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.ChannelLeaveOrBuilder getChannelLeaveOrBuilder() {
    if (messageCase_ == 4) {
       return (com.heroiclabs.nakama.rtapi.ChannelLeave) message_;
    }
    return com.heroiclabs.nakama.rtapi.ChannelLeave.getDefaultInstance();
  }

  public static final int CHANNEL_MESSAGE_FIELD_NUMBER = 5;
  /**
   * <pre>
   * An incoming message on a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.api.ChannelMessage channel_message = 5 [json_name = "channelMessage"];</code>
   * @return Whether the channelMessage field is set.
   */
  @java.lang.Override
  public boolean hasChannelMessage() {
    return messageCase_ == 5;
  }
  /**
   * <pre>
   * An incoming message on a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.api.ChannelMessage channel_message = 5 [json_name = "channelMessage"];</code>
   * @return The channelMessage.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.api.ChannelMessage getChannelMessage() {
    if (messageCase_ == 5) {
       return (com.heroiclabs.nakama.api.ChannelMessage) message_;
    }
    return com.heroiclabs.nakama.api.ChannelMessage.getDefaultInstance();
  }
  /**
   * <pre>
   * An incoming message on a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.api.ChannelMessage channel_message = 5 [json_name = "channelMessage"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.api.ChannelMessageOrBuilder getChannelMessageOrBuilder() {
    if (messageCase_ == 5) {
       return (com.heroiclabs.nakama.api.ChannelMessage) message_;
    }
    return com.heroiclabs.nakama.api.ChannelMessage.getDefaultInstance();
  }

  public static final int CHANNEL_MESSAGE_ACK_FIELD_NUMBER = 6;
  /**
   * <pre>
   * An acknowledgement received in response to sending a message on a chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageAck channel_message_ack = 6 [json_name = "channelMessageAck"];</code>
   * @return Whether the channelMessageAck field is set.
   */
  @java.lang.Override
  public boolean hasChannelMessageAck() {
    return messageCase_ == 6;
  }
  /**
   * <pre>
   * An acknowledgement received in response to sending a message on a chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageAck channel_message_ack = 6 [json_name = "channelMessageAck"];</code>
   * @return The channelMessageAck.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.ChannelMessageAck getChannelMessageAck() {
    if (messageCase_ == 6) {
       return (com.heroiclabs.nakama.rtapi.ChannelMessageAck) message_;
    }
    return com.heroiclabs.nakama.rtapi.ChannelMessageAck.getDefaultInstance();
  }
  /**
   * <pre>
   * An acknowledgement received in response to sending a message on a chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageAck channel_message_ack = 6 [json_name = "channelMessageAck"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.ChannelMessageAckOrBuilder getChannelMessageAckOrBuilder() {
    if (messageCase_ == 6) {
       return (com.heroiclabs.nakama.rtapi.ChannelMessageAck) message_;
    }
    return com.heroiclabs.nakama.rtapi.ChannelMessageAck.getDefaultInstance();
  }

  public static final int CHANNEL_MESSAGE_SEND_FIELD_NUMBER = 7;
  /**
   * <pre>
   * Send a message to a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageSend channel_message_send = 7 [json_name = "channelMessageSend"];</code>
   * @return Whether the channelMessageSend field is set.
   */
  @java.lang.Override
  public boolean hasChannelMessageSend() {
    return messageCase_ == 7;
  }
  /**
   * <pre>
   * Send a message to a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageSend channel_message_send = 7 [json_name = "channelMessageSend"];</code>
   * @return The channelMessageSend.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.ChannelMessageSend getChannelMessageSend() {
    if (messageCase_ == 7) {
       return (com.heroiclabs.nakama.rtapi.ChannelMessageSend) message_;
    }
    return com.heroiclabs.nakama.rtapi.ChannelMessageSend.getDefaultInstance();
  }
  /**
   * <pre>
   * Send a message to a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageSend channel_message_send = 7 [json_name = "channelMessageSend"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.ChannelMessageSendOrBuilder getChannelMessageSendOrBuilder() {
    if (messageCase_ == 7) {
       return (com.heroiclabs.nakama.rtapi.ChannelMessageSend) message_;
    }
    return com.heroiclabs.nakama.rtapi.ChannelMessageSend.getDefaultInstance();
  }

  public static final int CHANNEL_MESSAGE_UPDATE_FIELD_NUMBER = 8;
  /**
   * <pre>
   * Update a message previously sent to a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageUpdate channel_message_update = 8 [json_name = "channelMessageUpdate"];</code>
   * @return Whether the channelMessageUpdate field is set.
   */
  @java.lang.Override
  public boolean hasChannelMessageUpdate() {
    return messageCase_ == 8;
  }
  /**
   * <pre>
   * Update a message previously sent to a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageUpdate channel_message_update = 8 [json_name = "channelMessageUpdate"];</code>
   * @return The channelMessageUpdate.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.ChannelMessageUpdate getChannelMessageUpdate() {
    if (messageCase_ == 8) {
       return (com.heroiclabs.nakama.rtapi.ChannelMessageUpdate) message_;
    }
    return com.heroiclabs.nakama.rtapi.ChannelMessageUpdate.getDefaultInstance();
  }
  /**
   * <pre>
   * Update a message previously sent to a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageUpdate channel_message_update = 8 [json_name = "channelMessageUpdate"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.ChannelMessageUpdateOrBuilder getChannelMessageUpdateOrBuilder() {
    if (messageCase_ == 8) {
       return (com.heroiclabs.nakama.rtapi.ChannelMessageUpdate) message_;
    }
    return com.heroiclabs.nakama.rtapi.ChannelMessageUpdate.getDefaultInstance();
  }

  public static final int CHANNEL_MESSAGE_REMOVE_FIELD_NUMBER = 9;
  /**
   * <pre>
   * Remove a message previously sent to a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageRemove channel_message_remove = 9 [json_name = "channelMessageRemove"];</code>
   * @return Whether the channelMessageRemove field is set.
   */
  @java.lang.Override
  public boolean hasChannelMessageRemove() {
    return messageCase_ == 9;
  }
  /**
   * <pre>
   * Remove a message previously sent to a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageRemove channel_message_remove = 9 [json_name = "channelMessageRemove"];</code>
   * @return The channelMessageRemove.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.ChannelMessageRemove getChannelMessageRemove() {
    if (messageCase_ == 9) {
       return (com.heroiclabs.nakama.rtapi.ChannelMessageRemove) message_;
    }
    return com.heroiclabs.nakama.rtapi.ChannelMessageRemove.getDefaultInstance();
  }
  /**
   * <pre>
   * Remove a message previously sent to a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageRemove channel_message_remove = 9 [json_name = "channelMessageRemove"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.ChannelMessageRemoveOrBuilder getChannelMessageRemoveOrBuilder() {
    if (messageCase_ == 9) {
       return (com.heroiclabs.nakama.rtapi.ChannelMessageRemove) message_;
    }
    return com.heroiclabs.nakama.rtapi.ChannelMessageRemove.getDefaultInstance();
  }

  public static final int CHANNEL_PRESENCE_EVENT_FIELD_NUMBER = 10;
  /**
   * <pre>
   * Presence update for a particular realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelPresenceEvent channel_presence_event = 10 [json_name = "channelPresenceEvent"];</code>
   * @return Whether the channelPresenceEvent field is set.
   */
  @java.lang.Override
  public boolean hasChannelPresenceEvent() {
    return messageCase_ == 10;
  }
  /**
   * <pre>
   * Presence update for a particular realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelPresenceEvent channel_presence_event = 10 [json_name = "channelPresenceEvent"];</code>
   * @return The channelPresenceEvent.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.ChannelPresenceEvent getChannelPresenceEvent() {
    if (messageCase_ == 10) {
       return (com.heroiclabs.nakama.rtapi.ChannelPresenceEvent) message_;
    }
    return com.heroiclabs.nakama.rtapi.ChannelPresenceEvent.getDefaultInstance();
  }
  /**
   * <pre>
   * Presence update for a particular realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelPresenceEvent channel_presence_event = 10 [json_name = "channelPresenceEvent"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.ChannelPresenceEventOrBuilder getChannelPresenceEventOrBuilder() {
    if (messageCase_ == 10) {
       return (com.heroiclabs.nakama.rtapi.ChannelPresenceEvent) message_;
    }
    return com.heroiclabs.nakama.rtapi.ChannelPresenceEvent.getDefaultInstance();
  }

  public static final int ERROR_FIELD_NUMBER = 11;
  /**
   * <pre>
   * Describes an error which occurred on the server.
   * </pre>
   *
   * <code>.nakama.realtime.Error error = 11 [json_name = "error"];</code>
   * @return Whether the error field is set.
   */
  @java.lang.Override
  public boolean hasError() {
    return messageCase_ == 11;
  }
  /**
   * <pre>
   * Describes an error which occurred on the server.
   * </pre>
   *
   * <code>.nakama.realtime.Error error = 11 [json_name = "error"];</code>
   * @return The error.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.Error getError() {
    if (messageCase_ == 11) {
       return (com.heroiclabs.nakama.rtapi.Error) message_;
    }
    return com.heroiclabs.nakama.rtapi.Error.getDefaultInstance();
  }
  /**
   * <pre>
   * Describes an error which occurred on the server.
   * </pre>
   *
   * <code>.nakama.realtime.Error error = 11 [json_name = "error"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.ErrorOrBuilder getErrorOrBuilder() {
    if (messageCase_ == 11) {
       return (com.heroiclabs.nakama.rtapi.Error) message_;
    }
    return com.heroiclabs.nakama.rtapi.Error.getDefaultInstance();
  }

  public static final int MATCH_FIELD_NUMBER = 12;
  /**
   * <pre>
   * Incoming information about a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.Match match = 12 [json_name = "match"];</code>
   * @return Whether the match field is set.
   */
  @java.lang.Override
  public boolean hasMatch() {
    return messageCase_ == 12;
  }
  /**
   * <pre>
   * Incoming information about a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.Match match = 12 [json_name = "match"];</code>
   * @return The match.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.Match getMatch() {
    if (messageCase_ == 12) {
       return (com.heroiclabs.nakama.rtapi.Match) message_;
    }
    return com.heroiclabs.nakama.rtapi.Match.getDefaultInstance();
  }
  /**
   * <pre>
   * Incoming information about a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.Match match = 12 [json_name = "match"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.MatchOrBuilder getMatchOrBuilder() {
    if (messageCase_ == 12) {
       return (com.heroiclabs.nakama.rtapi.Match) message_;
    }
    return com.heroiclabs.nakama.rtapi.Match.getDefaultInstance();
  }

  public static final int MATCH_CREATE_FIELD_NUMBER = 13;
  /**
   * <pre>
   * A client to server request to create a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchCreate match_create = 13 [json_name = "matchCreate"];</code>
   * @return Whether the matchCreate field is set.
   */
  @java.lang.Override
  public boolean hasMatchCreate() {
    return messageCase_ == 13;
  }
  /**
   * <pre>
   * A client to server request to create a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchCreate match_create = 13 [json_name = "matchCreate"];</code>
   * @return The matchCreate.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.MatchCreate getMatchCreate() {
    if (messageCase_ == 13) {
       return (com.heroiclabs.nakama.rtapi.MatchCreate) message_;
    }
    return com.heroiclabs.nakama.rtapi.MatchCreate.getDefaultInstance();
  }
  /**
   * <pre>
   * A client to server request to create a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchCreate match_create = 13 [json_name = "matchCreate"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.MatchCreateOrBuilder getMatchCreateOrBuilder() {
    if (messageCase_ == 13) {
       return (com.heroiclabs.nakama.rtapi.MatchCreate) message_;
    }
    return com.heroiclabs.nakama.rtapi.MatchCreate.getDefaultInstance();
  }

  public static final int MATCH_DATA_FIELD_NUMBER = 14;
  /**
   * <pre>
   * Incoming realtime match data delivered from the server.
   * </pre>
   *
   * <code>.nakama.realtime.MatchData match_data = 14 [json_name = "matchData"];</code>
   * @return Whether the matchData field is set.
   */
  @java.lang.Override
  public boolean hasMatchData() {
    return messageCase_ == 14;
  }
  /**
   * <pre>
   * Incoming realtime match data delivered from the server.
   * </pre>
   *
   * <code>.nakama.realtime.MatchData match_data = 14 [json_name = "matchData"];</code>
   * @return The matchData.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.MatchData getMatchData() {
    if (messageCase_ == 14) {
       return (com.heroiclabs.nakama.rtapi.MatchData) message_;
    }
    return com.heroiclabs.nakama.rtapi.MatchData.getDefaultInstance();
  }
  /**
   * <pre>
   * Incoming realtime match data delivered from the server.
   * </pre>
   *
   * <code>.nakama.realtime.MatchData match_data = 14 [json_name = "matchData"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.MatchDataOrBuilder getMatchDataOrBuilder() {
    if (messageCase_ == 14) {
       return (com.heroiclabs.nakama.rtapi.MatchData) message_;
    }
    return com.heroiclabs.nakama.rtapi.MatchData.getDefaultInstance();
  }

  public static final int MATCH_DATA_SEND_FIELD_NUMBER = 15;
  /**
   * <pre>
   * A client to server request to send data to a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchDataSend match_data_send = 15 [json_name = "matchDataSend"];</code>
   * @return Whether the matchDataSend field is set.
   */
  @java.lang.Override
  public boolean hasMatchDataSend() {
    return messageCase_ == 15;
  }
  /**
   * <pre>
   * A client to server request to send data to a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchDataSend match_data_send = 15 [json_name = "matchDataSend"];</code>
   * @return The matchDataSend.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.MatchDataSend getMatchDataSend() {
    if (messageCase_ == 15) {
       return (com.heroiclabs.nakama.rtapi.MatchDataSend) message_;
    }
    return com.heroiclabs.nakama.rtapi.MatchDataSend.getDefaultInstance();
  }
  /**
   * <pre>
   * A client to server request to send data to a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchDataSend match_data_send = 15 [json_name = "matchDataSend"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.MatchDataSendOrBuilder getMatchDataSendOrBuilder() {
    if (messageCase_ == 15) {
       return (com.heroiclabs.nakama.rtapi.MatchDataSend) message_;
    }
    return com.heroiclabs.nakama.rtapi.MatchDataSend.getDefaultInstance();
  }

  public static final int MATCH_JOIN_FIELD_NUMBER = 16;
  /**
   * <pre>
   * A client to server request to join a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchJoin match_join = 16 [json_name = "matchJoin"];</code>
   * @return Whether the matchJoin field is set.
   */
  @java.lang.Override
  public boolean hasMatchJoin() {
    return messageCase_ == 16;
  }
  /**
   * <pre>
   * A client to server request to join a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchJoin match_join = 16 [json_name = "matchJoin"];</code>
   * @return The matchJoin.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.MatchJoin getMatchJoin() {
    if (messageCase_ == 16) {
       return (com.heroiclabs.nakama.rtapi.MatchJoin) message_;
    }
    return com.heroiclabs.nakama.rtapi.MatchJoin.getDefaultInstance();
  }
  /**
   * <pre>
   * A client to server request to join a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchJoin match_join = 16 [json_name = "matchJoin"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.MatchJoinOrBuilder getMatchJoinOrBuilder() {
    if (messageCase_ == 16) {
       return (com.heroiclabs.nakama.rtapi.MatchJoin) message_;
    }
    return com.heroiclabs.nakama.rtapi.MatchJoin.getDefaultInstance();
  }

  public static final int MATCH_LEAVE_FIELD_NUMBER = 17;
  /**
   * <pre>
   * A client to server request to leave a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchLeave match_leave = 17 [json_name = "matchLeave"];</code>
   * @return Whether the matchLeave field is set.
   */
  @java.lang.Override
  public boolean hasMatchLeave() {
    return messageCase_ == 17;
  }
  /**
   * <pre>
   * A client to server request to leave a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchLeave match_leave = 17 [json_name = "matchLeave"];</code>
   * @return The matchLeave.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.MatchLeave getMatchLeave() {
    if (messageCase_ == 17) {
       return (com.heroiclabs.nakama.rtapi.MatchLeave) message_;
    }
    return com.heroiclabs.nakama.rtapi.MatchLeave.getDefaultInstance();
  }
  /**
   * <pre>
   * A client to server request to leave a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchLeave match_leave = 17 [json_name = "matchLeave"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.MatchLeaveOrBuilder getMatchLeaveOrBuilder() {
    if (messageCase_ == 17) {
       return (com.heroiclabs.nakama.rtapi.MatchLeave) message_;
    }
    return com.heroiclabs.nakama.rtapi.MatchLeave.getDefaultInstance();
  }

  public static final int MATCH_PRESENCE_EVENT_FIELD_NUMBER = 18;
  /**
   * <pre>
   * Presence update for a particular realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchPresenceEvent match_presence_event = 18 [json_name = "matchPresenceEvent"];</code>
   * @return Whether the matchPresenceEvent field is set.
   */
  @java.lang.Override
  public boolean hasMatchPresenceEvent() {
    return messageCase_ == 18;
  }
  /**
   * <pre>
   * Presence update for a particular realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchPresenceEvent match_presence_event = 18 [json_name = "matchPresenceEvent"];</code>
   * @return The matchPresenceEvent.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.MatchPresenceEvent getMatchPresenceEvent() {
    if (messageCase_ == 18) {
       return (com.heroiclabs.nakama.rtapi.MatchPresenceEvent) message_;
    }
    return com.heroiclabs.nakama.rtapi.MatchPresenceEvent.getDefaultInstance();
  }
  /**
   * <pre>
   * Presence update for a particular realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchPresenceEvent match_presence_event = 18 [json_name = "matchPresenceEvent"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.MatchPresenceEventOrBuilder getMatchPresenceEventOrBuilder() {
    if (messageCase_ == 18) {
       return (com.heroiclabs.nakama.rtapi.MatchPresenceEvent) message_;
    }
    return com.heroiclabs.nakama.rtapi.MatchPresenceEvent.getDefaultInstance();
  }

  public static final int MATCHMAKER_ADD_FIELD_NUMBER = 19;
  /**
   * <pre>
   * Submit a new matchmaking process request.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerAdd matchmaker_add = 19 [json_name = "matchmakerAdd"];</code>
   * @return Whether the matchmakerAdd field is set.
   */
  @java.lang.Override
  public boolean hasMatchmakerAdd() {
    return messageCase_ == 19;
  }
  /**
   * <pre>
   * Submit a new matchmaking process request.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerAdd matchmaker_add = 19 [json_name = "matchmakerAdd"];</code>
   * @return The matchmakerAdd.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.MatchmakerAdd getMatchmakerAdd() {
    if (messageCase_ == 19) {
       return (com.heroiclabs.nakama.rtapi.MatchmakerAdd) message_;
    }
    return com.heroiclabs.nakama.rtapi.MatchmakerAdd.getDefaultInstance();
  }
  /**
   * <pre>
   * Submit a new matchmaking process request.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerAdd matchmaker_add = 19 [json_name = "matchmakerAdd"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.MatchmakerAddOrBuilder getMatchmakerAddOrBuilder() {
    if (messageCase_ == 19) {
       return (com.heroiclabs.nakama.rtapi.MatchmakerAdd) message_;
    }
    return com.heroiclabs.nakama.rtapi.MatchmakerAdd.getDefaultInstance();
  }

  public static final int MATCHMAKER_MATCHED_FIELD_NUMBER = 20;
  /**
   * <pre>
   * A successful matchmaking result.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerMatched matchmaker_matched = 20 [json_name = "matchmakerMatched"];</code>
   * @return Whether the matchmakerMatched field is set.
   */
  @java.lang.Override
  public boolean hasMatchmakerMatched() {
    return messageCase_ == 20;
  }
  /**
   * <pre>
   * A successful matchmaking result.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerMatched matchmaker_matched = 20 [json_name = "matchmakerMatched"];</code>
   * @return The matchmakerMatched.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.MatchmakerMatched getMatchmakerMatched() {
    if (messageCase_ == 20) {
       return (com.heroiclabs.nakama.rtapi.MatchmakerMatched) message_;
    }
    return com.heroiclabs.nakama.rtapi.MatchmakerMatched.getDefaultInstance();
  }
  /**
   * <pre>
   * A successful matchmaking result.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerMatched matchmaker_matched = 20 [json_name = "matchmakerMatched"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.MatchmakerMatchedOrBuilder getMatchmakerMatchedOrBuilder() {
    if (messageCase_ == 20) {
       return (com.heroiclabs.nakama.rtapi.MatchmakerMatched) message_;
    }
    return com.heroiclabs.nakama.rtapi.MatchmakerMatched.getDefaultInstance();
  }

  public static final int MATCHMAKER_REMOVE_FIELD_NUMBER = 21;
  /**
   * <pre>
   * Cancel a matchmaking process using a ticket.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerRemove matchmaker_remove = 21 [json_name = "matchmakerRemove"];</code>
   * @return Whether the matchmakerRemove field is set.
   */
  @java.lang.Override
  public boolean hasMatchmakerRemove() {
    return messageCase_ == 21;
  }
  /**
   * <pre>
   * Cancel a matchmaking process using a ticket.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerRemove matchmaker_remove = 21 [json_name = "matchmakerRemove"];</code>
   * @return The matchmakerRemove.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.MatchmakerRemove getMatchmakerRemove() {
    if (messageCase_ == 21) {
       return (com.heroiclabs.nakama.rtapi.MatchmakerRemove) message_;
    }
    return com.heroiclabs.nakama.rtapi.MatchmakerRemove.getDefaultInstance();
  }
  /**
   * <pre>
   * Cancel a matchmaking process using a ticket.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerRemove matchmaker_remove = 21 [json_name = "matchmakerRemove"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.MatchmakerRemoveOrBuilder getMatchmakerRemoveOrBuilder() {
    if (messageCase_ == 21) {
       return (com.heroiclabs.nakama.rtapi.MatchmakerRemove) message_;
    }
    return com.heroiclabs.nakama.rtapi.MatchmakerRemove.getDefaultInstance();
  }

  public static final int MATCHMAKER_TICKET_FIELD_NUMBER = 22;
  /**
   * <pre>
   * A response from starting a new matchmaking process.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerTicket matchmaker_ticket = 22 [json_name = "matchmakerTicket"];</code>
   * @return Whether the matchmakerTicket field is set.
   */
  @java.lang.Override
  public boolean hasMatchmakerTicket() {
    return messageCase_ == 22;
  }
  /**
   * <pre>
   * A response from starting a new matchmaking process.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerTicket matchmaker_ticket = 22 [json_name = "matchmakerTicket"];</code>
   * @return The matchmakerTicket.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.MatchmakerTicket getMatchmakerTicket() {
    if (messageCase_ == 22) {
       return (com.heroiclabs.nakama.rtapi.MatchmakerTicket) message_;
    }
    return com.heroiclabs.nakama.rtapi.MatchmakerTicket.getDefaultInstance();
  }
  /**
   * <pre>
   * A response from starting a new matchmaking process.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerTicket matchmaker_ticket = 22 [json_name = "matchmakerTicket"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.MatchmakerTicketOrBuilder getMatchmakerTicketOrBuilder() {
    if (messageCase_ == 22) {
       return (com.heroiclabs.nakama.rtapi.MatchmakerTicket) message_;
    }
    return com.heroiclabs.nakama.rtapi.MatchmakerTicket.getDefaultInstance();
  }

  public static final int NOTIFICATIONS_FIELD_NUMBER = 23;
  /**
   * <pre>
   * Notifications send by the server.
   * </pre>
   *
   * <code>.nakama.realtime.Notifications notifications = 23 [json_name = "notifications"];</code>
   * @return Whether the notifications field is set.
   */
  @java.lang.Override
  public boolean hasNotifications() {
    return messageCase_ == 23;
  }
  /**
   * <pre>
   * Notifications send by the server.
   * </pre>
   *
   * <code>.nakama.realtime.Notifications notifications = 23 [json_name = "notifications"];</code>
   * @return The notifications.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.Notifications getNotifications() {
    if (messageCase_ == 23) {
       return (com.heroiclabs.nakama.rtapi.Notifications) message_;
    }
    return com.heroiclabs.nakama.rtapi.Notifications.getDefaultInstance();
  }
  /**
   * <pre>
   * Notifications send by the server.
   * </pre>
   *
   * <code>.nakama.realtime.Notifications notifications = 23 [json_name = "notifications"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.NotificationsOrBuilder getNotificationsOrBuilder() {
    if (messageCase_ == 23) {
       return (com.heroiclabs.nakama.rtapi.Notifications) message_;
    }
    return com.heroiclabs.nakama.rtapi.Notifications.getDefaultInstance();
  }

  public static final int RPC_FIELD_NUMBER = 24;
  /**
   * <pre>
   * RPC call or response.
   * </pre>
   *
   * <code>.nakama.api.Rpc rpc = 24 [json_name = "rpc"];</code>
   * @return Whether the rpc field is set.
   */
  @java.lang.Override
  public boolean hasRpc() {
    return messageCase_ == 24;
  }
  /**
   * <pre>
   * RPC call or response.
   * </pre>
   *
   * <code>.nakama.api.Rpc rpc = 24 [json_name = "rpc"];</code>
   * @return The rpc.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.api.Rpc getRpc() {
    if (messageCase_ == 24) {
       return (com.heroiclabs.nakama.api.Rpc) message_;
    }
    return com.heroiclabs.nakama.api.Rpc.getDefaultInstance();
  }
  /**
   * <pre>
   * RPC call or response.
   * </pre>
   *
   * <code>.nakama.api.Rpc rpc = 24 [json_name = "rpc"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.api.RpcOrBuilder getRpcOrBuilder() {
    if (messageCase_ == 24) {
       return (com.heroiclabs.nakama.api.Rpc) message_;
    }
    return com.heroiclabs.nakama.api.Rpc.getDefaultInstance();
  }

  public static final int STATUS_FIELD_NUMBER = 25;
  /**
   * <pre>
   * An incoming status snapshot for some set of users.
   * </pre>
   *
   * <code>.nakama.realtime.Status status = 25 [json_name = "status"];</code>
   * @return Whether the status field is set.
   */
  @java.lang.Override
  public boolean hasStatus() {
    return messageCase_ == 25;
  }
  /**
   * <pre>
   * An incoming status snapshot for some set of users.
   * </pre>
   *
   * <code>.nakama.realtime.Status status = 25 [json_name = "status"];</code>
   * @return The status.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.Status getStatus() {
    if (messageCase_ == 25) {
       return (com.heroiclabs.nakama.rtapi.Status) message_;
    }
    return com.heroiclabs.nakama.rtapi.Status.getDefaultInstance();
  }
  /**
   * <pre>
   * An incoming status snapshot for some set of users.
   * </pre>
   *
   * <code>.nakama.realtime.Status status = 25 [json_name = "status"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.StatusOrBuilder getStatusOrBuilder() {
    if (messageCase_ == 25) {
       return (com.heroiclabs.nakama.rtapi.Status) message_;
    }
    return com.heroiclabs.nakama.rtapi.Status.getDefaultInstance();
  }

  public static final int STATUS_FOLLOW_FIELD_NUMBER = 26;
  /**
   * <pre>
   * Start following some set of users to receive their status updates.
   * </pre>
   *
   * <code>.nakama.realtime.StatusFollow status_follow = 26 [json_name = "statusFollow"];</code>
   * @return Whether the statusFollow field is set.
   */
  @java.lang.Override
  public boolean hasStatusFollow() {
    return messageCase_ == 26;
  }
  /**
   * <pre>
   * Start following some set of users to receive their status updates.
   * </pre>
   *
   * <code>.nakama.realtime.StatusFollow status_follow = 26 [json_name = "statusFollow"];</code>
   * @return The statusFollow.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.StatusFollow getStatusFollow() {
    if (messageCase_ == 26) {
       return (com.heroiclabs.nakama.rtapi.StatusFollow) message_;
    }
    return com.heroiclabs.nakama.rtapi.StatusFollow.getDefaultInstance();
  }
  /**
   * <pre>
   * Start following some set of users to receive their status updates.
   * </pre>
   *
   * <code>.nakama.realtime.StatusFollow status_follow = 26 [json_name = "statusFollow"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.StatusFollowOrBuilder getStatusFollowOrBuilder() {
    if (messageCase_ == 26) {
       return (com.heroiclabs.nakama.rtapi.StatusFollow) message_;
    }
    return com.heroiclabs.nakama.rtapi.StatusFollow.getDefaultInstance();
  }

  public static final int STATUS_PRESENCE_EVENT_FIELD_NUMBER = 27;
  /**
   * <pre>
   * An incoming status update.
   * </pre>
   *
   * <code>.nakama.realtime.StatusPresenceEvent status_presence_event = 27 [json_name = "statusPresenceEvent"];</code>
   * @return Whether the statusPresenceEvent field is set.
   */
  @java.lang.Override
  public boolean hasStatusPresenceEvent() {
    return messageCase_ == 27;
  }
  /**
   * <pre>
   * An incoming status update.
   * </pre>
   *
   * <code>.nakama.realtime.StatusPresenceEvent status_presence_event = 27 [json_name = "statusPresenceEvent"];</code>
   * @return The statusPresenceEvent.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.StatusPresenceEvent getStatusPresenceEvent() {
    if (messageCase_ == 27) {
       return (com.heroiclabs.nakama.rtapi.StatusPresenceEvent) message_;
    }
    return com.heroiclabs.nakama.rtapi.StatusPresenceEvent.getDefaultInstance();
  }
  /**
   * <pre>
   * An incoming status update.
   * </pre>
   *
   * <code>.nakama.realtime.StatusPresenceEvent status_presence_event = 27 [json_name = "statusPresenceEvent"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.StatusPresenceEventOrBuilder getStatusPresenceEventOrBuilder() {
    if (messageCase_ == 27) {
       return (com.heroiclabs.nakama.rtapi.StatusPresenceEvent) message_;
    }
    return com.heroiclabs.nakama.rtapi.StatusPresenceEvent.getDefaultInstance();
  }

  public static final int STATUS_UNFOLLOW_FIELD_NUMBER = 28;
  /**
   * <pre>
   * Stop following some set of users to no longer receive their status updates.
   * </pre>
   *
   * <code>.nakama.realtime.StatusUnfollow status_unfollow = 28 [json_name = "statusUnfollow"];</code>
   * @return Whether the statusUnfollow field is set.
   */
  @java.lang.Override
  public boolean hasStatusUnfollow() {
    return messageCase_ == 28;
  }
  /**
   * <pre>
   * Stop following some set of users to no longer receive their status updates.
   * </pre>
   *
   * <code>.nakama.realtime.StatusUnfollow status_unfollow = 28 [json_name = "statusUnfollow"];</code>
   * @return The statusUnfollow.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.StatusUnfollow getStatusUnfollow() {
    if (messageCase_ == 28) {
       return (com.heroiclabs.nakama.rtapi.StatusUnfollow) message_;
    }
    return com.heroiclabs.nakama.rtapi.StatusUnfollow.getDefaultInstance();
  }
  /**
   * <pre>
   * Stop following some set of users to no longer receive their status updates.
   * </pre>
   *
   * <code>.nakama.realtime.StatusUnfollow status_unfollow = 28 [json_name = "statusUnfollow"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.StatusUnfollowOrBuilder getStatusUnfollowOrBuilder() {
    if (messageCase_ == 28) {
       return (com.heroiclabs.nakama.rtapi.StatusUnfollow) message_;
    }
    return com.heroiclabs.nakama.rtapi.StatusUnfollow.getDefaultInstance();
  }

  public static final int STATUS_UPDATE_FIELD_NUMBER = 29;
  /**
   * <pre>
   * Set the user's own status.
   * </pre>
   *
   * <code>.nakama.realtime.StatusUpdate status_update = 29 [json_name = "statusUpdate"];</code>
   * @return Whether the statusUpdate field is set.
   */
  @java.lang.Override
  public boolean hasStatusUpdate() {
    return messageCase_ == 29;
  }
  /**
   * <pre>
   * Set the user's own status.
   * </pre>
   *
   * <code>.nakama.realtime.StatusUpdate status_update = 29 [json_name = "statusUpdate"];</code>
   * @return The statusUpdate.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.StatusUpdate getStatusUpdate() {
    if (messageCase_ == 29) {
       return (com.heroiclabs.nakama.rtapi.StatusUpdate) message_;
    }
    return com.heroiclabs.nakama.rtapi.StatusUpdate.getDefaultInstance();
  }
  /**
   * <pre>
   * Set the user's own status.
   * </pre>
   *
   * <code>.nakama.realtime.StatusUpdate status_update = 29 [json_name = "statusUpdate"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.StatusUpdateOrBuilder getStatusUpdateOrBuilder() {
    if (messageCase_ == 29) {
       return (com.heroiclabs.nakama.rtapi.StatusUpdate) message_;
    }
    return com.heroiclabs.nakama.rtapi.StatusUpdate.getDefaultInstance();
  }

  public static final int STREAM_DATA_FIELD_NUMBER = 30;
  /**
   * <pre>
   * A data message delivered over a stream.
   * </pre>
   *
   * <code>.nakama.realtime.StreamData stream_data = 30 [json_name = "streamData"];</code>
   * @return Whether the streamData field is set.
   */
  @java.lang.Override
  public boolean hasStreamData() {
    return messageCase_ == 30;
  }
  /**
   * <pre>
   * A data message delivered over a stream.
   * </pre>
   *
   * <code>.nakama.realtime.StreamData stream_data = 30 [json_name = "streamData"];</code>
   * @return The streamData.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.StreamData getStreamData() {
    if (messageCase_ == 30) {
       return (com.heroiclabs.nakama.rtapi.StreamData) message_;
    }
    return com.heroiclabs.nakama.rtapi.StreamData.getDefaultInstance();
  }
  /**
   * <pre>
   * A data message delivered over a stream.
   * </pre>
   *
   * <code>.nakama.realtime.StreamData stream_data = 30 [json_name = "streamData"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.StreamDataOrBuilder getStreamDataOrBuilder() {
    if (messageCase_ == 30) {
       return (com.heroiclabs.nakama.rtapi.StreamData) message_;
    }
    return com.heroiclabs.nakama.rtapi.StreamData.getDefaultInstance();
  }

  public static final int STREAM_PRESENCE_EVENT_FIELD_NUMBER = 31;
  /**
   * <pre>
   * Presence update for a particular stream.
   * </pre>
   *
   * <code>.nakama.realtime.StreamPresenceEvent stream_presence_event = 31 [json_name = "streamPresenceEvent"];</code>
   * @return Whether the streamPresenceEvent field is set.
   */
  @java.lang.Override
  public boolean hasStreamPresenceEvent() {
    return messageCase_ == 31;
  }
  /**
   * <pre>
   * Presence update for a particular stream.
   * </pre>
   *
   * <code>.nakama.realtime.StreamPresenceEvent stream_presence_event = 31 [json_name = "streamPresenceEvent"];</code>
   * @return The streamPresenceEvent.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.StreamPresenceEvent getStreamPresenceEvent() {
    if (messageCase_ == 31) {
       return (com.heroiclabs.nakama.rtapi.StreamPresenceEvent) message_;
    }
    return com.heroiclabs.nakama.rtapi.StreamPresenceEvent.getDefaultInstance();
  }
  /**
   * <pre>
   * Presence update for a particular stream.
   * </pre>
   *
   * <code>.nakama.realtime.StreamPresenceEvent stream_presence_event = 31 [json_name = "streamPresenceEvent"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.StreamPresenceEventOrBuilder getStreamPresenceEventOrBuilder() {
    if (messageCase_ == 31) {
       return (com.heroiclabs.nakama.rtapi.StreamPresenceEvent) message_;
    }
    return com.heroiclabs.nakama.rtapi.StreamPresenceEvent.getDefaultInstance();
  }

  public static final int PING_FIELD_NUMBER = 32;
  /**
   * <pre>
   * Application-level heartbeat and connection check.
   * </pre>
   *
   * <code>.nakama.realtime.Ping ping = 32 [json_name = "ping"];</code>
   * @return Whether the ping field is set.
   */
  @java.lang.Override
  public boolean hasPing() {
    return messageCase_ == 32;
  }
  /**
   * <pre>
   * Application-level heartbeat and connection check.
   * </pre>
   *
   * <code>.nakama.realtime.Ping ping = 32 [json_name = "ping"];</code>
   * @return The ping.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.Ping getPing() {
    if (messageCase_ == 32) {
       return (com.heroiclabs.nakama.rtapi.Ping) message_;
    }
    return com.heroiclabs.nakama.rtapi.Ping.getDefaultInstance();
  }
  /**
   * <pre>
   * Application-level heartbeat and connection check.
   * </pre>
   *
   * <code>.nakama.realtime.Ping ping = 32 [json_name = "ping"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.PingOrBuilder getPingOrBuilder() {
    if (messageCase_ == 32) {
       return (com.heroiclabs.nakama.rtapi.Ping) message_;
    }
    return com.heroiclabs.nakama.rtapi.Ping.getDefaultInstance();
  }

  public static final int PONG_FIELD_NUMBER = 33;
  /**
   * <pre>
   * Application-level heartbeat and connection check response.
   * </pre>
   *
   * <code>.nakama.realtime.Pong pong = 33 [json_name = "pong"];</code>
   * @return Whether the pong field is set.
   */
  @java.lang.Override
  public boolean hasPong() {
    return messageCase_ == 33;
  }
  /**
   * <pre>
   * Application-level heartbeat and connection check response.
   * </pre>
   *
   * <code>.nakama.realtime.Pong pong = 33 [json_name = "pong"];</code>
   * @return The pong.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.Pong getPong() {
    if (messageCase_ == 33) {
       return (com.heroiclabs.nakama.rtapi.Pong) message_;
    }
    return com.heroiclabs.nakama.rtapi.Pong.getDefaultInstance();
  }
  /**
   * <pre>
   * Application-level heartbeat and connection check response.
   * </pre>
   *
   * <code>.nakama.realtime.Pong pong = 33 [json_name = "pong"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.PongOrBuilder getPongOrBuilder() {
    if (messageCase_ == 33) {
       return (com.heroiclabs.nakama.rtapi.Pong) message_;
    }
    return com.heroiclabs.nakama.rtapi.Pong.getDefaultInstance();
  }

  public static final int PARTY_FIELD_NUMBER = 34;
  /**
   * <pre>
   * Incoming information about a party.
   * </pre>
   *
   * <code>.nakama.realtime.Party party = 34 [json_name = "party"];</code>
   * @return Whether the party field is set.
   */
  @java.lang.Override
  public boolean hasParty() {
    return messageCase_ == 34;
  }
  /**
   * <pre>
   * Incoming information about a party.
   * </pre>
   *
   * <code>.nakama.realtime.Party party = 34 [json_name = "party"];</code>
   * @return The party.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.Party getParty() {
    if (messageCase_ == 34) {
       return (com.heroiclabs.nakama.rtapi.Party) message_;
    }
    return com.heroiclabs.nakama.rtapi.Party.getDefaultInstance();
  }
  /**
   * <pre>
   * Incoming information about a party.
   * </pre>
   *
   * <code>.nakama.realtime.Party party = 34 [json_name = "party"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.PartyOrBuilder getPartyOrBuilder() {
    if (messageCase_ == 34) {
       return (com.heroiclabs.nakama.rtapi.Party) message_;
    }
    return com.heroiclabs.nakama.rtapi.Party.getDefaultInstance();
  }

  public static final int PARTY_CREATE_FIELD_NUMBER = 35;
  /**
   * <pre>
   * Create a party.
   * </pre>
   *
   * <code>.nakama.realtime.PartyCreate party_create = 35 [json_name = "partyCreate"];</code>
   * @return Whether the partyCreate field is set.
   */
  @java.lang.Override
  public boolean hasPartyCreate() {
    return messageCase_ == 35;
  }
  /**
   * <pre>
   * Create a party.
   * </pre>
   *
   * <code>.nakama.realtime.PartyCreate party_create = 35 [json_name = "partyCreate"];</code>
   * @return The partyCreate.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.PartyCreate getPartyCreate() {
    if (messageCase_ == 35) {
       return (com.heroiclabs.nakama.rtapi.PartyCreate) message_;
    }
    return com.heroiclabs.nakama.rtapi.PartyCreate.getDefaultInstance();
  }
  /**
   * <pre>
   * Create a party.
   * </pre>
   *
   * <code>.nakama.realtime.PartyCreate party_create = 35 [json_name = "partyCreate"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.PartyCreateOrBuilder getPartyCreateOrBuilder() {
    if (messageCase_ == 35) {
       return (com.heroiclabs.nakama.rtapi.PartyCreate) message_;
    }
    return com.heroiclabs.nakama.rtapi.PartyCreate.getDefaultInstance();
  }

  public static final int PARTY_JOIN_FIELD_NUMBER = 36;
  /**
   * <pre>
   * Join a party, or request to join if the party is not open.
   * </pre>
   *
   * <code>.nakama.realtime.PartyJoin party_join = 36 [json_name = "partyJoin"];</code>
   * @return Whether the partyJoin field is set.
   */
  @java.lang.Override
  public boolean hasPartyJoin() {
    return messageCase_ == 36;
  }
  /**
   * <pre>
   * Join a party, or request to join if the party is not open.
   * </pre>
   *
   * <code>.nakama.realtime.PartyJoin party_join = 36 [json_name = "partyJoin"];</code>
   * @return The partyJoin.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.PartyJoin getPartyJoin() {
    if (messageCase_ == 36) {
       return (com.heroiclabs.nakama.rtapi.PartyJoin) message_;
    }
    return com.heroiclabs.nakama.rtapi.PartyJoin.getDefaultInstance();
  }
  /**
   * <pre>
   * Join a party, or request to join if the party is not open.
   * </pre>
   *
   * <code>.nakama.realtime.PartyJoin party_join = 36 [json_name = "partyJoin"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.PartyJoinOrBuilder getPartyJoinOrBuilder() {
    if (messageCase_ == 36) {
       return (com.heroiclabs.nakama.rtapi.PartyJoin) message_;
    }
    return com.heroiclabs.nakama.rtapi.PartyJoin.getDefaultInstance();
  }

  public static final int PARTY_LEAVE_FIELD_NUMBER = 37;
  /**
   * <pre>
   * Leave a party.
   * </pre>
   *
   * <code>.nakama.realtime.PartyLeave party_leave = 37 [json_name = "partyLeave"];</code>
   * @return Whether the partyLeave field is set.
   */
  @java.lang.Override
  public boolean hasPartyLeave() {
    return messageCase_ == 37;
  }
  /**
   * <pre>
   * Leave a party.
   * </pre>
   *
   * <code>.nakama.realtime.PartyLeave party_leave = 37 [json_name = "partyLeave"];</code>
   * @return The partyLeave.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.PartyLeave getPartyLeave() {
    if (messageCase_ == 37) {
       return (com.heroiclabs.nakama.rtapi.PartyLeave) message_;
    }
    return com.heroiclabs.nakama.rtapi.PartyLeave.getDefaultInstance();
  }
  /**
   * <pre>
   * Leave a party.
   * </pre>
   *
   * <code>.nakama.realtime.PartyLeave party_leave = 37 [json_name = "partyLeave"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.PartyLeaveOrBuilder getPartyLeaveOrBuilder() {
    if (messageCase_ == 37) {
       return (com.heroiclabs.nakama.rtapi.PartyLeave) message_;
    }
    return com.heroiclabs.nakama.rtapi.PartyLeave.getDefaultInstance();
  }

  public static final int PARTY_PROMOTE_FIELD_NUMBER = 38;
  /**
   * <pre>
   * Promote a new party leader.
   * </pre>
   *
   * <code>.nakama.realtime.PartyPromote party_promote = 38 [json_name = "partyPromote"];</code>
   * @return Whether the partyPromote field is set.
   */
  @java.lang.Override
  public boolean hasPartyPromote() {
    return messageCase_ == 38;
  }
  /**
   * <pre>
   * Promote a new party leader.
   * </pre>
   *
   * <code>.nakama.realtime.PartyPromote party_promote = 38 [json_name = "partyPromote"];</code>
   * @return The partyPromote.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.PartyPromote getPartyPromote() {
    if (messageCase_ == 38) {
       return (com.heroiclabs.nakama.rtapi.PartyPromote) message_;
    }
    return com.heroiclabs.nakama.rtapi.PartyPromote.getDefaultInstance();
  }
  /**
   * <pre>
   * Promote a new party leader.
   * </pre>
   *
   * <code>.nakama.realtime.PartyPromote party_promote = 38 [json_name = "partyPromote"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.PartyPromoteOrBuilder getPartyPromoteOrBuilder() {
    if (messageCase_ == 38) {
       return (com.heroiclabs.nakama.rtapi.PartyPromote) message_;
    }
    return com.heroiclabs.nakama.rtapi.PartyPromote.getDefaultInstance();
  }

  public static final int PARTY_LEADER_FIELD_NUMBER = 39;
  /**
   * <pre>
   * Announcement of a new party leader.
   * </pre>
   *
   * <code>.nakama.realtime.PartyLeader party_leader = 39 [json_name = "partyLeader"];</code>
   * @return Whether the partyLeader field is set.
   */
  @java.lang.Override
  public boolean hasPartyLeader() {
    return messageCase_ == 39;
  }
  /**
   * <pre>
   * Announcement of a new party leader.
   * </pre>
   *
   * <code>.nakama.realtime.PartyLeader party_leader = 39 [json_name = "partyLeader"];</code>
   * @return The partyLeader.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.PartyLeader getPartyLeader() {
    if (messageCase_ == 39) {
       return (com.heroiclabs.nakama.rtapi.PartyLeader) message_;
    }
    return com.heroiclabs.nakama.rtapi.PartyLeader.getDefaultInstance();
  }
  /**
   * <pre>
   * Announcement of a new party leader.
   * </pre>
   *
   * <code>.nakama.realtime.PartyLeader party_leader = 39 [json_name = "partyLeader"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.PartyLeaderOrBuilder getPartyLeaderOrBuilder() {
    if (messageCase_ == 39) {
       return (com.heroiclabs.nakama.rtapi.PartyLeader) message_;
    }
    return com.heroiclabs.nakama.rtapi.PartyLeader.getDefaultInstance();
  }

  public static final int PARTY_ACCEPT_FIELD_NUMBER = 40;
  /**
   * <pre>
   * Accept a request to join.
   * </pre>
   *
   * <code>.nakama.realtime.PartyAccept party_accept = 40 [json_name = "partyAccept"];</code>
   * @return Whether the partyAccept field is set.
   */
  @java.lang.Override
  public boolean hasPartyAccept() {
    return messageCase_ == 40;
  }
  /**
   * <pre>
   * Accept a request to join.
   * </pre>
   *
   * <code>.nakama.realtime.PartyAccept party_accept = 40 [json_name = "partyAccept"];</code>
   * @return The partyAccept.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.PartyAccept getPartyAccept() {
    if (messageCase_ == 40) {
       return (com.heroiclabs.nakama.rtapi.PartyAccept) message_;
    }
    return com.heroiclabs.nakama.rtapi.PartyAccept.getDefaultInstance();
  }
  /**
   * <pre>
   * Accept a request to join.
   * </pre>
   *
   * <code>.nakama.realtime.PartyAccept party_accept = 40 [json_name = "partyAccept"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.PartyAcceptOrBuilder getPartyAcceptOrBuilder() {
    if (messageCase_ == 40) {
       return (com.heroiclabs.nakama.rtapi.PartyAccept) message_;
    }
    return com.heroiclabs.nakama.rtapi.PartyAccept.getDefaultInstance();
  }

  public static final int PARTY_REMOVE_FIELD_NUMBER = 41;
  /**
   * <pre>
   * Kick a party member, or decline a request to join.
   * </pre>
   *
   * <code>.nakama.realtime.PartyRemove party_remove = 41 [json_name = "partyRemove"];</code>
   * @return Whether the partyRemove field is set.
   */
  @java.lang.Override
  public boolean hasPartyRemove() {
    return messageCase_ == 41;
  }
  /**
   * <pre>
   * Kick a party member, or decline a request to join.
   * </pre>
   *
   * <code>.nakama.realtime.PartyRemove party_remove = 41 [json_name = "partyRemove"];</code>
   * @return The partyRemove.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.PartyRemove getPartyRemove() {
    if (messageCase_ == 41) {
       return (com.heroiclabs.nakama.rtapi.PartyRemove) message_;
    }
    return com.heroiclabs.nakama.rtapi.PartyRemove.getDefaultInstance();
  }
  /**
   * <pre>
   * Kick a party member, or decline a request to join.
   * </pre>
   *
   * <code>.nakama.realtime.PartyRemove party_remove = 41 [json_name = "partyRemove"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.PartyRemoveOrBuilder getPartyRemoveOrBuilder() {
    if (messageCase_ == 41) {
       return (com.heroiclabs.nakama.rtapi.PartyRemove) message_;
    }
    return com.heroiclabs.nakama.rtapi.PartyRemove.getDefaultInstance();
  }

  public static final int PARTY_CLOSE_FIELD_NUMBER = 42;
  /**
   * <pre>
   * End a party, kicking all party members and closing it.
   * </pre>
   *
   * <code>.nakama.realtime.PartyClose party_close = 42 [json_name = "partyClose"];</code>
   * @return Whether the partyClose field is set.
   */
  @java.lang.Override
  public boolean hasPartyClose() {
    return messageCase_ == 42;
  }
  /**
   * <pre>
   * End a party, kicking all party members and closing it.
   * </pre>
   *
   * <code>.nakama.realtime.PartyClose party_close = 42 [json_name = "partyClose"];</code>
   * @return The partyClose.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.PartyClose getPartyClose() {
    if (messageCase_ == 42) {
       return (com.heroiclabs.nakama.rtapi.PartyClose) message_;
    }
    return com.heroiclabs.nakama.rtapi.PartyClose.getDefaultInstance();
  }
  /**
   * <pre>
   * End a party, kicking all party members and closing it.
   * </pre>
   *
   * <code>.nakama.realtime.PartyClose party_close = 42 [json_name = "partyClose"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.PartyCloseOrBuilder getPartyCloseOrBuilder() {
    if (messageCase_ == 42) {
       return (com.heroiclabs.nakama.rtapi.PartyClose) message_;
    }
    return com.heroiclabs.nakama.rtapi.PartyClose.getDefaultInstance();
  }

  public static final int PARTY_JOIN_REQUEST_LIST_FIELD_NUMBER = 43;
  /**
   * <pre>
   * Request a list of pending join requests for a party.
   * </pre>
   *
   * <code>.nakama.realtime.PartyJoinRequestList party_join_request_list = 43 [json_name = "partyJoinRequestList"];</code>
   * @return Whether the partyJoinRequestList field is set.
   */
  @java.lang.Override
  public boolean hasPartyJoinRequestList() {
    return messageCase_ == 43;
  }
  /**
   * <pre>
   * Request a list of pending join requests for a party.
   * </pre>
   *
   * <code>.nakama.realtime.PartyJoinRequestList party_join_request_list = 43 [json_name = "partyJoinRequestList"];</code>
   * @return The partyJoinRequestList.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.PartyJoinRequestList getPartyJoinRequestList() {
    if (messageCase_ == 43) {
       return (com.heroiclabs.nakama.rtapi.PartyJoinRequestList) message_;
    }
    return com.heroiclabs.nakama.rtapi.PartyJoinRequestList.getDefaultInstance();
  }
  /**
   * <pre>
   * Request a list of pending join requests for a party.
   * </pre>
   *
   * <code>.nakama.realtime.PartyJoinRequestList party_join_request_list = 43 [json_name = "partyJoinRequestList"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.PartyJoinRequestListOrBuilder getPartyJoinRequestListOrBuilder() {
    if (messageCase_ == 43) {
       return (com.heroiclabs.nakama.rtapi.PartyJoinRequestList) message_;
    }
    return com.heroiclabs.nakama.rtapi.PartyJoinRequestList.getDefaultInstance();
  }

  public static final int PARTY_JOIN_REQUEST_FIELD_NUMBER = 44;
  /**
   * <pre>
   * Incoming notification for one or more new presences attempting to join the party.
   * </pre>
   *
   * <code>.nakama.realtime.PartyJoinRequest party_join_request = 44 [json_name = "partyJoinRequest"];</code>
   * @return Whether the partyJoinRequest field is set.
   */
  @java.lang.Override
  public boolean hasPartyJoinRequest() {
    return messageCase_ == 44;
  }
  /**
   * <pre>
   * Incoming notification for one or more new presences attempting to join the party.
   * </pre>
   *
   * <code>.nakama.realtime.PartyJoinRequest party_join_request = 44 [json_name = "partyJoinRequest"];</code>
   * @return The partyJoinRequest.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.PartyJoinRequest getPartyJoinRequest() {
    if (messageCase_ == 44) {
       return (com.heroiclabs.nakama.rtapi.PartyJoinRequest) message_;
    }
    return com.heroiclabs.nakama.rtapi.PartyJoinRequest.getDefaultInstance();
  }
  /**
   * <pre>
   * Incoming notification for one or more new presences attempting to join the party.
   * </pre>
   *
   * <code>.nakama.realtime.PartyJoinRequest party_join_request = 44 [json_name = "partyJoinRequest"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.PartyJoinRequestOrBuilder getPartyJoinRequestOrBuilder() {
    if (messageCase_ == 44) {
       return (com.heroiclabs.nakama.rtapi.PartyJoinRequest) message_;
    }
    return com.heroiclabs.nakama.rtapi.PartyJoinRequest.getDefaultInstance();
  }

  public static final int PARTY_MATCHMAKER_ADD_FIELD_NUMBER = 45;
  /**
   * <pre>
   * Begin matchmaking as a party.
   * </pre>
   *
   * <code>.nakama.realtime.PartyMatchmakerAdd party_matchmaker_add = 45 [json_name = "partyMatchmakerAdd"];</code>
   * @return Whether the partyMatchmakerAdd field is set.
   */
  @java.lang.Override
  public boolean hasPartyMatchmakerAdd() {
    return messageCase_ == 45;
  }
  /**
   * <pre>
   * Begin matchmaking as a party.
   * </pre>
   *
   * <code>.nakama.realtime.PartyMatchmakerAdd party_matchmaker_add = 45 [json_name = "partyMatchmakerAdd"];</code>
   * @return The partyMatchmakerAdd.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.PartyMatchmakerAdd getPartyMatchmakerAdd() {
    if (messageCase_ == 45) {
       return (com.heroiclabs.nakama.rtapi.PartyMatchmakerAdd) message_;
    }
    return com.heroiclabs.nakama.rtapi.PartyMatchmakerAdd.getDefaultInstance();
  }
  /**
   * <pre>
   * Begin matchmaking as a party.
   * </pre>
   *
   * <code>.nakama.realtime.PartyMatchmakerAdd party_matchmaker_add = 45 [json_name = "partyMatchmakerAdd"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.PartyMatchmakerAddOrBuilder getPartyMatchmakerAddOrBuilder() {
    if (messageCase_ == 45) {
       return (com.heroiclabs.nakama.rtapi.PartyMatchmakerAdd) message_;
    }
    return com.heroiclabs.nakama.rtapi.PartyMatchmakerAdd.getDefaultInstance();
  }

  public static final int PARTY_MATCHMAKER_REMOVE_FIELD_NUMBER = 46;
  /**
   * <pre>
   * Cancel a party matchmaking process using a ticket.
   * </pre>
   *
   * <code>.nakama.realtime.PartyMatchmakerRemove party_matchmaker_remove = 46 [json_name = "partyMatchmakerRemove"];</code>
   * @return Whether the partyMatchmakerRemove field is set.
   */
  @java.lang.Override
  public boolean hasPartyMatchmakerRemove() {
    return messageCase_ == 46;
  }
  /**
   * <pre>
   * Cancel a party matchmaking process using a ticket.
   * </pre>
   *
   * <code>.nakama.realtime.PartyMatchmakerRemove party_matchmaker_remove = 46 [json_name = "partyMatchmakerRemove"];</code>
   * @return The partyMatchmakerRemove.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.PartyMatchmakerRemove getPartyMatchmakerRemove() {
    if (messageCase_ == 46) {
       return (com.heroiclabs.nakama.rtapi.PartyMatchmakerRemove) message_;
    }
    return com.heroiclabs.nakama.rtapi.PartyMatchmakerRemove.getDefaultInstance();
  }
  /**
   * <pre>
   * Cancel a party matchmaking process using a ticket.
   * </pre>
   *
   * <code>.nakama.realtime.PartyMatchmakerRemove party_matchmaker_remove = 46 [json_name = "partyMatchmakerRemove"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.PartyMatchmakerRemoveOrBuilder getPartyMatchmakerRemoveOrBuilder() {
    if (messageCase_ == 46) {
       return (com.heroiclabs.nakama.rtapi.PartyMatchmakerRemove) message_;
    }
    return com.heroiclabs.nakama.rtapi.PartyMatchmakerRemove.getDefaultInstance();
  }

  public static final int PARTY_MATCHMAKER_TICKET_FIELD_NUMBER = 47;
  /**
   * <pre>
   * A response from starting a new party matchmaking process.
   * </pre>
   *
   * <code>.nakama.realtime.PartyMatchmakerTicket party_matchmaker_ticket = 47 [json_name = "partyMatchmakerTicket"];</code>
   * @return Whether the partyMatchmakerTicket field is set.
   */
  @java.lang.Override
  public boolean hasPartyMatchmakerTicket() {
    return messageCase_ == 47;
  }
  /**
   * <pre>
   * A response from starting a new party matchmaking process.
   * </pre>
   *
   * <code>.nakama.realtime.PartyMatchmakerTicket party_matchmaker_ticket = 47 [json_name = "partyMatchmakerTicket"];</code>
   * @return The partyMatchmakerTicket.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.PartyMatchmakerTicket getPartyMatchmakerTicket() {
    if (messageCase_ == 47) {
       return (com.heroiclabs.nakama.rtapi.PartyMatchmakerTicket) message_;
    }
    return com.heroiclabs.nakama.rtapi.PartyMatchmakerTicket.getDefaultInstance();
  }
  /**
   * <pre>
   * A response from starting a new party matchmaking process.
   * </pre>
   *
   * <code>.nakama.realtime.PartyMatchmakerTicket party_matchmaker_ticket = 47 [json_name = "partyMatchmakerTicket"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.PartyMatchmakerTicketOrBuilder getPartyMatchmakerTicketOrBuilder() {
    if (messageCase_ == 47) {
       return (com.heroiclabs.nakama.rtapi.PartyMatchmakerTicket) message_;
    }
    return com.heroiclabs.nakama.rtapi.PartyMatchmakerTicket.getDefaultInstance();
  }

  public static final int PARTY_DATA_FIELD_NUMBER = 48;
  /**
   * <pre>
   * Incoming party data delivered from the server.
   * </pre>
   *
   * <code>.nakama.realtime.PartyData party_data = 48 [json_name = "partyData"];</code>
   * @return Whether the partyData field is set.
   */
  @java.lang.Override
  public boolean hasPartyData() {
    return messageCase_ == 48;
  }
  /**
   * <pre>
   * Incoming party data delivered from the server.
   * </pre>
   *
   * <code>.nakama.realtime.PartyData party_data = 48 [json_name = "partyData"];</code>
   * @return The partyData.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.PartyData getPartyData() {
    if (messageCase_ == 48) {
       return (com.heroiclabs.nakama.rtapi.PartyData) message_;
    }
    return com.heroiclabs.nakama.rtapi.PartyData.getDefaultInstance();
  }
  /**
   * <pre>
   * Incoming party data delivered from the server.
   * </pre>
   *
   * <code>.nakama.realtime.PartyData party_data = 48 [json_name = "partyData"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.PartyDataOrBuilder getPartyDataOrBuilder() {
    if (messageCase_ == 48) {
       return (com.heroiclabs.nakama.rtapi.PartyData) message_;
    }
    return com.heroiclabs.nakama.rtapi.PartyData.getDefaultInstance();
  }

  public static final int PARTY_DATA_SEND_FIELD_NUMBER = 49;
  /**
   * <pre>
   * A client to server request to send data to a party.
   * </pre>
   *
   * <code>.nakama.realtime.PartyDataSend party_data_send = 49 [json_name = "partyDataSend"];</code>
   * @return Whether the partyDataSend field is set.
   */
  @java.lang.Override
  public boolean hasPartyDataSend() {
    return messageCase_ == 49;
  }
  /**
   * <pre>
   * A client to server request to send data to a party.
   * </pre>
   *
   * <code>.nakama.realtime.PartyDataSend party_data_send = 49 [json_name = "partyDataSend"];</code>
   * @return The partyDataSend.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.PartyDataSend getPartyDataSend() {
    if (messageCase_ == 49) {
       return (com.heroiclabs.nakama.rtapi.PartyDataSend) message_;
    }
    return com.heroiclabs.nakama.rtapi.PartyDataSend.getDefaultInstance();
  }
  /**
   * <pre>
   * A client to server request to send data to a party.
   * </pre>
   *
   * <code>.nakama.realtime.PartyDataSend party_data_send = 49 [json_name = "partyDataSend"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.PartyDataSendOrBuilder getPartyDataSendOrBuilder() {
    if (messageCase_ == 49) {
       return (com.heroiclabs.nakama.rtapi.PartyDataSend) message_;
    }
    return com.heroiclabs.nakama.rtapi.PartyDataSend.getDefaultInstance();
  }

  public static final int PARTY_PRESENCE_EVENT_FIELD_NUMBER = 50;
  /**
   * <pre>
   * Presence update for a particular party.
   * </pre>
   *
   * <code>.nakama.realtime.PartyPresenceEvent party_presence_event = 50 [json_name = "partyPresenceEvent"];</code>
   * @return Whether the partyPresenceEvent field is set.
   */
  @java.lang.Override
  public boolean hasPartyPresenceEvent() {
    return messageCase_ == 50;
  }
  /**
   * <pre>
   * Presence update for a particular party.
   * </pre>
   *
   * <code>.nakama.realtime.PartyPresenceEvent party_presence_event = 50 [json_name = "partyPresenceEvent"];</code>
   * @return The partyPresenceEvent.
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.PartyPresenceEvent getPartyPresenceEvent() {
    if (messageCase_ == 50) {
       return (com.heroiclabs.nakama.rtapi.PartyPresenceEvent) message_;
    }
    return com.heroiclabs.nakama.rtapi.PartyPresenceEvent.getDefaultInstance();
  }
  /**
   * <pre>
   * Presence update for a particular party.
   * </pre>
   *
   * <code>.nakama.realtime.PartyPresenceEvent party_presence_event = 50 [json_name = "partyPresenceEvent"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.PartyPresenceEventOrBuilder getPartyPresenceEventOrBuilder() {
    if (messageCase_ == 50) {
       return (com.heroiclabs.nakama.rtapi.PartyPresenceEvent) message_;
    }
    return com.heroiclabs.nakama.rtapi.PartyPresenceEvent.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessage.isStringEmpty(cid_)) {
      com.google.protobuf.GeneratedMessage.writeString(output, 1, cid_);
    }
    if (messageCase_ == 2) {
      output.writeMessage(2, (com.heroiclabs.nakama.rtapi.Channel) message_);
    }
    if (messageCase_ == 3) {
      output.writeMessage(3, (com.heroiclabs.nakama.rtapi.ChannelJoin) message_);
    }
    if (messageCase_ == 4) {
      output.writeMessage(4, (com.heroiclabs.nakama.rtapi.ChannelLeave) message_);
    }
    if (messageCase_ == 5) {
      output.writeMessage(5, (com.heroiclabs.nakama.api.ChannelMessage) message_);
    }
    if (messageCase_ == 6) {
      output.writeMessage(6, (com.heroiclabs.nakama.rtapi.ChannelMessageAck) message_);
    }
    if (messageCase_ == 7) {
      output.writeMessage(7, (com.heroiclabs.nakama.rtapi.ChannelMessageSend) message_);
    }
    if (messageCase_ == 8) {
      output.writeMessage(8, (com.heroiclabs.nakama.rtapi.ChannelMessageUpdate) message_);
    }
    if (messageCase_ == 9) {
      output.writeMessage(9, (com.heroiclabs.nakama.rtapi.ChannelMessageRemove) message_);
    }
    if (messageCase_ == 10) {
      output.writeMessage(10, (com.heroiclabs.nakama.rtapi.ChannelPresenceEvent) message_);
    }
    if (messageCase_ == 11) {
      output.writeMessage(11, (com.heroiclabs.nakama.rtapi.Error) message_);
    }
    if (messageCase_ == 12) {
      output.writeMessage(12, (com.heroiclabs.nakama.rtapi.Match) message_);
    }
    if (messageCase_ == 13) {
      output.writeMessage(13, (com.heroiclabs.nakama.rtapi.MatchCreate) message_);
    }
    if (messageCase_ == 14) {
      output.writeMessage(14, (com.heroiclabs.nakama.rtapi.MatchData) message_);
    }
    if (messageCase_ == 15) {
      output.writeMessage(15, (com.heroiclabs.nakama.rtapi.MatchDataSend) message_);
    }
    if (messageCase_ == 16) {
      output.writeMessage(16, (com.heroiclabs.nakama.rtapi.MatchJoin) message_);
    }
    if (messageCase_ == 17) {
      output.writeMessage(17, (com.heroiclabs.nakama.rtapi.MatchLeave) message_);
    }
    if (messageCase_ == 18) {
      output.writeMessage(18, (com.heroiclabs.nakama.rtapi.MatchPresenceEvent) message_);
    }
    if (messageCase_ == 19) {
      output.writeMessage(19, (com.heroiclabs.nakama.rtapi.MatchmakerAdd) message_);
    }
    if (messageCase_ == 20) {
      output.writeMessage(20, (com.heroiclabs.nakama.rtapi.MatchmakerMatched) message_);
    }
    if (messageCase_ == 21) {
      output.writeMessage(21, (com.heroiclabs.nakama.rtapi.MatchmakerRemove) message_);
    }
    if (messageCase_ == 22) {
      output.writeMessage(22, (com.heroiclabs.nakama.rtapi.MatchmakerTicket) message_);
    }
    if (messageCase_ == 23) {
      output.writeMessage(23, (com.heroiclabs.nakama.rtapi.Notifications) message_);
    }
    if (messageCase_ == 24) {
      output.writeMessage(24, (com.heroiclabs.nakama.api.Rpc) message_);
    }
    if (messageCase_ == 25) {
      output.writeMessage(25, (com.heroiclabs.nakama.rtapi.Status) message_);
    }
    if (messageCase_ == 26) {
      output.writeMessage(26, (com.heroiclabs.nakama.rtapi.StatusFollow) message_);
    }
    if (messageCase_ == 27) {
      output.writeMessage(27, (com.heroiclabs.nakama.rtapi.StatusPresenceEvent) message_);
    }
    if (messageCase_ == 28) {
      output.writeMessage(28, (com.heroiclabs.nakama.rtapi.StatusUnfollow) message_);
    }
    if (messageCase_ == 29) {
      output.writeMessage(29, (com.heroiclabs.nakama.rtapi.StatusUpdate) message_);
    }
    if (messageCase_ == 30) {
      output.writeMessage(30, (com.heroiclabs.nakama.rtapi.StreamData) message_);
    }
    if (messageCase_ == 31) {
      output.writeMessage(31, (com.heroiclabs.nakama.rtapi.StreamPresenceEvent) message_);
    }
    if (messageCase_ == 32) {
      output.writeMessage(32, (com.heroiclabs.nakama.rtapi.Ping) message_);
    }
    if (messageCase_ == 33) {
      output.writeMessage(33, (com.heroiclabs.nakama.rtapi.Pong) message_);
    }
    if (messageCase_ == 34) {
      output.writeMessage(34, (com.heroiclabs.nakama.rtapi.Party) message_);
    }
    if (messageCase_ == 35) {
      output.writeMessage(35, (com.heroiclabs.nakama.rtapi.PartyCreate) message_);
    }
    if (messageCase_ == 36) {
      output.writeMessage(36, (com.heroiclabs.nakama.rtapi.PartyJoin) message_);
    }
    if (messageCase_ == 37) {
      output.writeMessage(37, (com.heroiclabs.nakama.rtapi.PartyLeave) message_);
    }
    if (messageCase_ == 38) {
      output.writeMessage(38, (com.heroiclabs.nakama.rtapi.PartyPromote) message_);
    }
    if (messageCase_ == 39) {
      output.writeMessage(39, (com.heroiclabs.nakama.rtapi.PartyLeader) message_);
    }
    if (messageCase_ == 40) {
      output.writeMessage(40, (com.heroiclabs.nakama.rtapi.PartyAccept) message_);
    }
    if (messageCase_ == 41) {
      output.writeMessage(41, (com.heroiclabs.nakama.rtapi.PartyRemove) message_);
    }
    if (messageCase_ == 42) {
      output.writeMessage(42, (com.heroiclabs.nakama.rtapi.PartyClose) message_);
    }
    if (messageCase_ == 43) {
      output.writeMessage(43, (com.heroiclabs.nakama.rtapi.PartyJoinRequestList) message_);
    }
    if (messageCase_ == 44) {
      output.writeMessage(44, (com.heroiclabs.nakama.rtapi.PartyJoinRequest) message_);
    }
    if (messageCase_ == 45) {
      output.writeMessage(45, (com.heroiclabs.nakama.rtapi.PartyMatchmakerAdd) message_);
    }
    if (messageCase_ == 46) {
      output.writeMessage(46, (com.heroiclabs.nakama.rtapi.PartyMatchmakerRemove) message_);
    }
    if (messageCase_ == 47) {
      output.writeMessage(47, (com.heroiclabs.nakama.rtapi.PartyMatchmakerTicket) message_);
    }
    if (messageCase_ == 48) {
      output.writeMessage(48, (com.heroiclabs.nakama.rtapi.PartyData) message_);
    }
    if (messageCase_ == 49) {
      output.writeMessage(49, (com.heroiclabs.nakama.rtapi.PartyDataSend) message_);
    }
    if (messageCase_ == 50) {
      output.writeMessage(50, (com.heroiclabs.nakama.rtapi.PartyPresenceEvent) message_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessage.isStringEmpty(cid_)) {
      size += com.google.protobuf.GeneratedMessage.computeStringSize(1, cid_);
    }
    if (messageCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (com.heroiclabs.nakama.rtapi.Channel) message_);
    }
    if (messageCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (com.heroiclabs.nakama.rtapi.ChannelJoin) message_);
    }
    if (messageCase_ == 4) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, (com.heroiclabs.nakama.rtapi.ChannelLeave) message_);
    }
    if (messageCase_ == 5) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, (com.heroiclabs.nakama.api.ChannelMessage) message_);
    }
    if (messageCase_ == 6) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, (com.heroiclabs.nakama.rtapi.ChannelMessageAck) message_);
    }
    if (messageCase_ == 7) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, (com.heroiclabs.nakama.rtapi.ChannelMessageSend) message_);
    }
    if (messageCase_ == 8) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, (com.heroiclabs.nakama.rtapi.ChannelMessageUpdate) message_);
    }
    if (messageCase_ == 9) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, (com.heroiclabs.nakama.rtapi.ChannelMessageRemove) message_);
    }
    if (messageCase_ == 10) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, (com.heroiclabs.nakama.rtapi.ChannelPresenceEvent) message_);
    }
    if (messageCase_ == 11) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, (com.heroiclabs.nakama.rtapi.Error) message_);
    }
    if (messageCase_ == 12) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(12, (com.heroiclabs.nakama.rtapi.Match) message_);
    }
    if (messageCase_ == 13) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(13, (com.heroiclabs.nakama.rtapi.MatchCreate) message_);
    }
    if (messageCase_ == 14) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(14, (com.heroiclabs.nakama.rtapi.MatchData) message_);
    }
    if (messageCase_ == 15) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(15, (com.heroiclabs.nakama.rtapi.MatchDataSend) message_);
    }
    if (messageCase_ == 16) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(16, (com.heroiclabs.nakama.rtapi.MatchJoin) message_);
    }
    if (messageCase_ == 17) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(17, (com.heroiclabs.nakama.rtapi.MatchLeave) message_);
    }
    if (messageCase_ == 18) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(18, (com.heroiclabs.nakama.rtapi.MatchPresenceEvent) message_);
    }
    if (messageCase_ == 19) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(19, (com.heroiclabs.nakama.rtapi.MatchmakerAdd) message_);
    }
    if (messageCase_ == 20) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(20, (com.heroiclabs.nakama.rtapi.MatchmakerMatched) message_);
    }
    if (messageCase_ == 21) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(21, (com.heroiclabs.nakama.rtapi.MatchmakerRemove) message_);
    }
    if (messageCase_ == 22) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(22, (com.heroiclabs.nakama.rtapi.MatchmakerTicket) message_);
    }
    if (messageCase_ == 23) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(23, (com.heroiclabs.nakama.rtapi.Notifications) message_);
    }
    if (messageCase_ == 24) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(24, (com.heroiclabs.nakama.api.Rpc) message_);
    }
    if (messageCase_ == 25) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(25, (com.heroiclabs.nakama.rtapi.Status) message_);
    }
    if (messageCase_ == 26) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(26, (com.heroiclabs.nakama.rtapi.StatusFollow) message_);
    }
    if (messageCase_ == 27) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(27, (com.heroiclabs.nakama.rtapi.StatusPresenceEvent) message_);
    }
    if (messageCase_ == 28) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(28, (com.heroiclabs.nakama.rtapi.StatusUnfollow) message_);
    }
    if (messageCase_ == 29) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(29, (com.heroiclabs.nakama.rtapi.StatusUpdate) message_);
    }
    if (messageCase_ == 30) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(30, (com.heroiclabs.nakama.rtapi.StreamData) message_);
    }
    if (messageCase_ == 31) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(31, (com.heroiclabs.nakama.rtapi.StreamPresenceEvent) message_);
    }
    if (messageCase_ == 32) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(32, (com.heroiclabs.nakama.rtapi.Ping) message_);
    }
    if (messageCase_ == 33) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(33, (com.heroiclabs.nakama.rtapi.Pong) message_);
    }
    if (messageCase_ == 34) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(34, (com.heroiclabs.nakama.rtapi.Party) message_);
    }
    if (messageCase_ == 35) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(35, (com.heroiclabs.nakama.rtapi.PartyCreate) message_);
    }
    if (messageCase_ == 36) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(36, (com.heroiclabs.nakama.rtapi.PartyJoin) message_);
    }
    if (messageCase_ == 37) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(37, (com.heroiclabs.nakama.rtapi.PartyLeave) message_);
    }
    if (messageCase_ == 38) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(38, (com.heroiclabs.nakama.rtapi.PartyPromote) message_);
    }
    if (messageCase_ == 39) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(39, (com.heroiclabs.nakama.rtapi.PartyLeader) message_);
    }
    if (messageCase_ == 40) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(40, (com.heroiclabs.nakama.rtapi.PartyAccept) message_);
    }
    if (messageCase_ == 41) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(41, (com.heroiclabs.nakama.rtapi.PartyRemove) message_);
    }
    if (messageCase_ == 42) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(42, (com.heroiclabs.nakama.rtapi.PartyClose) message_);
    }
    if (messageCase_ == 43) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(43, (com.heroiclabs.nakama.rtapi.PartyJoinRequestList) message_);
    }
    if (messageCase_ == 44) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(44, (com.heroiclabs.nakama.rtapi.PartyJoinRequest) message_);
    }
    if (messageCase_ == 45) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(45, (com.heroiclabs.nakama.rtapi.PartyMatchmakerAdd) message_);
    }
    if (messageCase_ == 46) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(46, (com.heroiclabs.nakama.rtapi.PartyMatchmakerRemove) message_);
    }
    if (messageCase_ == 47) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(47, (com.heroiclabs.nakama.rtapi.PartyMatchmakerTicket) message_);
    }
    if (messageCase_ == 48) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(48, (com.heroiclabs.nakama.rtapi.PartyData) message_);
    }
    if (messageCase_ == 49) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(49, (com.heroiclabs.nakama.rtapi.PartyDataSend) message_);
    }
    if (messageCase_ == 50) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(50, (com.heroiclabs.nakama.rtapi.PartyPresenceEvent) message_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.heroiclabs.nakama.rtapi.Envelope)) {
      return super.equals(obj);
    }
    com.heroiclabs.nakama.rtapi.Envelope other = (com.heroiclabs.nakama.rtapi.Envelope) obj;

    if (!getCid()
        .equals(other.getCid())) return false;
    if (!getMessageCase().equals(other.getMessageCase())) return false;
    switch (messageCase_) {
      case 2:
        if (!getChannel()
            .equals(other.getChannel())) return false;
        break;
      case 3:
        if (!getChannelJoin()
            .equals(other.getChannelJoin())) return false;
        break;
      case 4:
        if (!getChannelLeave()
            .equals(other.getChannelLeave())) return false;
        break;
      case 5:
        if (!getChannelMessage()
            .equals(other.getChannelMessage())) return false;
        break;
      case 6:
        if (!getChannelMessageAck()
            .equals(other.getChannelMessageAck())) return false;
        break;
      case 7:
        if (!getChannelMessageSend()
            .equals(other.getChannelMessageSend())) return false;
        break;
      case 8:
        if (!getChannelMessageUpdate()
            .equals(other.getChannelMessageUpdate())) return false;
        break;
      case 9:
        if (!getChannelMessageRemove()
            .equals(other.getChannelMessageRemove())) return false;
        break;
      case 10:
        if (!getChannelPresenceEvent()
            .equals(other.getChannelPresenceEvent())) return false;
        break;
      case 11:
        if (!getError()
            .equals(other.getError())) return false;
        break;
      case 12:
        if (!getMatch()
            .equals(other.getMatch())) return false;
        break;
      case 13:
        if (!getMatchCreate()
            .equals(other.getMatchCreate())) return false;
        break;
      case 14:
        if (!getMatchData()
            .equals(other.getMatchData())) return false;
        break;
      case 15:
        if (!getMatchDataSend()
            .equals(other.getMatchDataSend())) return false;
        break;
      case 16:
        if (!getMatchJoin()
            .equals(other.getMatchJoin())) return false;
        break;
      case 17:
        if (!getMatchLeave()
            .equals(other.getMatchLeave())) return false;
        break;
      case 18:
        if (!getMatchPresenceEvent()
            .equals(other.getMatchPresenceEvent())) return false;
        break;
      case 19:
        if (!getMatchmakerAdd()
            .equals(other.getMatchmakerAdd())) return false;
        break;
      case 20:
        if (!getMatchmakerMatched()
            .equals(other.getMatchmakerMatched())) return false;
        break;
      case 21:
        if (!getMatchmakerRemove()
            .equals(other.getMatchmakerRemove())) return false;
        break;
      case 22:
        if (!getMatchmakerTicket()
            .equals(other.getMatchmakerTicket())) return false;
        break;
      case 23:
        if (!getNotifications()
            .equals(other.getNotifications())) return false;
        break;
      case 24:
        if (!getRpc()
            .equals(other.getRpc())) return false;
        break;
      case 25:
        if (!getStatus()
            .equals(other.getStatus())) return false;
        break;
      case 26:
        if (!getStatusFollow()
            .equals(other.getStatusFollow())) return false;
        break;
      case 27:
        if (!getStatusPresenceEvent()
            .equals(other.getStatusPresenceEvent())) return false;
        break;
      case 28:
        if (!getStatusUnfollow()
            .equals(other.getStatusUnfollow())) return false;
        break;
      case 29:
        if (!getStatusUpdate()
            .equals(other.getStatusUpdate())) return false;
        break;
      case 30:
        if (!getStreamData()
            .equals(other.getStreamData())) return false;
        break;
      case 31:
        if (!getStreamPresenceEvent()
            .equals(other.getStreamPresenceEvent())) return false;
        break;
      case 32:
        if (!getPing()
            .equals(other.getPing())) return false;
        break;
      case 33:
        if (!getPong()
            .equals(other.getPong())) return false;
        break;
      case 34:
        if (!getParty()
            .equals(other.getParty())) return false;
        break;
      case 35:
        if (!getPartyCreate()
            .equals(other.getPartyCreate())) return false;
        break;
      case 36:
        if (!getPartyJoin()
            .equals(other.getPartyJoin())) return false;
        break;
      case 37:
        if (!getPartyLeave()
            .equals(other.getPartyLeave())) return false;
        break;
      case 38:
        if (!getPartyPromote()
            .equals(other.getPartyPromote())) return false;
        break;
      case 39:
        if (!getPartyLeader()
            .equals(other.getPartyLeader())) return false;
        break;
      case 40:
        if (!getPartyAccept()
            .equals(other.getPartyAccept())) return false;
        break;
      case 41:
        if (!getPartyRemove()
            .equals(other.getPartyRemove())) return false;
        break;
      case 42:
        if (!getPartyClose()
            .equals(other.getPartyClose())) return false;
        break;
      case 43:
        if (!getPartyJoinRequestList()
            .equals(other.getPartyJoinRequestList())) return false;
        break;
      case 44:
        if (!getPartyJoinRequest()
            .equals(other.getPartyJoinRequest())) return false;
        break;
      case 45:
        if (!getPartyMatchmakerAdd()
            .equals(other.getPartyMatchmakerAdd())) return false;
        break;
      case 46:
        if (!getPartyMatchmakerRemove()
            .equals(other.getPartyMatchmakerRemove())) return false;
        break;
      case 47:
        if (!getPartyMatchmakerTicket()
            .equals(other.getPartyMatchmakerTicket())) return false;
        break;
      case 48:
        if (!getPartyData()
            .equals(other.getPartyData())) return false;
        break;
      case 49:
        if (!getPartyDataSend()
            .equals(other.getPartyDataSend())) return false;
        break;
      case 50:
        if (!getPartyPresenceEvent()
            .equals(other.getPartyPresenceEvent())) return false;
        break;
      case 0:
      default:
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + CID_FIELD_NUMBER;
    hash = (53 * hash) + getCid().hashCode();
    switch (messageCase_) {
      case 2:
        hash = (37 * hash) + CHANNEL_FIELD_NUMBER;
        hash = (53 * hash) + getChannel().hashCode();
        break;
      case 3:
        hash = (37 * hash) + CHANNEL_JOIN_FIELD_NUMBER;
        hash = (53 * hash) + getChannelJoin().hashCode();
        break;
      case 4:
        hash = (37 * hash) + CHANNEL_LEAVE_FIELD_NUMBER;
        hash = (53 * hash) + getChannelLeave().hashCode();
        break;
      case 5:
        hash = (37 * hash) + CHANNEL_MESSAGE_FIELD_NUMBER;
        hash = (53 * hash) + getChannelMessage().hashCode();
        break;
      case 6:
        hash = (37 * hash) + CHANNEL_MESSAGE_ACK_FIELD_NUMBER;
        hash = (53 * hash) + getChannelMessageAck().hashCode();
        break;
      case 7:
        hash = (37 * hash) + CHANNEL_MESSAGE_SEND_FIELD_NUMBER;
        hash = (53 * hash) + getChannelMessageSend().hashCode();
        break;
      case 8:
        hash = (37 * hash) + CHANNEL_MESSAGE_UPDATE_FIELD_NUMBER;
        hash = (53 * hash) + getChannelMessageUpdate().hashCode();
        break;
      case 9:
        hash = (37 * hash) + CHANNEL_MESSAGE_REMOVE_FIELD_NUMBER;
        hash = (53 * hash) + getChannelMessageRemove().hashCode();
        break;
      case 10:
        hash = (37 * hash) + CHANNEL_PRESENCE_EVENT_FIELD_NUMBER;
        hash = (53 * hash) + getChannelPresenceEvent().hashCode();
        break;
      case 11:
        hash = (37 * hash) + ERROR_FIELD_NUMBER;
        hash = (53 * hash) + getError().hashCode();
        break;
      case 12:
        hash = (37 * hash) + MATCH_FIELD_NUMBER;
        hash = (53 * hash) + getMatch().hashCode();
        break;
      case 13:
        hash = (37 * hash) + MATCH_CREATE_FIELD_NUMBER;
        hash = (53 * hash) + getMatchCreate().hashCode();
        break;
      case 14:
        hash = (37 * hash) + MATCH_DATA_FIELD_NUMBER;
        hash = (53 * hash) + getMatchData().hashCode();
        break;
      case 15:
        hash = (37 * hash) + MATCH_DATA_SEND_FIELD_NUMBER;
        hash = (53 * hash) + getMatchDataSend().hashCode();
        break;
      case 16:
        hash = (37 * hash) + MATCH_JOIN_FIELD_NUMBER;
        hash = (53 * hash) + getMatchJoin().hashCode();
        break;
      case 17:
        hash = (37 * hash) + MATCH_LEAVE_FIELD_NUMBER;
        hash = (53 * hash) + getMatchLeave().hashCode();
        break;
      case 18:
        hash = (37 * hash) + MATCH_PRESENCE_EVENT_FIELD_NUMBER;
        hash = (53 * hash) + getMatchPresenceEvent().hashCode();
        break;
      case 19:
        hash = (37 * hash) + MATCHMAKER_ADD_FIELD_NUMBER;
        hash = (53 * hash) + getMatchmakerAdd().hashCode();
        break;
      case 20:
        hash = (37 * hash) + MATCHMAKER_MATCHED_FIELD_NUMBER;
        hash = (53 * hash) + getMatchmakerMatched().hashCode();
        break;
      case 21:
        hash = (37 * hash) + MATCHMAKER_REMOVE_FIELD_NUMBER;
        hash = (53 * hash) + getMatchmakerRemove().hashCode();
        break;
      case 22:
        hash = (37 * hash) + MATCHMAKER_TICKET_FIELD_NUMBER;
        hash = (53 * hash) + getMatchmakerTicket().hashCode();
        break;
      case 23:
        hash = (37 * hash) + NOTIFICATIONS_FIELD_NUMBER;
        hash = (53 * hash) + getNotifications().hashCode();
        break;
      case 24:
        hash = (37 * hash) + RPC_FIELD_NUMBER;
        hash = (53 * hash) + getRpc().hashCode();
        break;
      case 25:
        hash = (37 * hash) + STATUS_FIELD_NUMBER;
        hash = (53 * hash) + getStatus().hashCode();
        break;
      case 26:
        hash = (37 * hash) + STATUS_FOLLOW_FIELD_NUMBER;
        hash = (53 * hash) + getStatusFollow().hashCode();
        break;
      case 27:
        hash = (37 * hash) + STATUS_PRESENCE_EVENT_FIELD_NUMBER;
        hash = (53 * hash) + getStatusPresenceEvent().hashCode();
        break;
      case 28:
        hash = (37 * hash) + STATUS_UNFOLLOW_FIELD_NUMBER;
        hash = (53 * hash) + getStatusUnfollow().hashCode();
        break;
      case 29:
        hash = (37 * hash) + STATUS_UPDATE_FIELD_NUMBER;
        hash = (53 * hash) + getStatusUpdate().hashCode();
        break;
      case 30:
        hash = (37 * hash) + STREAM_DATA_FIELD_NUMBER;
        hash = (53 * hash) + getStreamData().hashCode();
        break;
      case 31:
        hash = (37 * hash) + STREAM_PRESENCE_EVENT_FIELD_NUMBER;
        hash = (53 * hash) + getStreamPresenceEvent().hashCode();
        break;
      case 32:
        hash = (37 * hash) + PING_FIELD_NUMBER;
        hash = (53 * hash) + getPing().hashCode();
        break;
      case 33:
        hash = (37 * hash) + PONG_FIELD_NUMBER;
        hash = (53 * hash) + getPong().hashCode();
        break;
      case 34:
        hash = (37 * hash) + PARTY_FIELD_NUMBER;
        hash = (53 * hash) + getParty().hashCode();
        break;
      case 35:
        hash = (37 * hash) + PARTY_CREATE_FIELD_NUMBER;
        hash = (53 * hash) + getPartyCreate().hashCode();
        break;
      case 36:
        hash = (37 * hash) + PARTY_JOIN_FIELD_NUMBER;
        hash = (53 * hash) + getPartyJoin().hashCode();
        break;
      case 37:
        hash = (37 * hash) + PARTY_LEAVE_FIELD_NUMBER;
        hash = (53 * hash) + getPartyLeave().hashCode();
        break;
      case 38:
        hash = (37 * hash) + PARTY_PROMOTE_FIELD_NUMBER;
        hash = (53 * hash) + getPartyPromote().hashCode();
        break;
      case 39:
        hash = (37 * hash) + PARTY_LEADER_FIELD_NUMBER;
        hash = (53 * hash) + getPartyLeader().hashCode();
        break;
      case 40:
        hash = (37 * hash) + PARTY_ACCEPT_FIELD_NUMBER;
        hash = (53 * hash) + getPartyAccept().hashCode();
        break;
      case 41:
        hash = (37 * hash) + PARTY_REMOVE_FIELD_NUMBER;
        hash = (53 * hash) + getPartyRemove().hashCode();
        break;
      case 42:
        hash = (37 * hash) + PARTY_CLOSE_FIELD_NUMBER;
        hash = (53 * hash) + getPartyClose().hashCode();
        break;
      case 43:
        hash = (37 * hash) + PARTY_JOIN_REQUEST_LIST_FIELD_NUMBER;
        hash = (53 * hash) + getPartyJoinRequestList().hashCode();
        break;
      case 44:
        hash = (37 * hash) + PARTY_JOIN_REQUEST_FIELD_NUMBER;
        hash = (53 * hash) + getPartyJoinRequest().hashCode();
        break;
      case 45:
        hash = (37 * hash) + PARTY_MATCHMAKER_ADD_FIELD_NUMBER;
        hash = (53 * hash) + getPartyMatchmakerAdd().hashCode();
        break;
      case 46:
        hash = (37 * hash) + PARTY_MATCHMAKER_REMOVE_FIELD_NUMBER;
        hash = (53 * hash) + getPartyMatchmakerRemove().hashCode();
        break;
      case 47:
        hash = (37 * hash) + PARTY_MATCHMAKER_TICKET_FIELD_NUMBER;
        hash = (53 * hash) + getPartyMatchmakerTicket().hashCode();
        break;
      case 48:
        hash = (37 * hash) + PARTY_DATA_FIELD_NUMBER;
        hash = (53 * hash) + getPartyData().hashCode();
        break;
      case 49:
        hash = (37 * hash) + PARTY_DATA_SEND_FIELD_NUMBER;
        hash = (53 * hash) + getPartyDataSend().hashCode();
        break;
      case 50:
        hash = (37 * hash) + PARTY_PRESENCE_EVENT_FIELD_NUMBER;
        hash = (53 * hash) + getPartyPresenceEvent().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.heroiclabs.nakama.rtapi.Envelope parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.heroiclabs.nakama.rtapi.Envelope parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.heroiclabs.nakama.rtapi.Envelope parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.heroiclabs.nakama.rtapi.Envelope parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.heroiclabs.nakama.rtapi.Envelope parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.heroiclabs.nakama.rtapi.Envelope parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.heroiclabs.nakama.rtapi.Envelope parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static com.heroiclabs.nakama.rtapi.Envelope parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.heroiclabs.nakama.rtapi.Envelope parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.heroiclabs.nakama.rtapi.Envelope parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.heroiclabs.nakama.rtapi.Envelope parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static com.heroiclabs.nakama.rtapi.Envelope parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.heroiclabs.nakama.rtapi.Envelope prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * An envelope for a realtime message.
   * </pre>
   *
   * Protobuf type {@code nakama.realtime.Envelope}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:nakama.realtime.Envelope)
      com.heroiclabs.nakama.rtapi.EnvelopeOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.heroiclabs.nakama.rtapi.RealtimeProto.internal_static_nakama_realtime_Envelope_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.heroiclabs.nakama.rtapi.RealtimeProto.internal_static_nakama_realtime_Envelope_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.heroiclabs.nakama.rtapi.Envelope.class, com.heroiclabs.nakama.rtapi.Envelope.Builder.class);
    }

    // Construct using com.heroiclabs.nakama.rtapi.Envelope.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      bitField1_ = 0;
      cid_ = "";
      if (channelBuilder_ != null) {
        channelBuilder_.clear();
      }
      if (channelJoinBuilder_ != null) {
        channelJoinBuilder_.clear();
      }
      if (channelLeaveBuilder_ != null) {
        channelLeaveBuilder_.clear();
      }
      if (channelMessageBuilder_ != null) {
        channelMessageBuilder_.clear();
      }
      if (channelMessageAckBuilder_ != null) {
        channelMessageAckBuilder_.clear();
      }
      if (channelMessageSendBuilder_ != null) {
        channelMessageSendBuilder_.clear();
      }
      if (channelMessageUpdateBuilder_ != null) {
        channelMessageUpdateBuilder_.clear();
      }
      if (channelMessageRemoveBuilder_ != null) {
        channelMessageRemoveBuilder_.clear();
      }
      if (channelPresenceEventBuilder_ != null) {
        channelPresenceEventBuilder_.clear();
      }
      if (errorBuilder_ != null) {
        errorBuilder_.clear();
      }
      if (matchBuilder_ != null) {
        matchBuilder_.clear();
      }
      if (matchCreateBuilder_ != null) {
        matchCreateBuilder_.clear();
      }
      if (matchDataBuilder_ != null) {
        matchDataBuilder_.clear();
      }
      if (matchDataSendBuilder_ != null) {
        matchDataSendBuilder_.clear();
      }
      if (matchJoinBuilder_ != null) {
        matchJoinBuilder_.clear();
      }
      if (matchLeaveBuilder_ != null) {
        matchLeaveBuilder_.clear();
      }
      if (matchPresenceEventBuilder_ != null) {
        matchPresenceEventBuilder_.clear();
      }
      if (matchmakerAddBuilder_ != null) {
        matchmakerAddBuilder_.clear();
      }
      if (matchmakerMatchedBuilder_ != null) {
        matchmakerMatchedBuilder_.clear();
      }
      if (matchmakerRemoveBuilder_ != null) {
        matchmakerRemoveBuilder_.clear();
      }
      if (matchmakerTicketBuilder_ != null) {
        matchmakerTicketBuilder_.clear();
      }
      if (notificationsBuilder_ != null) {
        notificationsBuilder_.clear();
      }
      if (rpcBuilder_ != null) {
        rpcBuilder_.clear();
      }
      if (statusBuilder_ != null) {
        statusBuilder_.clear();
      }
      if (statusFollowBuilder_ != null) {
        statusFollowBuilder_.clear();
      }
      if (statusPresenceEventBuilder_ != null) {
        statusPresenceEventBuilder_.clear();
      }
      if (statusUnfollowBuilder_ != null) {
        statusUnfollowBuilder_.clear();
      }
      if (statusUpdateBuilder_ != null) {
        statusUpdateBuilder_.clear();
      }
      if (streamDataBuilder_ != null) {
        streamDataBuilder_.clear();
      }
      if (streamPresenceEventBuilder_ != null) {
        streamPresenceEventBuilder_.clear();
      }
      if (pingBuilder_ != null) {
        pingBuilder_.clear();
      }
      if (pongBuilder_ != null) {
        pongBuilder_.clear();
      }
      if (partyBuilder_ != null) {
        partyBuilder_.clear();
      }
      if (partyCreateBuilder_ != null) {
        partyCreateBuilder_.clear();
      }
      if (partyJoinBuilder_ != null) {
        partyJoinBuilder_.clear();
      }
      if (partyLeaveBuilder_ != null) {
        partyLeaveBuilder_.clear();
      }
      if (partyPromoteBuilder_ != null) {
        partyPromoteBuilder_.clear();
      }
      if (partyLeaderBuilder_ != null) {
        partyLeaderBuilder_.clear();
      }
      if (partyAcceptBuilder_ != null) {
        partyAcceptBuilder_.clear();
      }
      if (partyRemoveBuilder_ != null) {
        partyRemoveBuilder_.clear();
      }
      if (partyCloseBuilder_ != null) {
        partyCloseBuilder_.clear();
      }
      if (partyJoinRequestListBuilder_ != null) {
        partyJoinRequestListBuilder_.clear();
      }
      if (partyJoinRequestBuilder_ != null) {
        partyJoinRequestBuilder_.clear();
      }
      if (partyMatchmakerAddBuilder_ != null) {
        partyMatchmakerAddBuilder_.clear();
      }
      if (partyMatchmakerRemoveBuilder_ != null) {
        partyMatchmakerRemoveBuilder_.clear();
      }
      if (partyMatchmakerTicketBuilder_ != null) {
        partyMatchmakerTicketBuilder_.clear();
      }
      if (partyDataBuilder_ != null) {
        partyDataBuilder_.clear();
      }
      if (partyDataSendBuilder_ != null) {
        partyDataSendBuilder_.clear();
      }
      if (partyPresenceEventBuilder_ != null) {
        partyPresenceEventBuilder_.clear();
      }
      messageCase_ = 0;
      message_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.heroiclabs.nakama.rtapi.RealtimeProto.internal_static_nakama_realtime_Envelope_descriptor;
    }

    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.Envelope getDefaultInstanceForType() {
      return com.heroiclabs.nakama.rtapi.Envelope.getDefaultInstance();
    }

    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.Envelope build() {
      com.heroiclabs.nakama.rtapi.Envelope result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.Envelope buildPartial() {
      com.heroiclabs.nakama.rtapi.Envelope result = new com.heroiclabs.nakama.rtapi.Envelope(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      if (bitField1_ != 0) { buildPartial1(result); }
      buildPartialOneofs(result);
      onBuilt();
      return result;
    }

    private void buildPartial0(com.heroiclabs.nakama.rtapi.Envelope result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.cid_ = cid_;
      }
    }

    private void buildPartial1(com.heroiclabs.nakama.rtapi.Envelope result) {
      int from_bitField1_ = bitField1_;
    }

    private void buildPartialOneofs(com.heroiclabs.nakama.rtapi.Envelope result) {
      result.messageCase_ = messageCase_;
      result.message_ = this.message_;
      if (messageCase_ == 2 &&
          channelBuilder_ != null) {
        result.message_ = channelBuilder_.build();
      }
      if (messageCase_ == 3 &&
          channelJoinBuilder_ != null) {
        result.message_ = channelJoinBuilder_.build();
      }
      if (messageCase_ == 4 &&
          channelLeaveBuilder_ != null) {
        result.message_ = channelLeaveBuilder_.build();
      }
      if (messageCase_ == 5 &&
          channelMessageBuilder_ != null) {
        result.message_ = channelMessageBuilder_.build();
      }
      if (messageCase_ == 6 &&
          channelMessageAckBuilder_ != null) {
        result.message_ = channelMessageAckBuilder_.build();
      }
      if (messageCase_ == 7 &&
          channelMessageSendBuilder_ != null) {
        result.message_ = channelMessageSendBuilder_.build();
      }
      if (messageCase_ == 8 &&
          channelMessageUpdateBuilder_ != null) {
        result.message_ = channelMessageUpdateBuilder_.build();
      }
      if (messageCase_ == 9 &&
          channelMessageRemoveBuilder_ != null) {
        result.message_ = channelMessageRemoveBuilder_.build();
      }
      if (messageCase_ == 10 &&
          channelPresenceEventBuilder_ != null) {
        result.message_ = channelPresenceEventBuilder_.build();
      }
      if (messageCase_ == 11 &&
          errorBuilder_ != null) {
        result.message_ = errorBuilder_.build();
      }
      if (messageCase_ == 12 &&
          matchBuilder_ != null) {
        result.message_ = matchBuilder_.build();
      }
      if (messageCase_ == 13 &&
          matchCreateBuilder_ != null) {
        result.message_ = matchCreateBuilder_.build();
      }
      if (messageCase_ == 14 &&
          matchDataBuilder_ != null) {
        result.message_ = matchDataBuilder_.build();
      }
      if (messageCase_ == 15 &&
          matchDataSendBuilder_ != null) {
        result.message_ = matchDataSendBuilder_.build();
      }
      if (messageCase_ == 16 &&
          matchJoinBuilder_ != null) {
        result.message_ = matchJoinBuilder_.build();
      }
      if (messageCase_ == 17 &&
          matchLeaveBuilder_ != null) {
        result.message_ = matchLeaveBuilder_.build();
      }
      if (messageCase_ == 18 &&
          matchPresenceEventBuilder_ != null) {
        result.message_ = matchPresenceEventBuilder_.build();
      }
      if (messageCase_ == 19 &&
          matchmakerAddBuilder_ != null) {
        result.message_ = matchmakerAddBuilder_.build();
      }
      if (messageCase_ == 20 &&
          matchmakerMatchedBuilder_ != null) {
        result.message_ = matchmakerMatchedBuilder_.build();
      }
      if (messageCase_ == 21 &&
          matchmakerRemoveBuilder_ != null) {
        result.message_ = matchmakerRemoveBuilder_.build();
      }
      if (messageCase_ == 22 &&
          matchmakerTicketBuilder_ != null) {
        result.message_ = matchmakerTicketBuilder_.build();
      }
      if (messageCase_ == 23 &&
          notificationsBuilder_ != null) {
        result.message_ = notificationsBuilder_.build();
      }
      if (messageCase_ == 24 &&
          rpcBuilder_ != null) {
        result.message_ = rpcBuilder_.build();
      }
      if (messageCase_ == 25 &&
          statusBuilder_ != null) {
        result.message_ = statusBuilder_.build();
      }
      if (messageCase_ == 26 &&
          statusFollowBuilder_ != null) {
        result.message_ = statusFollowBuilder_.build();
      }
      if (messageCase_ == 27 &&
          statusPresenceEventBuilder_ != null) {
        result.message_ = statusPresenceEventBuilder_.build();
      }
      if (messageCase_ == 28 &&
          statusUnfollowBuilder_ != null) {
        result.message_ = statusUnfollowBuilder_.build();
      }
      if (messageCase_ == 29 &&
          statusUpdateBuilder_ != null) {
        result.message_ = statusUpdateBuilder_.build();
      }
      if (messageCase_ == 30 &&
          streamDataBuilder_ != null) {
        result.message_ = streamDataBuilder_.build();
      }
      if (messageCase_ == 31 &&
          streamPresenceEventBuilder_ != null) {
        result.message_ = streamPresenceEventBuilder_.build();
      }
      if (messageCase_ == 32 &&
          pingBuilder_ != null) {
        result.message_ = pingBuilder_.build();
      }
      if (messageCase_ == 33 &&
          pongBuilder_ != null) {
        result.message_ = pongBuilder_.build();
      }
      if (messageCase_ == 34 &&
          partyBuilder_ != null) {
        result.message_ = partyBuilder_.build();
      }
      if (messageCase_ == 35 &&
          partyCreateBuilder_ != null) {
        result.message_ = partyCreateBuilder_.build();
      }
      if (messageCase_ == 36 &&
          partyJoinBuilder_ != null) {
        result.message_ = partyJoinBuilder_.build();
      }
      if (messageCase_ == 37 &&
          partyLeaveBuilder_ != null) {
        result.message_ = partyLeaveBuilder_.build();
      }
      if (messageCase_ == 38 &&
          partyPromoteBuilder_ != null) {
        result.message_ = partyPromoteBuilder_.build();
      }
      if (messageCase_ == 39 &&
          partyLeaderBuilder_ != null) {
        result.message_ = partyLeaderBuilder_.build();
      }
      if (messageCase_ == 40 &&
          partyAcceptBuilder_ != null) {
        result.message_ = partyAcceptBuilder_.build();
      }
      if (messageCase_ == 41 &&
          partyRemoveBuilder_ != null) {
        result.message_ = partyRemoveBuilder_.build();
      }
      if (messageCase_ == 42 &&
          partyCloseBuilder_ != null) {
        result.message_ = partyCloseBuilder_.build();
      }
      if (messageCase_ == 43 &&
          partyJoinRequestListBuilder_ != null) {
        result.message_ = partyJoinRequestListBuilder_.build();
      }
      if (messageCase_ == 44 &&
          partyJoinRequestBuilder_ != null) {
        result.message_ = partyJoinRequestBuilder_.build();
      }
      if (messageCase_ == 45 &&
          partyMatchmakerAddBuilder_ != null) {
        result.message_ = partyMatchmakerAddBuilder_.build();
      }
      if (messageCase_ == 46 &&
          partyMatchmakerRemoveBuilder_ != null) {
        result.message_ = partyMatchmakerRemoveBuilder_.build();
      }
      if (messageCase_ == 47 &&
          partyMatchmakerTicketBuilder_ != null) {
        result.message_ = partyMatchmakerTicketBuilder_.build();
      }
      if (messageCase_ == 48 &&
          partyDataBuilder_ != null) {
        result.message_ = partyDataBuilder_.build();
      }
      if (messageCase_ == 49 &&
          partyDataSendBuilder_ != null) {
        result.message_ = partyDataSendBuilder_.build();
      }
      if (messageCase_ == 50 &&
          partyPresenceEventBuilder_ != null) {
        result.message_ = partyPresenceEventBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.heroiclabs.nakama.rtapi.Envelope) {
        return mergeFrom((com.heroiclabs.nakama.rtapi.Envelope)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.heroiclabs.nakama.rtapi.Envelope other) {
      if (other == com.heroiclabs.nakama.rtapi.Envelope.getDefaultInstance()) return this;
      if (!other.getCid().isEmpty()) {
        cid_ = other.cid_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      switch (other.getMessageCase()) {
        case CHANNEL: {
          mergeChannel(other.getChannel());
          break;
        }
        case CHANNEL_JOIN: {
          mergeChannelJoin(other.getChannelJoin());
          break;
        }
        case CHANNEL_LEAVE: {
          mergeChannelLeave(other.getChannelLeave());
          break;
        }
        case CHANNEL_MESSAGE: {
          mergeChannelMessage(other.getChannelMessage());
          break;
        }
        case CHANNEL_MESSAGE_ACK: {
          mergeChannelMessageAck(other.getChannelMessageAck());
          break;
        }
        case CHANNEL_MESSAGE_SEND: {
          mergeChannelMessageSend(other.getChannelMessageSend());
          break;
        }
        case CHANNEL_MESSAGE_UPDATE: {
          mergeChannelMessageUpdate(other.getChannelMessageUpdate());
          break;
        }
        case CHANNEL_MESSAGE_REMOVE: {
          mergeChannelMessageRemove(other.getChannelMessageRemove());
          break;
        }
        case CHANNEL_PRESENCE_EVENT: {
          mergeChannelPresenceEvent(other.getChannelPresenceEvent());
          break;
        }
        case ERROR: {
          mergeError(other.getError());
          break;
        }
        case MATCH: {
          mergeMatch(other.getMatch());
          break;
        }
        case MATCH_CREATE: {
          mergeMatchCreate(other.getMatchCreate());
          break;
        }
        case MATCH_DATA: {
          mergeMatchData(other.getMatchData());
          break;
        }
        case MATCH_DATA_SEND: {
          mergeMatchDataSend(other.getMatchDataSend());
          break;
        }
        case MATCH_JOIN: {
          mergeMatchJoin(other.getMatchJoin());
          break;
        }
        case MATCH_LEAVE: {
          mergeMatchLeave(other.getMatchLeave());
          break;
        }
        case MATCH_PRESENCE_EVENT: {
          mergeMatchPresenceEvent(other.getMatchPresenceEvent());
          break;
        }
        case MATCHMAKER_ADD: {
          mergeMatchmakerAdd(other.getMatchmakerAdd());
          break;
        }
        case MATCHMAKER_MATCHED: {
          mergeMatchmakerMatched(other.getMatchmakerMatched());
          break;
        }
        case MATCHMAKER_REMOVE: {
          mergeMatchmakerRemove(other.getMatchmakerRemove());
          break;
        }
        case MATCHMAKER_TICKET: {
          mergeMatchmakerTicket(other.getMatchmakerTicket());
          break;
        }
        case NOTIFICATIONS: {
          mergeNotifications(other.getNotifications());
          break;
        }
        case RPC: {
          mergeRpc(other.getRpc());
          break;
        }
        case STATUS: {
          mergeStatus(other.getStatus());
          break;
        }
        case STATUS_FOLLOW: {
          mergeStatusFollow(other.getStatusFollow());
          break;
        }
        case STATUS_PRESENCE_EVENT: {
          mergeStatusPresenceEvent(other.getStatusPresenceEvent());
          break;
        }
        case STATUS_UNFOLLOW: {
          mergeStatusUnfollow(other.getStatusUnfollow());
          break;
        }
        case STATUS_UPDATE: {
          mergeStatusUpdate(other.getStatusUpdate());
          break;
        }
        case STREAM_DATA: {
          mergeStreamData(other.getStreamData());
          break;
        }
        case STREAM_PRESENCE_EVENT: {
          mergeStreamPresenceEvent(other.getStreamPresenceEvent());
          break;
        }
        case PING: {
          mergePing(other.getPing());
          break;
        }
        case PONG: {
          mergePong(other.getPong());
          break;
        }
        case PARTY: {
          mergeParty(other.getParty());
          break;
        }
        case PARTY_CREATE: {
          mergePartyCreate(other.getPartyCreate());
          break;
        }
        case PARTY_JOIN: {
          mergePartyJoin(other.getPartyJoin());
          break;
        }
        case PARTY_LEAVE: {
          mergePartyLeave(other.getPartyLeave());
          break;
        }
        case PARTY_PROMOTE: {
          mergePartyPromote(other.getPartyPromote());
          break;
        }
        case PARTY_LEADER: {
          mergePartyLeader(other.getPartyLeader());
          break;
        }
        case PARTY_ACCEPT: {
          mergePartyAccept(other.getPartyAccept());
          break;
        }
        case PARTY_REMOVE: {
          mergePartyRemove(other.getPartyRemove());
          break;
        }
        case PARTY_CLOSE: {
          mergePartyClose(other.getPartyClose());
          break;
        }
        case PARTY_JOIN_REQUEST_LIST: {
          mergePartyJoinRequestList(other.getPartyJoinRequestList());
          break;
        }
        case PARTY_JOIN_REQUEST: {
          mergePartyJoinRequest(other.getPartyJoinRequest());
          break;
        }
        case PARTY_MATCHMAKER_ADD: {
          mergePartyMatchmakerAdd(other.getPartyMatchmakerAdd());
          break;
        }
        case PARTY_MATCHMAKER_REMOVE: {
          mergePartyMatchmakerRemove(other.getPartyMatchmakerRemove());
          break;
        }
        case PARTY_MATCHMAKER_TICKET: {
          mergePartyMatchmakerTicket(other.getPartyMatchmakerTicket());
          break;
        }
        case PARTY_DATA: {
          mergePartyData(other.getPartyData());
          break;
        }
        case PARTY_DATA_SEND: {
          mergePartyDataSend(other.getPartyDataSend());
          break;
        }
        case PARTY_PRESENCE_EVENT: {
          mergePartyPresenceEvent(other.getPartyPresenceEvent());
          break;
        }
        case MESSAGE_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              cid_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getChannelFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 2;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getChannelJoinFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 3;
              break;
            } // case 26
            case 34: {
              input.readMessage(
                  getChannelLeaveFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 4;
              break;
            } // case 34
            case 42: {
              input.readMessage(
                  getChannelMessageFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 5;
              break;
            } // case 42
            case 50: {
              input.readMessage(
                  getChannelMessageAckFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 6;
              break;
            } // case 50
            case 58: {
              input.readMessage(
                  getChannelMessageSendFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 7;
              break;
            } // case 58
            case 66: {
              input.readMessage(
                  getChannelMessageUpdateFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 8;
              break;
            } // case 66
            case 74: {
              input.readMessage(
                  getChannelMessageRemoveFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 9;
              break;
            } // case 74
            case 82: {
              input.readMessage(
                  getChannelPresenceEventFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 10;
              break;
            } // case 82
            case 90: {
              input.readMessage(
                  getErrorFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 11;
              break;
            } // case 90
            case 98: {
              input.readMessage(
                  getMatchFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 12;
              break;
            } // case 98
            case 106: {
              input.readMessage(
                  getMatchCreateFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 13;
              break;
            } // case 106
            case 114: {
              input.readMessage(
                  getMatchDataFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 14;
              break;
            } // case 114
            case 122: {
              input.readMessage(
                  getMatchDataSendFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 15;
              break;
            } // case 122
            case 130: {
              input.readMessage(
                  getMatchJoinFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 16;
              break;
            } // case 130
            case 138: {
              input.readMessage(
                  getMatchLeaveFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 17;
              break;
            } // case 138
            case 146: {
              input.readMessage(
                  getMatchPresenceEventFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 18;
              break;
            } // case 146
            case 154: {
              input.readMessage(
                  getMatchmakerAddFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 19;
              break;
            } // case 154
            case 162: {
              input.readMessage(
                  getMatchmakerMatchedFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 20;
              break;
            } // case 162
            case 170: {
              input.readMessage(
                  getMatchmakerRemoveFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 21;
              break;
            } // case 170
            case 178: {
              input.readMessage(
                  getMatchmakerTicketFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 22;
              break;
            } // case 178
            case 186: {
              input.readMessage(
                  getNotificationsFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 23;
              break;
            } // case 186
            case 194: {
              input.readMessage(
                  getRpcFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 24;
              break;
            } // case 194
            case 202: {
              input.readMessage(
                  getStatusFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 25;
              break;
            } // case 202
            case 210: {
              input.readMessage(
                  getStatusFollowFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 26;
              break;
            } // case 210
            case 218: {
              input.readMessage(
                  getStatusPresenceEventFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 27;
              break;
            } // case 218
            case 226: {
              input.readMessage(
                  getStatusUnfollowFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 28;
              break;
            } // case 226
            case 234: {
              input.readMessage(
                  getStatusUpdateFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 29;
              break;
            } // case 234
            case 242: {
              input.readMessage(
                  getStreamDataFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 30;
              break;
            } // case 242
            case 250: {
              input.readMessage(
                  getStreamPresenceEventFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 31;
              break;
            } // case 250
            case 258: {
              input.readMessage(
                  getPingFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 32;
              break;
            } // case 258
            case 266: {
              input.readMessage(
                  getPongFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 33;
              break;
            } // case 266
            case 274: {
              input.readMessage(
                  getPartyFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 34;
              break;
            } // case 274
            case 282: {
              input.readMessage(
                  getPartyCreateFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 35;
              break;
            } // case 282
            case 290: {
              input.readMessage(
                  getPartyJoinFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 36;
              break;
            } // case 290
            case 298: {
              input.readMessage(
                  getPartyLeaveFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 37;
              break;
            } // case 298
            case 306: {
              input.readMessage(
                  getPartyPromoteFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 38;
              break;
            } // case 306
            case 314: {
              input.readMessage(
                  getPartyLeaderFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 39;
              break;
            } // case 314
            case 322: {
              input.readMessage(
                  getPartyAcceptFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 40;
              break;
            } // case 322
            case 330: {
              input.readMessage(
                  getPartyRemoveFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 41;
              break;
            } // case 330
            case 338: {
              input.readMessage(
                  getPartyCloseFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 42;
              break;
            } // case 338
            case 346: {
              input.readMessage(
                  getPartyJoinRequestListFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 43;
              break;
            } // case 346
            case 354: {
              input.readMessage(
                  getPartyJoinRequestFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 44;
              break;
            } // case 354
            case 362: {
              input.readMessage(
                  getPartyMatchmakerAddFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 45;
              break;
            } // case 362
            case 370: {
              input.readMessage(
                  getPartyMatchmakerRemoveFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 46;
              break;
            } // case 370
            case 378: {
              input.readMessage(
                  getPartyMatchmakerTicketFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 47;
              break;
            } // case 378
            case 386: {
              input.readMessage(
                  getPartyDataFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 48;
              break;
            } // case 386
            case 394: {
              input.readMessage(
                  getPartyDataSendFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 49;
              break;
            } // case 394
            case 402: {
              input.readMessage(
                  getPartyPresenceEventFieldBuilder().getBuilder(),
                  extensionRegistry);
              messageCase_ = 50;
              break;
            } // case 402
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int messageCase_ = 0;
    private java.lang.Object message_;
    public MessageCase
        getMessageCase() {
      return MessageCase.forNumber(
          messageCase_);
    }

    public Builder clearMessage() {
      messageCase_ = 0;
      message_ = null;
      onChanged();
      return this;
    }

    private int bitField0_;
    private int bitField1_;

    private java.lang.Object cid_ = "";
    /**
     * <code>string cid = 1 [json_name = "cid"];</code>
     * @return The cid.
     */
    public java.lang.String getCid() {
      java.lang.Object ref = cid_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        cid_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>string cid = 1 [json_name = "cid"];</code>
     * @return The bytes for cid.
     */
    public com.google.protobuf.ByteString
        getCidBytes() {
      java.lang.Object ref = cid_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        cid_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>string cid = 1 [json_name = "cid"];</code>
     * @param value The cid to set.
     * @return This builder for chaining.
     */
    public Builder setCid(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      cid_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>string cid = 1 [json_name = "cid"];</code>
     * @return This builder for chaining.
     */
    public Builder clearCid() {
      cid_ = getDefaultInstance().getCid();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <code>string cid = 1 [json_name = "cid"];</code>
     * @param value The bytes for cid to set.
     * @return This builder for chaining.
     */
    public Builder setCidBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      cid_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.Channel, com.heroiclabs.nakama.rtapi.Channel.Builder, com.heroiclabs.nakama.rtapi.ChannelOrBuilder> channelBuilder_;
    /**
     * <pre>
     * A response from a channel join operation.
     * </pre>
     *
     * <code>.nakama.realtime.Channel channel = 2 [json_name = "channel"];</code>
     * @return Whether the channel field is set.
     */
    @java.lang.Override
    public boolean hasChannel() {
      return messageCase_ == 2;
    }
    /**
     * <pre>
     * A response from a channel join operation.
     * </pre>
     *
     * <code>.nakama.realtime.Channel channel = 2 [json_name = "channel"];</code>
     * @return The channel.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.Channel getChannel() {
      if (channelBuilder_ == null) {
        if (messageCase_ == 2) {
          return (com.heroiclabs.nakama.rtapi.Channel) message_;
        }
        return com.heroiclabs.nakama.rtapi.Channel.getDefaultInstance();
      } else {
        if (messageCase_ == 2) {
          return channelBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.rtapi.Channel.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A response from a channel join operation.
     * </pre>
     *
     * <code>.nakama.realtime.Channel channel = 2 [json_name = "channel"];</code>
     */
    public Builder setChannel(com.heroiclabs.nakama.rtapi.Channel value) {
      if (channelBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        channelBuilder_.setMessage(value);
      }
      messageCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * A response from a channel join operation.
     * </pre>
     *
     * <code>.nakama.realtime.Channel channel = 2 [json_name = "channel"];</code>
     */
    public Builder setChannel(
        com.heroiclabs.nakama.rtapi.Channel.Builder builderForValue) {
      if (channelBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        channelBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * A response from a channel join operation.
     * </pre>
     *
     * <code>.nakama.realtime.Channel channel = 2 [json_name = "channel"];</code>
     */
    public Builder mergeChannel(com.heroiclabs.nakama.rtapi.Channel value) {
      if (channelBuilder_ == null) {
        if (messageCase_ == 2 &&
            message_ != com.heroiclabs.nakama.rtapi.Channel.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.rtapi.Channel.newBuilder((com.heroiclabs.nakama.rtapi.Channel) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 2) {
          channelBuilder_.mergeFrom(value);
        } else {
          channelBuilder_.setMessage(value);
        }
      }
      messageCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * A response from a channel join operation.
     * </pre>
     *
     * <code>.nakama.realtime.Channel channel = 2 [json_name = "channel"];</code>
     */
    public Builder clearChannel() {
      if (channelBuilder_ == null) {
        if (messageCase_ == 2) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 2) {
          messageCase_ = 0;
          message_ = null;
        }
        channelBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * A response from a channel join operation.
     * </pre>
     *
     * <code>.nakama.realtime.Channel channel = 2 [json_name = "channel"];</code>
     */
    public com.heroiclabs.nakama.rtapi.Channel.Builder getChannelBuilder() {
      return getChannelFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * A response from a channel join operation.
     * </pre>
     *
     * <code>.nakama.realtime.Channel channel = 2 [json_name = "channel"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.ChannelOrBuilder getChannelOrBuilder() {
      if ((messageCase_ == 2) && (channelBuilder_ != null)) {
        return channelBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 2) {
          return (com.heroiclabs.nakama.rtapi.Channel) message_;
        }
        return com.heroiclabs.nakama.rtapi.Channel.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A response from a channel join operation.
     * </pre>
     *
     * <code>.nakama.realtime.Channel channel = 2 [json_name = "channel"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.Channel, com.heroiclabs.nakama.rtapi.Channel.Builder, com.heroiclabs.nakama.rtapi.ChannelOrBuilder> 
        getChannelFieldBuilder() {
      if (channelBuilder_ == null) {
        if (!(messageCase_ == 2)) {
          message_ = com.heroiclabs.nakama.rtapi.Channel.getDefaultInstance();
        }
        channelBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.rtapi.Channel, com.heroiclabs.nakama.rtapi.Channel.Builder, com.heroiclabs.nakama.rtapi.ChannelOrBuilder>(
                (com.heroiclabs.nakama.rtapi.Channel) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 2;
      onChanged();
      return channelBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.ChannelJoin, com.heroiclabs.nakama.rtapi.ChannelJoin.Builder, com.heroiclabs.nakama.rtapi.ChannelJoinOrBuilder> channelJoinBuilder_;
    /**
     * <pre>
     * Join a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelJoin channel_join = 3 [json_name = "channelJoin"];</code>
     * @return Whether the channelJoin field is set.
     */
    @java.lang.Override
    public boolean hasChannelJoin() {
      return messageCase_ == 3;
    }
    /**
     * <pre>
     * Join a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelJoin channel_join = 3 [json_name = "channelJoin"];</code>
     * @return The channelJoin.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.ChannelJoin getChannelJoin() {
      if (channelJoinBuilder_ == null) {
        if (messageCase_ == 3) {
          return (com.heroiclabs.nakama.rtapi.ChannelJoin) message_;
        }
        return com.heroiclabs.nakama.rtapi.ChannelJoin.getDefaultInstance();
      } else {
        if (messageCase_ == 3) {
          return channelJoinBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.rtapi.ChannelJoin.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Join a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelJoin channel_join = 3 [json_name = "channelJoin"];</code>
     */
    public Builder setChannelJoin(com.heroiclabs.nakama.rtapi.ChannelJoin value) {
      if (channelJoinBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        channelJoinBuilder_.setMessage(value);
      }
      messageCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * Join a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelJoin channel_join = 3 [json_name = "channelJoin"];</code>
     */
    public Builder setChannelJoin(
        com.heroiclabs.nakama.rtapi.ChannelJoin.Builder builderForValue) {
      if (channelJoinBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        channelJoinBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * Join a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelJoin channel_join = 3 [json_name = "channelJoin"];</code>
     */
    public Builder mergeChannelJoin(com.heroiclabs.nakama.rtapi.ChannelJoin value) {
      if (channelJoinBuilder_ == null) {
        if (messageCase_ == 3 &&
            message_ != com.heroiclabs.nakama.rtapi.ChannelJoin.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.rtapi.ChannelJoin.newBuilder((com.heroiclabs.nakama.rtapi.ChannelJoin) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 3) {
          channelJoinBuilder_.mergeFrom(value);
        } else {
          channelJoinBuilder_.setMessage(value);
        }
      }
      messageCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * Join a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelJoin channel_join = 3 [json_name = "channelJoin"];</code>
     */
    public Builder clearChannelJoin() {
      if (channelJoinBuilder_ == null) {
        if (messageCase_ == 3) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 3) {
          messageCase_ = 0;
          message_ = null;
        }
        channelJoinBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Join a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelJoin channel_join = 3 [json_name = "channelJoin"];</code>
     */
    public com.heroiclabs.nakama.rtapi.ChannelJoin.Builder getChannelJoinBuilder() {
      return getChannelJoinFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Join a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelJoin channel_join = 3 [json_name = "channelJoin"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.ChannelJoinOrBuilder getChannelJoinOrBuilder() {
      if ((messageCase_ == 3) && (channelJoinBuilder_ != null)) {
        return channelJoinBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 3) {
          return (com.heroiclabs.nakama.rtapi.ChannelJoin) message_;
        }
        return com.heroiclabs.nakama.rtapi.ChannelJoin.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Join a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelJoin channel_join = 3 [json_name = "channelJoin"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.ChannelJoin, com.heroiclabs.nakama.rtapi.ChannelJoin.Builder, com.heroiclabs.nakama.rtapi.ChannelJoinOrBuilder> 
        getChannelJoinFieldBuilder() {
      if (channelJoinBuilder_ == null) {
        if (!(messageCase_ == 3)) {
          message_ = com.heroiclabs.nakama.rtapi.ChannelJoin.getDefaultInstance();
        }
        channelJoinBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.rtapi.ChannelJoin, com.heroiclabs.nakama.rtapi.ChannelJoin.Builder, com.heroiclabs.nakama.rtapi.ChannelJoinOrBuilder>(
                (com.heroiclabs.nakama.rtapi.ChannelJoin) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 3;
      onChanged();
      return channelJoinBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.ChannelLeave, com.heroiclabs.nakama.rtapi.ChannelLeave.Builder, com.heroiclabs.nakama.rtapi.ChannelLeaveOrBuilder> channelLeaveBuilder_;
    /**
     * <pre>
     * Leave a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelLeave channel_leave = 4 [json_name = "channelLeave"];</code>
     * @return Whether the channelLeave field is set.
     */
    @java.lang.Override
    public boolean hasChannelLeave() {
      return messageCase_ == 4;
    }
    /**
     * <pre>
     * Leave a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelLeave channel_leave = 4 [json_name = "channelLeave"];</code>
     * @return The channelLeave.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.ChannelLeave getChannelLeave() {
      if (channelLeaveBuilder_ == null) {
        if (messageCase_ == 4) {
          return (com.heroiclabs.nakama.rtapi.ChannelLeave) message_;
        }
        return com.heroiclabs.nakama.rtapi.ChannelLeave.getDefaultInstance();
      } else {
        if (messageCase_ == 4) {
          return channelLeaveBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.rtapi.ChannelLeave.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Leave a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelLeave channel_leave = 4 [json_name = "channelLeave"];</code>
     */
    public Builder setChannelLeave(com.heroiclabs.nakama.rtapi.ChannelLeave value) {
      if (channelLeaveBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        channelLeaveBuilder_.setMessage(value);
      }
      messageCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * Leave a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelLeave channel_leave = 4 [json_name = "channelLeave"];</code>
     */
    public Builder setChannelLeave(
        com.heroiclabs.nakama.rtapi.ChannelLeave.Builder builderForValue) {
      if (channelLeaveBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        channelLeaveBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * Leave a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelLeave channel_leave = 4 [json_name = "channelLeave"];</code>
     */
    public Builder mergeChannelLeave(com.heroiclabs.nakama.rtapi.ChannelLeave value) {
      if (channelLeaveBuilder_ == null) {
        if (messageCase_ == 4 &&
            message_ != com.heroiclabs.nakama.rtapi.ChannelLeave.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.rtapi.ChannelLeave.newBuilder((com.heroiclabs.nakama.rtapi.ChannelLeave) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 4) {
          channelLeaveBuilder_.mergeFrom(value);
        } else {
          channelLeaveBuilder_.setMessage(value);
        }
      }
      messageCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * Leave a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelLeave channel_leave = 4 [json_name = "channelLeave"];</code>
     */
    public Builder clearChannelLeave() {
      if (channelLeaveBuilder_ == null) {
        if (messageCase_ == 4) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 4) {
          messageCase_ = 0;
          message_ = null;
        }
        channelLeaveBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Leave a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelLeave channel_leave = 4 [json_name = "channelLeave"];</code>
     */
    public com.heroiclabs.nakama.rtapi.ChannelLeave.Builder getChannelLeaveBuilder() {
      return getChannelLeaveFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Leave a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelLeave channel_leave = 4 [json_name = "channelLeave"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.ChannelLeaveOrBuilder getChannelLeaveOrBuilder() {
      if ((messageCase_ == 4) && (channelLeaveBuilder_ != null)) {
        return channelLeaveBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 4) {
          return (com.heroiclabs.nakama.rtapi.ChannelLeave) message_;
        }
        return com.heroiclabs.nakama.rtapi.ChannelLeave.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Leave a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelLeave channel_leave = 4 [json_name = "channelLeave"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.ChannelLeave, com.heroiclabs.nakama.rtapi.ChannelLeave.Builder, com.heroiclabs.nakama.rtapi.ChannelLeaveOrBuilder> 
        getChannelLeaveFieldBuilder() {
      if (channelLeaveBuilder_ == null) {
        if (!(messageCase_ == 4)) {
          message_ = com.heroiclabs.nakama.rtapi.ChannelLeave.getDefaultInstance();
        }
        channelLeaveBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.rtapi.ChannelLeave, com.heroiclabs.nakama.rtapi.ChannelLeave.Builder, com.heroiclabs.nakama.rtapi.ChannelLeaveOrBuilder>(
                (com.heroiclabs.nakama.rtapi.ChannelLeave) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 4;
      onChanged();
      return channelLeaveBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.api.ChannelMessage, com.heroiclabs.nakama.api.ChannelMessage.Builder, com.heroiclabs.nakama.api.ChannelMessageOrBuilder> channelMessageBuilder_;
    /**
     * <pre>
     * An incoming message on a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.api.ChannelMessage channel_message = 5 [json_name = "channelMessage"];</code>
     * @return Whether the channelMessage field is set.
     */
    @java.lang.Override
    public boolean hasChannelMessage() {
      return messageCase_ == 5;
    }
    /**
     * <pre>
     * An incoming message on a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.api.ChannelMessage channel_message = 5 [json_name = "channelMessage"];</code>
     * @return The channelMessage.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.api.ChannelMessage getChannelMessage() {
      if (channelMessageBuilder_ == null) {
        if (messageCase_ == 5) {
          return (com.heroiclabs.nakama.api.ChannelMessage) message_;
        }
        return com.heroiclabs.nakama.api.ChannelMessage.getDefaultInstance();
      } else {
        if (messageCase_ == 5) {
          return channelMessageBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.api.ChannelMessage.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * An incoming message on a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.api.ChannelMessage channel_message = 5 [json_name = "channelMessage"];</code>
     */
    public Builder setChannelMessage(com.heroiclabs.nakama.api.ChannelMessage value) {
      if (channelMessageBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        channelMessageBuilder_.setMessage(value);
      }
      messageCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * An incoming message on a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.api.ChannelMessage channel_message = 5 [json_name = "channelMessage"];</code>
     */
    public Builder setChannelMessage(
        com.heroiclabs.nakama.api.ChannelMessage.Builder builderForValue) {
      if (channelMessageBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        channelMessageBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * An incoming message on a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.api.ChannelMessage channel_message = 5 [json_name = "channelMessage"];</code>
     */
    public Builder mergeChannelMessage(com.heroiclabs.nakama.api.ChannelMessage value) {
      if (channelMessageBuilder_ == null) {
        if (messageCase_ == 5 &&
            message_ != com.heroiclabs.nakama.api.ChannelMessage.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.api.ChannelMessage.newBuilder((com.heroiclabs.nakama.api.ChannelMessage) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 5) {
          channelMessageBuilder_.mergeFrom(value);
        } else {
          channelMessageBuilder_.setMessage(value);
        }
      }
      messageCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * An incoming message on a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.api.ChannelMessage channel_message = 5 [json_name = "channelMessage"];</code>
     */
    public Builder clearChannelMessage() {
      if (channelMessageBuilder_ == null) {
        if (messageCase_ == 5) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 5) {
          messageCase_ = 0;
          message_ = null;
        }
        channelMessageBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * An incoming message on a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.api.ChannelMessage channel_message = 5 [json_name = "channelMessage"];</code>
     */
    public com.heroiclabs.nakama.api.ChannelMessage.Builder getChannelMessageBuilder() {
      return getChannelMessageFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * An incoming message on a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.api.ChannelMessage channel_message = 5 [json_name = "channelMessage"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.api.ChannelMessageOrBuilder getChannelMessageOrBuilder() {
      if ((messageCase_ == 5) && (channelMessageBuilder_ != null)) {
        return channelMessageBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 5) {
          return (com.heroiclabs.nakama.api.ChannelMessage) message_;
        }
        return com.heroiclabs.nakama.api.ChannelMessage.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * An incoming message on a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.api.ChannelMessage channel_message = 5 [json_name = "channelMessage"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.api.ChannelMessage, com.heroiclabs.nakama.api.ChannelMessage.Builder, com.heroiclabs.nakama.api.ChannelMessageOrBuilder> 
        getChannelMessageFieldBuilder() {
      if (channelMessageBuilder_ == null) {
        if (!(messageCase_ == 5)) {
          message_ = com.heroiclabs.nakama.api.ChannelMessage.getDefaultInstance();
        }
        channelMessageBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.api.ChannelMessage, com.heroiclabs.nakama.api.ChannelMessage.Builder, com.heroiclabs.nakama.api.ChannelMessageOrBuilder>(
                (com.heroiclabs.nakama.api.ChannelMessage) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 5;
      onChanged();
      return channelMessageBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.ChannelMessageAck, com.heroiclabs.nakama.rtapi.ChannelMessageAck.Builder, com.heroiclabs.nakama.rtapi.ChannelMessageAckOrBuilder> channelMessageAckBuilder_;
    /**
     * <pre>
     * An acknowledgement received in response to sending a message on a chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageAck channel_message_ack = 6 [json_name = "channelMessageAck"];</code>
     * @return Whether the channelMessageAck field is set.
     */
    @java.lang.Override
    public boolean hasChannelMessageAck() {
      return messageCase_ == 6;
    }
    /**
     * <pre>
     * An acknowledgement received in response to sending a message on a chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageAck channel_message_ack = 6 [json_name = "channelMessageAck"];</code>
     * @return The channelMessageAck.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.ChannelMessageAck getChannelMessageAck() {
      if (channelMessageAckBuilder_ == null) {
        if (messageCase_ == 6) {
          return (com.heroiclabs.nakama.rtapi.ChannelMessageAck) message_;
        }
        return com.heroiclabs.nakama.rtapi.ChannelMessageAck.getDefaultInstance();
      } else {
        if (messageCase_ == 6) {
          return channelMessageAckBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.rtapi.ChannelMessageAck.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * An acknowledgement received in response to sending a message on a chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageAck channel_message_ack = 6 [json_name = "channelMessageAck"];</code>
     */
    public Builder setChannelMessageAck(com.heroiclabs.nakama.rtapi.ChannelMessageAck value) {
      if (channelMessageAckBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        channelMessageAckBuilder_.setMessage(value);
      }
      messageCase_ = 6;
      return this;
    }
    /**
     * <pre>
     * An acknowledgement received in response to sending a message on a chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageAck channel_message_ack = 6 [json_name = "channelMessageAck"];</code>
     */
    public Builder setChannelMessageAck(
        com.heroiclabs.nakama.rtapi.ChannelMessageAck.Builder builderForValue) {
      if (channelMessageAckBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        channelMessageAckBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 6;
      return this;
    }
    /**
     * <pre>
     * An acknowledgement received in response to sending a message on a chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageAck channel_message_ack = 6 [json_name = "channelMessageAck"];</code>
     */
    public Builder mergeChannelMessageAck(com.heroiclabs.nakama.rtapi.ChannelMessageAck value) {
      if (channelMessageAckBuilder_ == null) {
        if (messageCase_ == 6 &&
            message_ != com.heroiclabs.nakama.rtapi.ChannelMessageAck.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.rtapi.ChannelMessageAck.newBuilder((com.heroiclabs.nakama.rtapi.ChannelMessageAck) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 6) {
          channelMessageAckBuilder_.mergeFrom(value);
        } else {
          channelMessageAckBuilder_.setMessage(value);
        }
      }
      messageCase_ = 6;
      return this;
    }
    /**
     * <pre>
     * An acknowledgement received in response to sending a message on a chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageAck channel_message_ack = 6 [json_name = "channelMessageAck"];</code>
     */
    public Builder clearChannelMessageAck() {
      if (channelMessageAckBuilder_ == null) {
        if (messageCase_ == 6) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 6) {
          messageCase_ = 0;
          message_ = null;
        }
        channelMessageAckBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * An acknowledgement received in response to sending a message on a chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageAck channel_message_ack = 6 [json_name = "channelMessageAck"];</code>
     */
    public com.heroiclabs.nakama.rtapi.ChannelMessageAck.Builder getChannelMessageAckBuilder() {
      return getChannelMessageAckFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * An acknowledgement received in response to sending a message on a chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageAck channel_message_ack = 6 [json_name = "channelMessageAck"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.ChannelMessageAckOrBuilder getChannelMessageAckOrBuilder() {
      if ((messageCase_ == 6) && (channelMessageAckBuilder_ != null)) {
        return channelMessageAckBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 6) {
          return (com.heroiclabs.nakama.rtapi.ChannelMessageAck) message_;
        }
        return com.heroiclabs.nakama.rtapi.ChannelMessageAck.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * An acknowledgement received in response to sending a message on a chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageAck channel_message_ack = 6 [json_name = "channelMessageAck"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.ChannelMessageAck, com.heroiclabs.nakama.rtapi.ChannelMessageAck.Builder, com.heroiclabs.nakama.rtapi.ChannelMessageAckOrBuilder> 
        getChannelMessageAckFieldBuilder() {
      if (channelMessageAckBuilder_ == null) {
        if (!(messageCase_ == 6)) {
          message_ = com.heroiclabs.nakama.rtapi.ChannelMessageAck.getDefaultInstance();
        }
        channelMessageAckBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.rtapi.ChannelMessageAck, com.heroiclabs.nakama.rtapi.ChannelMessageAck.Builder, com.heroiclabs.nakama.rtapi.ChannelMessageAckOrBuilder>(
                (com.heroiclabs.nakama.rtapi.ChannelMessageAck) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 6;
      onChanged();
      return channelMessageAckBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.ChannelMessageSend, com.heroiclabs.nakama.rtapi.ChannelMessageSend.Builder, com.heroiclabs.nakama.rtapi.ChannelMessageSendOrBuilder> channelMessageSendBuilder_;
    /**
     * <pre>
     * Send a message to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageSend channel_message_send = 7 [json_name = "channelMessageSend"];</code>
     * @return Whether the channelMessageSend field is set.
     */
    @java.lang.Override
    public boolean hasChannelMessageSend() {
      return messageCase_ == 7;
    }
    /**
     * <pre>
     * Send a message to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageSend channel_message_send = 7 [json_name = "channelMessageSend"];</code>
     * @return The channelMessageSend.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.ChannelMessageSend getChannelMessageSend() {
      if (channelMessageSendBuilder_ == null) {
        if (messageCase_ == 7) {
          return (com.heroiclabs.nakama.rtapi.ChannelMessageSend) message_;
        }
        return com.heroiclabs.nakama.rtapi.ChannelMessageSend.getDefaultInstance();
      } else {
        if (messageCase_ == 7) {
          return channelMessageSendBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.rtapi.ChannelMessageSend.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Send a message to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageSend channel_message_send = 7 [json_name = "channelMessageSend"];</code>
     */
    public Builder setChannelMessageSend(com.heroiclabs.nakama.rtapi.ChannelMessageSend value) {
      if (channelMessageSendBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        channelMessageSendBuilder_.setMessage(value);
      }
      messageCase_ = 7;
      return this;
    }
    /**
     * <pre>
     * Send a message to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageSend channel_message_send = 7 [json_name = "channelMessageSend"];</code>
     */
    public Builder setChannelMessageSend(
        com.heroiclabs.nakama.rtapi.ChannelMessageSend.Builder builderForValue) {
      if (channelMessageSendBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        channelMessageSendBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 7;
      return this;
    }
    /**
     * <pre>
     * Send a message to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageSend channel_message_send = 7 [json_name = "channelMessageSend"];</code>
     */
    public Builder mergeChannelMessageSend(com.heroiclabs.nakama.rtapi.ChannelMessageSend value) {
      if (channelMessageSendBuilder_ == null) {
        if (messageCase_ == 7 &&
            message_ != com.heroiclabs.nakama.rtapi.ChannelMessageSend.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.rtapi.ChannelMessageSend.newBuilder((com.heroiclabs.nakama.rtapi.ChannelMessageSend) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 7) {
          channelMessageSendBuilder_.mergeFrom(value);
        } else {
          channelMessageSendBuilder_.setMessage(value);
        }
      }
      messageCase_ = 7;
      return this;
    }
    /**
     * <pre>
     * Send a message to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageSend channel_message_send = 7 [json_name = "channelMessageSend"];</code>
     */
    public Builder clearChannelMessageSend() {
      if (channelMessageSendBuilder_ == null) {
        if (messageCase_ == 7) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 7) {
          messageCase_ = 0;
          message_ = null;
        }
        channelMessageSendBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Send a message to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageSend channel_message_send = 7 [json_name = "channelMessageSend"];</code>
     */
    public com.heroiclabs.nakama.rtapi.ChannelMessageSend.Builder getChannelMessageSendBuilder() {
      return getChannelMessageSendFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Send a message to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageSend channel_message_send = 7 [json_name = "channelMessageSend"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.ChannelMessageSendOrBuilder getChannelMessageSendOrBuilder() {
      if ((messageCase_ == 7) && (channelMessageSendBuilder_ != null)) {
        return channelMessageSendBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 7) {
          return (com.heroiclabs.nakama.rtapi.ChannelMessageSend) message_;
        }
        return com.heroiclabs.nakama.rtapi.ChannelMessageSend.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Send a message to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageSend channel_message_send = 7 [json_name = "channelMessageSend"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.ChannelMessageSend, com.heroiclabs.nakama.rtapi.ChannelMessageSend.Builder, com.heroiclabs.nakama.rtapi.ChannelMessageSendOrBuilder> 
        getChannelMessageSendFieldBuilder() {
      if (channelMessageSendBuilder_ == null) {
        if (!(messageCase_ == 7)) {
          message_ = com.heroiclabs.nakama.rtapi.ChannelMessageSend.getDefaultInstance();
        }
        channelMessageSendBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.rtapi.ChannelMessageSend, com.heroiclabs.nakama.rtapi.ChannelMessageSend.Builder, com.heroiclabs.nakama.rtapi.ChannelMessageSendOrBuilder>(
                (com.heroiclabs.nakama.rtapi.ChannelMessageSend) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 7;
      onChanged();
      return channelMessageSendBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.ChannelMessageUpdate, com.heroiclabs.nakama.rtapi.ChannelMessageUpdate.Builder, com.heroiclabs.nakama.rtapi.ChannelMessageUpdateOrBuilder> channelMessageUpdateBuilder_;
    /**
     * <pre>
     * Update a message previously sent to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageUpdate channel_message_update = 8 [json_name = "channelMessageUpdate"];</code>
     * @return Whether the channelMessageUpdate field is set.
     */
    @java.lang.Override
    public boolean hasChannelMessageUpdate() {
      return messageCase_ == 8;
    }
    /**
     * <pre>
     * Update a message previously sent to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageUpdate channel_message_update = 8 [json_name = "channelMessageUpdate"];</code>
     * @return The channelMessageUpdate.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.ChannelMessageUpdate getChannelMessageUpdate() {
      if (channelMessageUpdateBuilder_ == null) {
        if (messageCase_ == 8) {
          return (com.heroiclabs.nakama.rtapi.ChannelMessageUpdate) message_;
        }
        return com.heroiclabs.nakama.rtapi.ChannelMessageUpdate.getDefaultInstance();
      } else {
        if (messageCase_ == 8) {
          return channelMessageUpdateBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.rtapi.ChannelMessageUpdate.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Update a message previously sent to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageUpdate channel_message_update = 8 [json_name = "channelMessageUpdate"];</code>
     */
    public Builder setChannelMessageUpdate(com.heroiclabs.nakama.rtapi.ChannelMessageUpdate value) {
      if (channelMessageUpdateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        channelMessageUpdateBuilder_.setMessage(value);
      }
      messageCase_ = 8;
      return this;
    }
    /**
     * <pre>
     * Update a message previously sent to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageUpdate channel_message_update = 8 [json_name = "channelMessageUpdate"];</code>
     */
    public Builder setChannelMessageUpdate(
        com.heroiclabs.nakama.rtapi.ChannelMessageUpdate.Builder builderForValue) {
      if (channelMessageUpdateBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        channelMessageUpdateBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 8;
      return this;
    }
    /**
     * <pre>
     * Update a message previously sent to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageUpdate channel_message_update = 8 [json_name = "channelMessageUpdate"];</code>
     */
    public Builder mergeChannelMessageUpdate(com.heroiclabs.nakama.rtapi.ChannelMessageUpdate value) {
      if (channelMessageUpdateBuilder_ == null) {
        if (messageCase_ == 8 &&
            message_ != com.heroiclabs.nakama.rtapi.ChannelMessageUpdate.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.rtapi.ChannelMessageUpdate.newBuilder((com.heroiclabs.nakama.rtapi.ChannelMessageUpdate) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 8) {
          channelMessageUpdateBuilder_.mergeFrom(value);
        } else {
          channelMessageUpdateBuilder_.setMessage(value);
        }
      }
      messageCase_ = 8;
      return this;
    }
    /**
     * <pre>
     * Update a message previously sent to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageUpdate channel_message_update = 8 [json_name = "channelMessageUpdate"];</code>
     */
    public Builder clearChannelMessageUpdate() {
      if (channelMessageUpdateBuilder_ == null) {
        if (messageCase_ == 8) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 8) {
          messageCase_ = 0;
          message_ = null;
        }
        channelMessageUpdateBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Update a message previously sent to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageUpdate channel_message_update = 8 [json_name = "channelMessageUpdate"];</code>
     */
    public com.heroiclabs.nakama.rtapi.ChannelMessageUpdate.Builder getChannelMessageUpdateBuilder() {
      return getChannelMessageUpdateFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Update a message previously sent to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageUpdate channel_message_update = 8 [json_name = "channelMessageUpdate"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.ChannelMessageUpdateOrBuilder getChannelMessageUpdateOrBuilder() {
      if ((messageCase_ == 8) && (channelMessageUpdateBuilder_ != null)) {
        return channelMessageUpdateBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 8) {
          return (com.heroiclabs.nakama.rtapi.ChannelMessageUpdate) message_;
        }
        return com.heroiclabs.nakama.rtapi.ChannelMessageUpdate.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Update a message previously sent to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageUpdate channel_message_update = 8 [json_name = "channelMessageUpdate"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.ChannelMessageUpdate, com.heroiclabs.nakama.rtapi.ChannelMessageUpdate.Builder, com.heroiclabs.nakama.rtapi.ChannelMessageUpdateOrBuilder> 
        getChannelMessageUpdateFieldBuilder() {
      if (channelMessageUpdateBuilder_ == null) {
        if (!(messageCase_ == 8)) {
          message_ = com.heroiclabs.nakama.rtapi.ChannelMessageUpdate.getDefaultInstance();
        }
        channelMessageUpdateBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.rtapi.ChannelMessageUpdate, com.heroiclabs.nakama.rtapi.ChannelMessageUpdate.Builder, com.heroiclabs.nakama.rtapi.ChannelMessageUpdateOrBuilder>(
                (com.heroiclabs.nakama.rtapi.ChannelMessageUpdate) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 8;
      onChanged();
      return channelMessageUpdateBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.ChannelMessageRemove, com.heroiclabs.nakama.rtapi.ChannelMessageRemove.Builder, com.heroiclabs.nakama.rtapi.ChannelMessageRemoveOrBuilder> channelMessageRemoveBuilder_;
    /**
     * <pre>
     * Remove a message previously sent to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageRemove channel_message_remove = 9 [json_name = "channelMessageRemove"];</code>
     * @return Whether the channelMessageRemove field is set.
     */
    @java.lang.Override
    public boolean hasChannelMessageRemove() {
      return messageCase_ == 9;
    }
    /**
     * <pre>
     * Remove a message previously sent to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageRemove channel_message_remove = 9 [json_name = "channelMessageRemove"];</code>
     * @return The channelMessageRemove.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.ChannelMessageRemove getChannelMessageRemove() {
      if (channelMessageRemoveBuilder_ == null) {
        if (messageCase_ == 9) {
          return (com.heroiclabs.nakama.rtapi.ChannelMessageRemove) message_;
        }
        return com.heroiclabs.nakama.rtapi.ChannelMessageRemove.getDefaultInstance();
      } else {
        if (messageCase_ == 9) {
          return channelMessageRemoveBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.rtapi.ChannelMessageRemove.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Remove a message previously sent to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageRemove channel_message_remove = 9 [json_name = "channelMessageRemove"];</code>
     */
    public Builder setChannelMessageRemove(com.heroiclabs.nakama.rtapi.ChannelMessageRemove value) {
      if (channelMessageRemoveBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        channelMessageRemoveBuilder_.setMessage(value);
      }
      messageCase_ = 9;
      return this;
    }
    /**
     * <pre>
     * Remove a message previously sent to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageRemove channel_message_remove = 9 [json_name = "channelMessageRemove"];</code>
     */
    public Builder setChannelMessageRemove(
        com.heroiclabs.nakama.rtapi.ChannelMessageRemove.Builder builderForValue) {
      if (channelMessageRemoveBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        channelMessageRemoveBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 9;
      return this;
    }
    /**
     * <pre>
     * Remove a message previously sent to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageRemove channel_message_remove = 9 [json_name = "channelMessageRemove"];</code>
     */
    public Builder mergeChannelMessageRemove(com.heroiclabs.nakama.rtapi.ChannelMessageRemove value) {
      if (channelMessageRemoveBuilder_ == null) {
        if (messageCase_ == 9 &&
            message_ != com.heroiclabs.nakama.rtapi.ChannelMessageRemove.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.rtapi.ChannelMessageRemove.newBuilder((com.heroiclabs.nakama.rtapi.ChannelMessageRemove) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 9) {
          channelMessageRemoveBuilder_.mergeFrom(value);
        } else {
          channelMessageRemoveBuilder_.setMessage(value);
        }
      }
      messageCase_ = 9;
      return this;
    }
    /**
     * <pre>
     * Remove a message previously sent to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageRemove channel_message_remove = 9 [json_name = "channelMessageRemove"];</code>
     */
    public Builder clearChannelMessageRemove() {
      if (channelMessageRemoveBuilder_ == null) {
        if (messageCase_ == 9) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 9) {
          messageCase_ = 0;
          message_ = null;
        }
        channelMessageRemoveBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Remove a message previously sent to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageRemove channel_message_remove = 9 [json_name = "channelMessageRemove"];</code>
     */
    public com.heroiclabs.nakama.rtapi.ChannelMessageRemove.Builder getChannelMessageRemoveBuilder() {
      return getChannelMessageRemoveFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Remove a message previously sent to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageRemove channel_message_remove = 9 [json_name = "channelMessageRemove"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.ChannelMessageRemoveOrBuilder getChannelMessageRemoveOrBuilder() {
      if ((messageCase_ == 9) && (channelMessageRemoveBuilder_ != null)) {
        return channelMessageRemoveBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 9) {
          return (com.heroiclabs.nakama.rtapi.ChannelMessageRemove) message_;
        }
        return com.heroiclabs.nakama.rtapi.ChannelMessageRemove.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Remove a message previously sent to a realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelMessageRemove channel_message_remove = 9 [json_name = "channelMessageRemove"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.ChannelMessageRemove, com.heroiclabs.nakama.rtapi.ChannelMessageRemove.Builder, com.heroiclabs.nakama.rtapi.ChannelMessageRemoveOrBuilder> 
        getChannelMessageRemoveFieldBuilder() {
      if (channelMessageRemoveBuilder_ == null) {
        if (!(messageCase_ == 9)) {
          message_ = com.heroiclabs.nakama.rtapi.ChannelMessageRemove.getDefaultInstance();
        }
        channelMessageRemoveBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.rtapi.ChannelMessageRemove, com.heroiclabs.nakama.rtapi.ChannelMessageRemove.Builder, com.heroiclabs.nakama.rtapi.ChannelMessageRemoveOrBuilder>(
                (com.heroiclabs.nakama.rtapi.ChannelMessageRemove) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 9;
      onChanged();
      return channelMessageRemoveBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.ChannelPresenceEvent, com.heroiclabs.nakama.rtapi.ChannelPresenceEvent.Builder, com.heroiclabs.nakama.rtapi.ChannelPresenceEventOrBuilder> channelPresenceEventBuilder_;
    /**
     * <pre>
     * Presence update for a particular realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelPresenceEvent channel_presence_event = 10 [json_name = "channelPresenceEvent"];</code>
     * @return Whether the channelPresenceEvent field is set.
     */
    @java.lang.Override
    public boolean hasChannelPresenceEvent() {
      return messageCase_ == 10;
    }
    /**
     * <pre>
     * Presence update for a particular realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelPresenceEvent channel_presence_event = 10 [json_name = "channelPresenceEvent"];</code>
     * @return The channelPresenceEvent.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.ChannelPresenceEvent getChannelPresenceEvent() {
      if (channelPresenceEventBuilder_ == null) {
        if (messageCase_ == 10) {
          return (com.heroiclabs.nakama.rtapi.ChannelPresenceEvent) message_;
        }
        return com.heroiclabs.nakama.rtapi.ChannelPresenceEvent.getDefaultInstance();
      } else {
        if (messageCase_ == 10) {
          return channelPresenceEventBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.rtapi.ChannelPresenceEvent.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Presence update for a particular realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelPresenceEvent channel_presence_event = 10 [json_name = "channelPresenceEvent"];</code>
     */
    public Builder setChannelPresenceEvent(com.heroiclabs.nakama.rtapi.ChannelPresenceEvent value) {
      if (channelPresenceEventBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        channelPresenceEventBuilder_.setMessage(value);
      }
      messageCase_ = 10;
      return this;
    }
    /**
     * <pre>
     * Presence update for a particular realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelPresenceEvent channel_presence_event = 10 [json_name = "channelPresenceEvent"];</code>
     */
    public Builder setChannelPresenceEvent(
        com.heroiclabs.nakama.rtapi.ChannelPresenceEvent.Builder builderForValue) {
      if (channelPresenceEventBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        channelPresenceEventBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 10;
      return this;
    }
    /**
     * <pre>
     * Presence update for a particular realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelPresenceEvent channel_presence_event = 10 [json_name = "channelPresenceEvent"];</code>
     */
    public Builder mergeChannelPresenceEvent(com.heroiclabs.nakama.rtapi.ChannelPresenceEvent value) {
      if (channelPresenceEventBuilder_ == null) {
        if (messageCase_ == 10 &&
            message_ != com.heroiclabs.nakama.rtapi.ChannelPresenceEvent.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.rtapi.ChannelPresenceEvent.newBuilder((com.heroiclabs.nakama.rtapi.ChannelPresenceEvent) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 10) {
          channelPresenceEventBuilder_.mergeFrom(value);
        } else {
          channelPresenceEventBuilder_.setMessage(value);
        }
      }
      messageCase_ = 10;
      return this;
    }
    /**
     * <pre>
     * Presence update for a particular realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelPresenceEvent channel_presence_event = 10 [json_name = "channelPresenceEvent"];</code>
     */
    public Builder clearChannelPresenceEvent() {
      if (channelPresenceEventBuilder_ == null) {
        if (messageCase_ == 10) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 10) {
          messageCase_ = 0;
          message_ = null;
        }
        channelPresenceEventBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Presence update for a particular realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelPresenceEvent channel_presence_event = 10 [json_name = "channelPresenceEvent"];</code>
     */
    public com.heroiclabs.nakama.rtapi.ChannelPresenceEvent.Builder getChannelPresenceEventBuilder() {
      return getChannelPresenceEventFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Presence update for a particular realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelPresenceEvent channel_presence_event = 10 [json_name = "channelPresenceEvent"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.ChannelPresenceEventOrBuilder getChannelPresenceEventOrBuilder() {
      if ((messageCase_ == 10) && (channelPresenceEventBuilder_ != null)) {
        return channelPresenceEventBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 10) {
          return (com.heroiclabs.nakama.rtapi.ChannelPresenceEvent) message_;
        }
        return com.heroiclabs.nakama.rtapi.ChannelPresenceEvent.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Presence update for a particular realtime chat channel.
     * </pre>
     *
     * <code>.nakama.realtime.ChannelPresenceEvent channel_presence_event = 10 [json_name = "channelPresenceEvent"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.ChannelPresenceEvent, com.heroiclabs.nakama.rtapi.ChannelPresenceEvent.Builder, com.heroiclabs.nakama.rtapi.ChannelPresenceEventOrBuilder> 
        getChannelPresenceEventFieldBuilder() {
      if (channelPresenceEventBuilder_ == null) {
        if (!(messageCase_ == 10)) {
          message_ = com.heroiclabs.nakama.rtapi.ChannelPresenceEvent.getDefaultInstance();
        }
        channelPresenceEventBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.rtapi.ChannelPresenceEvent, com.heroiclabs.nakama.rtapi.ChannelPresenceEvent.Builder, com.heroiclabs.nakama.rtapi.ChannelPresenceEventOrBuilder>(
                (com.heroiclabs.nakama.rtapi.ChannelPresenceEvent) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 10;
      onChanged();
      return channelPresenceEventBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.Error, com.heroiclabs.nakama.rtapi.Error.Builder, com.heroiclabs.nakama.rtapi.ErrorOrBuilder> errorBuilder_;
    /**
     * <pre>
     * Describes an error which occurred on the server.
     * </pre>
     *
     * <code>.nakama.realtime.Error error = 11 [json_name = "error"];</code>
     * @return Whether the error field is set.
     */
    @java.lang.Override
    public boolean hasError() {
      return messageCase_ == 11;
    }
    /**
     * <pre>
     * Describes an error which occurred on the server.
     * </pre>
     *
     * <code>.nakama.realtime.Error error = 11 [json_name = "error"];</code>
     * @return The error.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.Error getError() {
      if (errorBuilder_ == null) {
        if (messageCase_ == 11) {
          return (com.heroiclabs.nakama.rtapi.Error) message_;
        }
        return com.heroiclabs.nakama.rtapi.Error.getDefaultInstance();
      } else {
        if (messageCase_ == 11) {
          return errorBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.rtapi.Error.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Describes an error which occurred on the server.
     * </pre>
     *
     * <code>.nakama.realtime.Error error = 11 [json_name = "error"];</code>
     */
    public Builder setError(com.heroiclabs.nakama.rtapi.Error value) {
      if (errorBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        errorBuilder_.setMessage(value);
      }
      messageCase_ = 11;
      return this;
    }
    /**
     * <pre>
     * Describes an error which occurred on the server.
     * </pre>
     *
     * <code>.nakama.realtime.Error error = 11 [json_name = "error"];</code>
     */
    public Builder setError(
        com.heroiclabs.nakama.rtapi.Error.Builder builderForValue) {
      if (errorBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        errorBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 11;
      return this;
    }
    /**
     * <pre>
     * Describes an error which occurred on the server.
     * </pre>
     *
     * <code>.nakama.realtime.Error error = 11 [json_name = "error"];</code>
     */
    public Builder mergeError(com.heroiclabs.nakama.rtapi.Error value) {
      if (errorBuilder_ == null) {
        if (messageCase_ == 11 &&
            message_ != com.heroiclabs.nakama.rtapi.Error.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.rtapi.Error.newBuilder((com.heroiclabs.nakama.rtapi.Error) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 11) {
          errorBuilder_.mergeFrom(value);
        } else {
          errorBuilder_.setMessage(value);
        }
      }
      messageCase_ = 11;
      return this;
    }
    /**
     * <pre>
     * Describes an error which occurred on the server.
     * </pre>
     *
     * <code>.nakama.realtime.Error error = 11 [json_name = "error"];</code>
     */
    public Builder clearError() {
      if (errorBuilder_ == null) {
        if (messageCase_ == 11) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 11) {
          messageCase_ = 0;
          message_ = null;
        }
        errorBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Describes an error which occurred on the server.
     * </pre>
     *
     * <code>.nakama.realtime.Error error = 11 [json_name = "error"];</code>
     */
    public com.heroiclabs.nakama.rtapi.Error.Builder getErrorBuilder() {
      return getErrorFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Describes an error which occurred on the server.
     * </pre>
     *
     * <code>.nakama.realtime.Error error = 11 [json_name = "error"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.ErrorOrBuilder getErrorOrBuilder() {
      if ((messageCase_ == 11) && (errorBuilder_ != null)) {
        return errorBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 11) {
          return (com.heroiclabs.nakama.rtapi.Error) message_;
        }
        return com.heroiclabs.nakama.rtapi.Error.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Describes an error which occurred on the server.
     * </pre>
     *
     * <code>.nakama.realtime.Error error = 11 [json_name = "error"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.Error, com.heroiclabs.nakama.rtapi.Error.Builder, com.heroiclabs.nakama.rtapi.ErrorOrBuilder> 
        getErrorFieldBuilder() {
      if (errorBuilder_ == null) {
        if (!(messageCase_ == 11)) {
          message_ = com.heroiclabs.nakama.rtapi.Error.getDefaultInstance();
        }
        errorBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.rtapi.Error, com.heroiclabs.nakama.rtapi.Error.Builder, com.heroiclabs.nakama.rtapi.ErrorOrBuilder>(
                (com.heroiclabs.nakama.rtapi.Error) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 11;
      onChanged();
      return errorBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.Match, com.heroiclabs.nakama.rtapi.Match.Builder, com.heroiclabs.nakama.rtapi.MatchOrBuilder> matchBuilder_;
    /**
     * <pre>
     * Incoming information about a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.Match match = 12 [json_name = "match"];</code>
     * @return Whether the match field is set.
     */
    @java.lang.Override
    public boolean hasMatch() {
      return messageCase_ == 12;
    }
    /**
     * <pre>
     * Incoming information about a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.Match match = 12 [json_name = "match"];</code>
     * @return The match.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.Match getMatch() {
      if (matchBuilder_ == null) {
        if (messageCase_ == 12) {
          return (com.heroiclabs.nakama.rtapi.Match) message_;
        }
        return com.heroiclabs.nakama.rtapi.Match.getDefaultInstance();
      } else {
        if (messageCase_ == 12) {
          return matchBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.rtapi.Match.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Incoming information about a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.Match match = 12 [json_name = "match"];</code>
     */
    public Builder setMatch(com.heroiclabs.nakama.rtapi.Match value) {
      if (matchBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        matchBuilder_.setMessage(value);
      }
      messageCase_ = 12;
      return this;
    }
    /**
     * <pre>
     * Incoming information about a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.Match match = 12 [json_name = "match"];</code>
     */
    public Builder setMatch(
        com.heroiclabs.nakama.rtapi.Match.Builder builderForValue) {
      if (matchBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        matchBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 12;
      return this;
    }
    /**
     * <pre>
     * Incoming information about a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.Match match = 12 [json_name = "match"];</code>
     */
    public Builder mergeMatch(com.heroiclabs.nakama.rtapi.Match value) {
      if (matchBuilder_ == null) {
        if (messageCase_ == 12 &&
            message_ != com.heroiclabs.nakama.rtapi.Match.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.rtapi.Match.newBuilder((com.heroiclabs.nakama.rtapi.Match) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 12) {
          matchBuilder_.mergeFrom(value);
        } else {
          matchBuilder_.setMessage(value);
        }
      }
      messageCase_ = 12;
      return this;
    }
    /**
     * <pre>
     * Incoming information about a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.Match match = 12 [json_name = "match"];</code>
     */
    public Builder clearMatch() {
      if (matchBuilder_ == null) {
        if (messageCase_ == 12) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 12) {
          messageCase_ = 0;
          message_ = null;
        }
        matchBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Incoming information about a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.Match match = 12 [json_name = "match"];</code>
     */
    public com.heroiclabs.nakama.rtapi.Match.Builder getMatchBuilder() {
      return getMatchFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Incoming information about a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.Match match = 12 [json_name = "match"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.MatchOrBuilder getMatchOrBuilder() {
      if ((messageCase_ == 12) && (matchBuilder_ != null)) {
        return matchBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 12) {
          return (com.heroiclabs.nakama.rtapi.Match) message_;
        }
        return com.heroiclabs.nakama.rtapi.Match.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Incoming information about a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.Match match = 12 [json_name = "match"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.Match, com.heroiclabs.nakama.rtapi.Match.Builder, com.heroiclabs.nakama.rtapi.MatchOrBuilder> 
        getMatchFieldBuilder() {
      if (matchBuilder_ == null) {
        if (!(messageCase_ == 12)) {
          message_ = com.heroiclabs.nakama.rtapi.Match.getDefaultInstance();
        }
        matchBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.rtapi.Match, com.heroiclabs.nakama.rtapi.Match.Builder, com.heroiclabs.nakama.rtapi.MatchOrBuilder>(
                (com.heroiclabs.nakama.rtapi.Match) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 12;
      onChanged();
      return matchBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.MatchCreate, com.heroiclabs.nakama.rtapi.MatchCreate.Builder, com.heroiclabs.nakama.rtapi.MatchCreateOrBuilder> matchCreateBuilder_;
    /**
     * <pre>
     * A client to server request to create a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchCreate match_create = 13 [json_name = "matchCreate"];</code>
     * @return Whether the matchCreate field is set.
     */
    @java.lang.Override
    public boolean hasMatchCreate() {
      return messageCase_ == 13;
    }
    /**
     * <pre>
     * A client to server request to create a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchCreate match_create = 13 [json_name = "matchCreate"];</code>
     * @return The matchCreate.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.MatchCreate getMatchCreate() {
      if (matchCreateBuilder_ == null) {
        if (messageCase_ == 13) {
          return (com.heroiclabs.nakama.rtapi.MatchCreate) message_;
        }
        return com.heroiclabs.nakama.rtapi.MatchCreate.getDefaultInstance();
      } else {
        if (messageCase_ == 13) {
          return matchCreateBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.rtapi.MatchCreate.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A client to server request to create a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchCreate match_create = 13 [json_name = "matchCreate"];</code>
     */
    public Builder setMatchCreate(com.heroiclabs.nakama.rtapi.MatchCreate value) {
      if (matchCreateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        matchCreateBuilder_.setMessage(value);
      }
      messageCase_ = 13;
      return this;
    }
    /**
     * <pre>
     * A client to server request to create a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchCreate match_create = 13 [json_name = "matchCreate"];</code>
     */
    public Builder setMatchCreate(
        com.heroiclabs.nakama.rtapi.MatchCreate.Builder builderForValue) {
      if (matchCreateBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        matchCreateBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 13;
      return this;
    }
    /**
     * <pre>
     * A client to server request to create a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchCreate match_create = 13 [json_name = "matchCreate"];</code>
     */
    public Builder mergeMatchCreate(com.heroiclabs.nakama.rtapi.MatchCreate value) {
      if (matchCreateBuilder_ == null) {
        if (messageCase_ == 13 &&
            message_ != com.heroiclabs.nakama.rtapi.MatchCreate.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.rtapi.MatchCreate.newBuilder((com.heroiclabs.nakama.rtapi.MatchCreate) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 13) {
          matchCreateBuilder_.mergeFrom(value);
        } else {
          matchCreateBuilder_.setMessage(value);
        }
      }
      messageCase_ = 13;
      return this;
    }
    /**
     * <pre>
     * A client to server request to create a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchCreate match_create = 13 [json_name = "matchCreate"];</code>
     */
    public Builder clearMatchCreate() {
      if (matchCreateBuilder_ == null) {
        if (messageCase_ == 13) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 13) {
          messageCase_ = 0;
          message_ = null;
        }
        matchCreateBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * A client to server request to create a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchCreate match_create = 13 [json_name = "matchCreate"];</code>
     */
    public com.heroiclabs.nakama.rtapi.MatchCreate.Builder getMatchCreateBuilder() {
      return getMatchCreateFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * A client to server request to create a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchCreate match_create = 13 [json_name = "matchCreate"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.MatchCreateOrBuilder getMatchCreateOrBuilder() {
      if ((messageCase_ == 13) && (matchCreateBuilder_ != null)) {
        return matchCreateBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 13) {
          return (com.heroiclabs.nakama.rtapi.MatchCreate) message_;
        }
        return com.heroiclabs.nakama.rtapi.MatchCreate.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A client to server request to create a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchCreate match_create = 13 [json_name = "matchCreate"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.MatchCreate, com.heroiclabs.nakama.rtapi.MatchCreate.Builder, com.heroiclabs.nakama.rtapi.MatchCreateOrBuilder> 
        getMatchCreateFieldBuilder() {
      if (matchCreateBuilder_ == null) {
        if (!(messageCase_ == 13)) {
          message_ = com.heroiclabs.nakama.rtapi.MatchCreate.getDefaultInstance();
        }
        matchCreateBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.rtapi.MatchCreate, com.heroiclabs.nakama.rtapi.MatchCreate.Builder, com.heroiclabs.nakama.rtapi.MatchCreateOrBuilder>(
                (com.heroiclabs.nakama.rtapi.MatchCreate) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 13;
      onChanged();
      return matchCreateBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.MatchData, com.heroiclabs.nakama.rtapi.MatchData.Builder, com.heroiclabs.nakama.rtapi.MatchDataOrBuilder> matchDataBuilder_;
    /**
     * <pre>
     * Incoming realtime match data delivered from the server.
     * </pre>
     *
     * <code>.nakama.realtime.MatchData match_data = 14 [json_name = "matchData"];</code>
     * @return Whether the matchData field is set.
     */
    @java.lang.Override
    public boolean hasMatchData() {
      return messageCase_ == 14;
    }
    /**
     * <pre>
     * Incoming realtime match data delivered from the server.
     * </pre>
     *
     * <code>.nakama.realtime.MatchData match_data = 14 [json_name = "matchData"];</code>
     * @return The matchData.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.MatchData getMatchData() {
      if (matchDataBuilder_ == null) {
        if (messageCase_ == 14) {
          return (com.heroiclabs.nakama.rtapi.MatchData) message_;
        }
        return com.heroiclabs.nakama.rtapi.MatchData.getDefaultInstance();
      } else {
        if (messageCase_ == 14) {
          return matchDataBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.rtapi.MatchData.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Incoming realtime match data delivered from the server.
     * </pre>
     *
     * <code>.nakama.realtime.MatchData match_data = 14 [json_name = "matchData"];</code>
     */
    public Builder setMatchData(com.heroiclabs.nakama.rtapi.MatchData value) {
      if (matchDataBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        matchDataBuilder_.setMessage(value);
      }
      messageCase_ = 14;
      return this;
    }
    /**
     * <pre>
     * Incoming realtime match data delivered from the server.
     * </pre>
     *
     * <code>.nakama.realtime.MatchData match_data = 14 [json_name = "matchData"];</code>
     */
    public Builder setMatchData(
        com.heroiclabs.nakama.rtapi.MatchData.Builder builderForValue) {
      if (matchDataBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        matchDataBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 14;
      return this;
    }
    /**
     * <pre>
     * Incoming realtime match data delivered from the server.
     * </pre>
     *
     * <code>.nakama.realtime.MatchData match_data = 14 [json_name = "matchData"];</code>
     */
    public Builder mergeMatchData(com.heroiclabs.nakama.rtapi.MatchData value) {
      if (matchDataBuilder_ == null) {
        if (messageCase_ == 14 &&
            message_ != com.heroiclabs.nakama.rtapi.MatchData.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.rtapi.MatchData.newBuilder((com.heroiclabs.nakama.rtapi.MatchData) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 14) {
          matchDataBuilder_.mergeFrom(value);
        } else {
          matchDataBuilder_.setMessage(value);
        }
      }
      messageCase_ = 14;
      return this;
    }
    /**
     * <pre>
     * Incoming realtime match data delivered from the server.
     * </pre>
     *
     * <code>.nakama.realtime.MatchData match_data = 14 [json_name = "matchData"];</code>
     */
    public Builder clearMatchData() {
      if (matchDataBuilder_ == null) {
        if (messageCase_ == 14) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 14) {
          messageCase_ = 0;
          message_ = null;
        }
        matchDataBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Incoming realtime match data delivered from the server.
     * </pre>
     *
     * <code>.nakama.realtime.MatchData match_data = 14 [json_name = "matchData"];</code>
     */
    public com.heroiclabs.nakama.rtapi.MatchData.Builder getMatchDataBuilder() {
      return getMatchDataFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Incoming realtime match data delivered from the server.
     * </pre>
     *
     * <code>.nakama.realtime.MatchData match_data = 14 [json_name = "matchData"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.MatchDataOrBuilder getMatchDataOrBuilder() {
      if ((messageCase_ == 14) && (matchDataBuilder_ != null)) {
        return matchDataBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 14) {
          return (com.heroiclabs.nakama.rtapi.MatchData) message_;
        }
        return com.heroiclabs.nakama.rtapi.MatchData.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Incoming realtime match data delivered from the server.
     * </pre>
     *
     * <code>.nakama.realtime.MatchData match_data = 14 [json_name = "matchData"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.MatchData, com.heroiclabs.nakama.rtapi.MatchData.Builder, com.heroiclabs.nakama.rtapi.MatchDataOrBuilder> 
        getMatchDataFieldBuilder() {
      if (matchDataBuilder_ == null) {
        if (!(messageCase_ == 14)) {
          message_ = com.heroiclabs.nakama.rtapi.MatchData.getDefaultInstance();
        }
        matchDataBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.rtapi.MatchData, com.heroiclabs.nakama.rtapi.MatchData.Builder, com.heroiclabs.nakama.rtapi.MatchDataOrBuilder>(
                (com.heroiclabs.nakama.rtapi.MatchData) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 14;
      onChanged();
      return matchDataBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.MatchDataSend, com.heroiclabs.nakama.rtapi.MatchDataSend.Builder, com.heroiclabs.nakama.rtapi.MatchDataSendOrBuilder> matchDataSendBuilder_;
    /**
     * <pre>
     * A client to server request to send data to a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchDataSend match_data_send = 15 [json_name = "matchDataSend"];</code>
     * @return Whether the matchDataSend field is set.
     */
    @java.lang.Override
    public boolean hasMatchDataSend() {
      return messageCase_ == 15;
    }
    /**
     * <pre>
     * A client to server request to send data to a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchDataSend match_data_send = 15 [json_name = "matchDataSend"];</code>
     * @return The matchDataSend.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.MatchDataSend getMatchDataSend() {
      if (matchDataSendBuilder_ == null) {
        if (messageCase_ == 15) {
          return (com.heroiclabs.nakama.rtapi.MatchDataSend) message_;
        }
        return com.heroiclabs.nakama.rtapi.MatchDataSend.getDefaultInstance();
      } else {
        if (messageCase_ == 15) {
          return matchDataSendBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.rtapi.MatchDataSend.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A client to server request to send data to a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchDataSend match_data_send = 15 [json_name = "matchDataSend"];</code>
     */
    public Builder setMatchDataSend(com.heroiclabs.nakama.rtapi.MatchDataSend value) {
      if (matchDataSendBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        matchDataSendBuilder_.setMessage(value);
      }
      messageCase_ = 15;
      return this;
    }
    /**
     * <pre>
     * A client to server request to send data to a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchDataSend match_data_send = 15 [json_name = "matchDataSend"];</code>
     */
    public Builder setMatchDataSend(
        com.heroiclabs.nakama.rtapi.MatchDataSend.Builder builderForValue) {
      if (matchDataSendBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        matchDataSendBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 15;
      return this;
    }
    /**
     * <pre>
     * A client to server request to send data to a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchDataSend match_data_send = 15 [json_name = "matchDataSend"];</code>
     */
    public Builder mergeMatchDataSend(com.heroiclabs.nakama.rtapi.MatchDataSend value) {
      if (matchDataSendBuilder_ == null) {
        if (messageCase_ == 15 &&
            message_ != com.heroiclabs.nakama.rtapi.MatchDataSend.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.rtapi.MatchDataSend.newBuilder((com.heroiclabs.nakama.rtapi.MatchDataSend) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 15) {
          matchDataSendBuilder_.mergeFrom(value);
        } else {
          matchDataSendBuilder_.setMessage(value);
        }
      }
      messageCase_ = 15;
      return this;
    }
    /**
     * <pre>
     * A client to server request to send data to a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchDataSend match_data_send = 15 [json_name = "matchDataSend"];</code>
     */
    public Builder clearMatchDataSend() {
      if (matchDataSendBuilder_ == null) {
        if (messageCase_ == 15) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 15) {
          messageCase_ = 0;
          message_ = null;
        }
        matchDataSendBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * A client to server request to send data to a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchDataSend match_data_send = 15 [json_name = "matchDataSend"];</code>
     */
    public com.heroiclabs.nakama.rtapi.MatchDataSend.Builder getMatchDataSendBuilder() {
      return getMatchDataSendFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * A client to server request to send data to a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchDataSend match_data_send = 15 [json_name = "matchDataSend"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.MatchDataSendOrBuilder getMatchDataSendOrBuilder() {
      if ((messageCase_ == 15) && (matchDataSendBuilder_ != null)) {
        return matchDataSendBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 15) {
          return (com.heroiclabs.nakama.rtapi.MatchDataSend) message_;
        }
        return com.heroiclabs.nakama.rtapi.MatchDataSend.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A client to server request to send data to a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchDataSend match_data_send = 15 [json_name = "matchDataSend"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.MatchDataSend, com.heroiclabs.nakama.rtapi.MatchDataSend.Builder, com.heroiclabs.nakama.rtapi.MatchDataSendOrBuilder> 
        getMatchDataSendFieldBuilder() {
      if (matchDataSendBuilder_ == null) {
        if (!(messageCase_ == 15)) {
          message_ = com.heroiclabs.nakama.rtapi.MatchDataSend.getDefaultInstance();
        }
        matchDataSendBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.rtapi.MatchDataSend, com.heroiclabs.nakama.rtapi.MatchDataSend.Builder, com.heroiclabs.nakama.rtapi.MatchDataSendOrBuilder>(
                (com.heroiclabs.nakama.rtapi.MatchDataSend) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 15;
      onChanged();
      return matchDataSendBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.MatchJoin, com.heroiclabs.nakama.rtapi.MatchJoin.Builder, com.heroiclabs.nakama.rtapi.MatchJoinOrBuilder> matchJoinBuilder_;
    /**
     * <pre>
     * A client to server request to join a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchJoin match_join = 16 [json_name = "matchJoin"];</code>
     * @return Whether the matchJoin field is set.
     */
    @java.lang.Override
    public boolean hasMatchJoin() {
      return messageCase_ == 16;
    }
    /**
     * <pre>
     * A client to server request to join a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchJoin match_join = 16 [json_name = "matchJoin"];</code>
     * @return The matchJoin.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.MatchJoin getMatchJoin() {
      if (matchJoinBuilder_ == null) {
        if (messageCase_ == 16) {
          return (com.heroiclabs.nakama.rtapi.MatchJoin) message_;
        }
        return com.heroiclabs.nakama.rtapi.MatchJoin.getDefaultInstance();
      } else {
        if (messageCase_ == 16) {
          return matchJoinBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.rtapi.MatchJoin.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A client to server request to join a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchJoin match_join = 16 [json_name = "matchJoin"];</code>
     */
    public Builder setMatchJoin(com.heroiclabs.nakama.rtapi.MatchJoin value) {
      if (matchJoinBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        matchJoinBuilder_.setMessage(value);
      }
      messageCase_ = 16;
      return this;
    }
    /**
     * <pre>
     * A client to server request to join a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchJoin match_join = 16 [json_name = "matchJoin"];</code>
     */
    public Builder setMatchJoin(
        com.heroiclabs.nakama.rtapi.MatchJoin.Builder builderForValue) {
      if (matchJoinBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        matchJoinBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 16;
      return this;
    }
    /**
     * <pre>
     * A client to server request to join a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchJoin match_join = 16 [json_name = "matchJoin"];</code>
     */
    public Builder mergeMatchJoin(com.heroiclabs.nakama.rtapi.MatchJoin value) {
      if (matchJoinBuilder_ == null) {
        if (messageCase_ == 16 &&
            message_ != com.heroiclabs.nakama.rtapi.MatchJoin.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.rtapi.MatchJoin.newBuilder((com.heroiclabs.nakama.rtapi.MatchJoin) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 16) {
          matchJoinBuilder_.mergeFrom(value);
        } else {
          matchJoinBuilder_.setMessage(value);
        }
      }
      messageCase_ = 16;
      return this;
    }
    /**
     * <pre>
     * A client to server request to join a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchJoin match_join = 16 [json_name = "matchJoin"];</code>
     */
    public Builder clearMatchJoin() {
      if (matchJoinBuilder_ == null) {
        if (messageCase_ == 16) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 16) {
          messageCase_ = 0;
          message_ = null;
        }
        matchJoinBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * A client to server request to join a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchJoin match_join = 16 [json_name = "matchJoin"];</code>
     */
    public com.heroiclabs.nakama.rtapi.MatchJoin.Builder getMatchJoinBuilder() {
      return getMatchJoinFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * A client to server request to join a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchJoin match_join = 16 [json_name = "matchJoin"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.MatchJoinOrBuilder getMatchJoinOrBuilder() {
      if ((messageCase_ == 16) && (matchJoinBuilder_ != null)) {
        return matchJoinBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 16) {
          return (com.heroiclabs.nakama.rtapi.MatchJoin) message_;
        }
        return com.heroiclabs.nakama.rtapi.MatchJoin.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A client to server request to join a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchJoin match_join = 16 [json_name = "matchJoin"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.MatchJoin, com.heroiclabs.nakama.rtapi.MatchJoin.Builder, com.heroiclabs.nakama.rtapi.MatchJoinOrBuilder> 
        getMatchJoinFieldBuilder() {
      if (matchJoinBuilder_ == null) {
        if (!(messageCase_ == 16)) {
          message_ = com.heroiclabs.nakama.rtapi.MatchJoin.getDefaultInstance();
        }
        matchJoinBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.rtapi.MatchJoin, com.heroiclabs.nakama.rtapi.MatchJoin.Builder, com.heroiclabs.nakama.rtapi.MatchJoinOrBuilder>(
                (com.heroiclabs.nakama.rtapi.MatchJoin) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 16;
      onChanged();
      return matchJoinBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.MatchLeave, com.heroiclabs.nakama.rtapi.MatchLeave.Builder, com.heroiclabs.nakama.rtapi.MatchLeaveOrBuilder> matchLeaveBuilder_;
    /**
     * <pre>
     * A client to server request to leave a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchLeave match_leave = 17 [json_name = "matchLeave"];</code>
     * @return Whether the matchLeave field is set.
     */
    @java.lang.Override
    public boolean hasMatchLeave() {
      return messageCase_ == 17;
    }
    /**
     * <pre>
     * A client to server request to leave a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchLeave match_leave = 17 [json_name = "matchLeave"];</code>
     * @return The matchLeave.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.MatchLeave getMatchLeave() {
      if (matchLeaveBuilder_ == null) {
        if (messageCase_ == 17) {
          return (com.heroiclabs.nakama.rtapi.MatchLeave) message_;
        }
        return com.heroiclabs.nakama.rtapi.MatchLeave.getDefaultInstance();
      } else {
        if (messageCase_ == 17) {
          return matchLeaveBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.rtapi.MatchLeave.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A client to server request to leave a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchLeave match_leave = 17 [json_name = "matchLeave"];</code>
     */
    public Builder setMatchLeave(com.heroiclabs.nakama.rtapi.MatchLeave value) {
      if (matchLeaveBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        matchLeaveBuilder_.setMessage(value);
      }
      messageCase_ = 17;
      return this;
    }
    /**
     * <pre>
     * A client to server request to leave a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchLeave match_leave = 17 [json_name = "matchLeave"];</code>
     */
    public Builder setMatchLeave(
        com.heroiclabs.nakama.rtapi.MatchLeave.Builder builderForValue) {
      if (matchLeaveBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        matchLeaveBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 17;
      return this;
    }
    /**
     * <pre>
     * A client to server request to leave a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchLeave match_leave = 17 [json_name = "matchLeave"];</code>
     */
    public Builder mergeMatchLeave(com.heroiclabs.nakama.rtapi.MatchLeave value) {
      if (matchLeaveBuilder_ == null) {
        if (messageCase_ == 17 &&
            message_ != com.heroiclabs.nakama.rtapi.MatchLeave.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.rtapi.MatchLeave.newBuilder((com.heroiclabs.nakama.rtapi.MatchLeave) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 17) {
          matchLeaveBuilder_.mergeFrom(value);
        } else {
          matchLeaveBuilder_.setMessage(value);
        }
      }
      messageCase_ = 17;
      return this;
    }
    /**
     * <pre>
     * A client to server request to leave a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchLeave match_leave = 17 [json_name = "matchLeave"];</code>
     */
    public Builder clearMatchLeave() {
      if (matchLeaveBuilder_ == null) {
        if (messageCase_ == 17) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 17) {
          messageCase_ = 0;
          message_ = null;
        }
        matchLeaveBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * A client to server request to leave a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchLeave match_leave = 17 [json_name = "matchLeave"];</code>
     */
    public com.heroiclabs.nakama.rtapi.MatchLeave.Builder getMatchLeaveBuilder() {
      return getMatchLeaveFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * A client to server request to leave a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchLeave match_leave = 17 [json_name = "matchLeave"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.MatchLeaveOrBuilder getMatchLeaveOrBuilder() {
      if ((messageCase_ == 17) && (matchLeaveBuilder_ != null)) {
        return matchLeaveBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 17) {
          return (com.heroiclabs.nakama.rtapi.MatchLeave) message_;
        }
        return com.heroiclabs.nakama.rtapi.MatchLeave.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A client to server request to leave a realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchLeave match_leave = 17 [json_name = "matchLeave"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.MatchLeave, com.heroiclabs.nakama.rtapi.MatchLeave.Builder, com.heroiclabs.nakama.rtapi.MatchLeaveOrBuilder> 
        getMatchLeaveFieldBuilder() {
      if (matchLeaveBuilder_ == null) {
        if (!(messageCase_ == 17)) {
          message_ = com.heroiclabs.nakama.rtapi.MatchLeave.getDefaultInstance();
        }
        matchLeaveBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.rtapi.MatchLeave, com.heroiclabs.nakama.rtapi.MatchLeave.Builder, com.heroiclabs.nakama.rtapi.MatchLeaveOrBuilder>(
                (com.heroiclabs.nakama.rtapi.MatchLeave) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 17;
      onChanged();
      return matchLeaveBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.MatchPresenceEvent, com.heroiclabs.nakama.rtapi.MatchPresenceEvent.Builder, com.heroiclabs.nakama.rtapi.MatchPresenceEventOrBuilder> matchPresenceEventBuilder_;
    /**
     * <pre>
     * Presence update for a particular realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchPresenceEvent match_presence_event = 18 [json_name = "matchPresenceEvent"];</code>
     * @return Whether the matchPresenceEvent field is set.
     */
    @java.lang.Override
    public boolean hasMatchPresenceEvent() {
      return messageCase_ == 18;
    }
    /**
     * <pre>
     * Presence update for a particular realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchPresenceEvent match_presence_event = 18 [json_name = "matchPresenceEvent"];</code>
     * @return The matchPresenceEvent.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.MatchPresenceEvent getMatchPresenceEvent() {
      if (matchPresenceEventBuilder_ == null) {
        if (messageCase_ == 18) {
          return (com.heroiclabs.nakama.rtapi.MatchPresenceEvent) message_;
        }
        return com.heroiclabs.nakama.rtapi.MatchPresenceEvent.getDefaultInstance();
      } else {
        if (messageCase_ == 18) {
          return matchPresenceEventBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.rtapi.MatchPresenceEvent.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Presence update for a particular realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchPresenceEvent match_presence_event = 18 [json_name = "matchPresenceEvent"];</code>
     */
    public Builder setMatchPresenceEvent(com.heroiclabs.nakama.rtapi.MatchPresenceEvent value) {
      if (matchPresenceEventBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        matchPresenceEventBuilder_.setMessage(value);
      }
      messageCase_ = 18;
      return this;
    }
    /**
     * <pre>
     * Presence update for a particular realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchPresenceEvent match_presence_event = 18 [json_name = "matchPresenceEvent"];</code>
     */
    public Builder setMatchPresenceEvent(
        com.heroiclabs.nakama.rtapi.MatchPresenceEvent.Builder builderForValue) {
      if (matchPresenceEventBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        matchPresenceEventBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 18;
      return this;
    }
    /**
     * <pre>
     * Presence update for a particular realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchPresenceEvent match_presence_event = 18 [json_name = "matchPresenceEvent"];</code>
     */
    public Builder mergeMatchPresenceEvent(com.heroiclabs.nakama.rtapi.MatchPresenceEvent value) {
      if (matchPresenceEventBuilder_ == null) {
        if (messageCase_ == 18 &&
            message_ != com.heroiclabs.nakama.rtapi.MatchPresenceEvent.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.rtapi.MatchPresenceEvent.newBuilder((com.heroiclabs.nakama.rtapi.MatchPresenceEvent) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 18) {
          matchPresenceEventBuilder_.mergeFrom(value);
        } else {
          matchPresenceEventBuilder_.setMessage(value);
        }
      }
      messageCase_ = 18;
      return this;
    }
    /**
     * <pre>
     * Presence update for a particular realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchPresenceEvent match_presence_event = 18 [json_name = "matchPresenceEvent"];</code>
     */
    public Builder clearMatchPresenceEvent() {
      if (matchPresenceEventBuilder_ == null) {
        if (messageCase_ == 18) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 18) {
          messageCase_ = 0;
          message_ = null;
        }
        matchPresenceEventBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Presence update for a particular realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchPresenceEvent match_presence_event = 18 [json_name = "matchPresenceEvent"];</code>
     */
    public com.heroiclabs.nakama.rtapi.MatchPresenceEvent.Builder getMatchPresenceEventBuilder() {
      return getMatchPresenceEventFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Presence update for a particular realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchPresenceEvent match_presence_event = 18 [json_name = "matchPresenceEvent"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.MatchPresenceEventOrBuilder getMatchPresenceEventOrBuilder() {
      if ((messageCase_ == 18) && (matchPresenceEventBuilder_ != null)) {
        return matchPresenceEventBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 18) {
          return (com.heroiclabs.nakama.rtapi.MatchPresenceEvent) message_;
        }
        return com.heroiclabs.nakama.rtapi.MatchPresenceEvent.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Presence update for a particular realtime match.
     * </pre>
     *
     * <code>.nakama.realtime.MatchPresenceEvent match_presence_event = 18 [json_name = "matchPresenceEvent"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.MatchPresenceEvent, com.heroiclabs.nakama.rtapi.MatchPresenceEvent.Builder, com.heroiclabs.nakama.rtapi.MatchPresenceEventOrBuilder> 
        getMatchPresenceEventFieldBuilder() {
      if (matchPresenceEventBuilder_ == null) {
        if (!(messageCase_ == 18)) {
          message_ = com.heroiclabs.nakama.rtapi.MatchPresenceEvent.getDefaultInstance();
        }
        matchPresenceEventBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.rtapi.MatchPresenceEvent, com.heroiclabs.nakama.rtapi.MatchPresenceEvent.Builder, com.heroiclabs.nakama.rtapi.MatchPresenceEventOrBuilder>(
                (com.heroiclabs.nakama.rtapi.MatchPresenceEvent) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 18;
      onChanged();
      return matchPresenceEventBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.MatchmakerAdd, com.heroiclabs.nakama.rtapi.MatchmakerAdd.Builder, com.heroiclabs.nakama.rtapi.MatchmakerAddOrBuilder> matchmakerAddBuilder_;
    /**
     * <pre>
     * Submit a new matchmaking process request.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerAdd matchmaker_add = 19 [json_name = "matchmakerAdd"];</code>
     * @return Whether the matchmakerAdd field is set.
     */
    @java.lang.Override
    public boolean hasMatchmakerAdd() {
      return messageCase_ == 19;
    }
    /**
     * <pre>
     * Submit a new matchmaking process request.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerAdd matchmaker_add = 19 [json_name = "matchmakerAdd"];</code>
     * @return The matchmakerAdd.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.MatchmakerAdd getMatchmakerAdd() {
      if (matchmakerAddBuilder_ == null) {
        if (messageCase_ == 19) {
          return (com.heroiclabs.nakama.rtapi.MatchmakerAdd) message_;
        }
        return com.heroiclabs.nakama.rtapi.MatchmakerAdd.getDefaultInstance();
      } else {
        if (messageCase_ == 19) {
          return matchmakerAddBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.rtapi.MatchmakerAdd.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Submit a new matchmaking process request.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerAdd matchmaker_add = 19 [json_name = "matchmakerAdd"];</code>
     */
    public Builder setMatchmakerAdd(com.heroiclabs.nakama.rtapi.MatchmakerAdd value) {
      if (matchmakerAddBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        matchmakerAddBuilder_.setMessage(value);
      }
      messageCase_ = 19;
      return this;
    }
    /**
     * <pre>
     * Submit a new matchmaking process request.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerAdd matchmaker_add = 19 [json_name = "matchmakerAdd"];</code>
     */
    public Builder setMatchmakerAdd(
        com.heroiclabs.nakama.rtapi.MatchmakerAdd.Builder builderForValue) {
      if (matchmakerAddBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        matchmakerAddBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 19;
      return this;
    }
    /**
     * <pre>
     * Submit a new matchmaking process request.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerAdd matchmaker_add = 19 [json_name = "matchmakerAdd"];</code>
     */
    public Builder mergeMatchmakerAdd(com.heroiclabs.nakama.rtapi.MatchmakerAdd value) {
      if (matchmakerAddBuilder_ == null) {
        if (messageCase_ == 19 &&
            message_ != com.heroiclabs.nakama.rtapi.MatchmakerAdd.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.rtapi.MatchmakerAdd.newBuilder((com.heroiclabs.nakama.rtapi.MatchmakerAdd) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 19) {
          matchmakerAddBuilder_.mergeFrom(value);
        } else {
          matchmakerAddBuilder_.setMessage(value);
        }
      }
      messageCase_ = 19;
      return this;
    }
    /**
     * <pre>
     * Submit a new matchmaking process request.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerAdd matchmaker_add = 19 [json_name = "matchmakerAdd"];</code>
     */
    public Builder clearMatchmakerAdd() {
      if (matchmakerAddBuilder_ == null) {
        if (messageCase_ == 19) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 19) {
          messageCase_ = 0;
          message_ = null;
        }
        matchmakerAddBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Submit a new matchmaking process request.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerAdd matchmaker_add = 19 [json_name = "matchmakerAdd"];</code>
     */
    public com.heroiclabs.nakama.rtapi.MatchmakerAdd.Builder getMatchmakerAddBuilder() {
      return getMatchmakerAddFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Submit a new matchmaking process request.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerAdd matchmaker_add = 19 [json_name = "matchmakerAdd"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.MatchmakerAddOrBuilder getMatchmakerAddOrBuilder() {
      if ((messageCase_ == 19) && (matchmakerAddBuilder_ != null)) {
        return matchmakerAddBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 19) {
          return (com.heroiclabs.nakama.rtapi.MatchmakerAdd) message_;
        }
        return com.heroiclabs.nakama.rtapi.MatchmakerAdd.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Submit a new matchmaking process request.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerAdd matchmaker_add = 19 [json_name = "matchmakerAdd"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.MatchmakerAdd, com.heroiclabs.nakama.rtapi.MatchmakerAdd.Builder, com.heroiclabs.nakama.rtapi.MatchmakerAddOrBuilder> 
        getMatchmakerAddFieldBuilder() {
      if (matchmakerAddBuilder_ == null) {
        if (!(messageCase_ == 19)) {
          message_ = com.heroiclabs.nakama.rtapi.MatchmakerAdd.getDefaultInstance();
        }
        matchmakerAddBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.rtapi.MatchmakerAdd, com.heroiclabs.nakama.rtapi.MatchmakerAdd.Builder, com.heroiclabs.nakama.rtapi.MatchmakerAddOrBuilder>(
                (com.heroiclabs.nakama.rtapi.MatchmakerAdd) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 19;
      onChanged();
      return matchmakerAddBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.MatchmakerMatched, com.heroiclabs.nakama.rtapi.MatchmakerMatched.Builder, com.heroiclabs.nakama.rtapi.MatchmakerMatchedOrBuilder> matchmakerMatchedBuilder_;
    /**
     * <pre>
     * A successful matchmaking result.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerMatched matchmaker_matched = 20 [json_name = "matchmakerMatched"];</code>
     * @return Whether the matchmakerMatched field is set.
     */
    @java.lang.Override
    public boolean hasMatchmakerMatched() {
      return messageCase_ == 20;
    }
    /**
     * <pre>
     * A successful matchmaking result.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerMatched matchmaker_matched = 20 [json_name = "matchmakerMatched"];</code>
     * @return The matchmakerMatched.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.MatchmakerMatched getMatchmakerMatched() {
      if (matchmakerMatchedBuilder_ == null) {
        if (messageCase_ == 20) {
          return (com.heroiclabs.nakama.rtapi.MatchmakerMatched) message_;
        }
        return com.heroiclabs.nakama.rtapi.MatchmakerMatched.getDefaultInstance();
      } else {
        if (messageCase_ == 20) {
          return matchmakerMatchedBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.rtapi.MatchmakerMatched.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A successful matchmaking result.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerMatched matchmaker_matched = 20 [json_name = "matchmakerMatched"];</code>
     */
    public Builder setMatchmakerMatched(com.heroiclabs.nakama.rtapi.MatchmakerMatched value) {
      if (matchmakerMatchedBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        matchmakerMatchedBuilder_.setMessage(value);
      }
      messageCase_ = 20;
      return this;
    }
    /**
     * <pre>
     * A successful matchmaking result.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerMatched matchmaker_matched = 20 [json_name = "matchmakerMatched"];</code>
     */
    public Builder setMatchmakerMatched(
        com.heroiclabs.nakama.rtapi.MatchmakerMatched.Builder builderForValue) {
      if (matchmakerMatchedBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        matchmakerMatchedBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 20;
      return this;
    }
    /**
     * <pre>
     * A successful matchmaking result.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerMatched matchmaker_matched = 20 [json_name = "matchmakerMatched"];</code>
     */
    public Builder mergeMatchmakerMatched(com.heroiclabs.nakama.rtapi.MatchmakerMatched value) {
      if (matchmakerMatchedBuilder_ == null) {
        if (messageCase_ == 20 &&
            message_ != com.heroiclabs.nakama.rtapi.MatchmakerMatched.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.rtapi.MatchmakerMatched.newBuilder((com.heroiclabs.nakama.rtapi.MatchmakerMatched) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 20) {
          matchmakerMatchedBuilder_.mergeFrom(value);
        } else {
          matchmakerMatchedBuilder_.setMessage(value);
        }
      }
      messageCase_ = 20;
      return this;
    }
    /**
     * <pre>
     * A successful matchmaking result.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerMatched matchmaker_matched = 20 [json_name = "matchmakerMatched"];</code>
     */
    public Builder clearMatchmakerMatched() {
      if (matchmakerMatchedBuilder_ == null) {
        if (messageCase_ == 20) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 20) {
          messageCase_ = 0;
          message_ = null;
        }
        matchmakerMatchedBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * A successful matchmaking result.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerMatched matchmaker_matched = 20 [json_name = "matchmakerMatched"];</code>
     */
    public com.heroiclabs.nakama.rtapi.MatchmakerMatched.Builder getMatchmakerMatchedBuilder() {
      return getMatchmakerMatchedFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * A successful matchmaking result.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerMatched matchmaker_matched = 20 [json_name = "matchmakerMatched"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.MatchmakerMatchedOrBuilder getMatchmakerMatchedOrBuilder() {
      if ((messageCase_ == 20) && (matchmakerMatchedBuilder_ != null)) {
        return matchmakerMatchedBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 20) {
          return (com.heroiclabs.nakama.rtapi.MatchmakerMatched) message_;
        }
        return com.heroiclabs.nakama.rtapi.MatchmakerMatched.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A successful matchmaking result.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerMatched matchmaker_matched = 20 [json_name = "matchmakerMatched"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.MatchmakerMatched, com.heroiclabs.nakama.rtapi.MatchmakerMatched.Builder, com.heroiclabs.nakama.rtapi.MatchmakerMatchedOrBuilder> 
        getMatchmakerMatchedFieldBuilder() {
      if (matchmakerMatchedBuilder_ == null) {
        if (!(messageCase_ == 20)) {
          message_ = com.heroiclabs.nakama.rtapi.MatchmakerMatched.getDefaultInstance();
        }
        matchmakerMatchedBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.rtapi.MatchmakerMatched, com.heroiclabs.nakama.rtapi.MatchmakerMatched.Builder, com.heroiclabs.nakama.rtapi.MatchmakerMatchedOrBuilder>(
                (com.heroiclabs.nakama.rtapi.MatchmakerMatched) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 20;
      onChanged();
      return matchmakerMatchedBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.MatchmakerRemove, com.heroiclabs.nakama.rtapi.MatchmakerRemove.Builder, com.heroiclabs.nakama.rtapi.MatchmakerRemoveOrBuilder> matchmakerRemoveBuilder_;
    /**
     * <pre>
     * Cancel a matchmaking process using a ticket.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerRemove matchmaker_remove = 21 [json_name = "matchmakerRemove"];</code>
     * @return Whether the matchmakerRemove field is set.
     */
    @java.lang.Override
    public boolean hasMatchmakerRemove() {
      return messageCase_ == 21;
    }
    /**
     * <pre>
     * Cancel a matchmaking process using a ticket.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerRemove matchmaker_remove = 21 [json_name = "matchmakerRemove"];</code>
     * @return The matchmakerRemove.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.MatchmakerRemove getMatchmakerRemove() {
      if (matchmakerRemoveBuilder_ == null) {
        if (messageCase_ == 21) {
          return (com.heroiclabs.nakama.rtapi.MatchmakerRemove) message_;
        }
        return com.heroiclabs.nakama.rtapi.MatchmakerRemove.getDefaultInstance();
      } else {
        if (messageCase_ == 21) {
          return matchmakerRemoveBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.rtapi.MatchmakerRemove.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Cancel a matchmaking process using a ticket.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerRemove matchmaker_remove = 21 [json_name = "matchmakerRemove"];</code>
     */
    public Builder setMatchmakerRemove(com.heroiclabs.nakama.rtapi.MatchmakerRemove value) {
      if (matchmakerRemoveBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        matchmakerRemoveBuilder_.setMessage(value);
      }
      messageCase_ = 21;
      return this;
    }
    /**
     * <pre>
     * Cancel a matchmaking process using a ticket.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerRemove matchmaker_remove = 21 [json_name = "matchmakerRemove"];</code>
     */
    public Builder setMatchmakerRemove(
        com.heroiclabs.nakama.rtapi.MatchmakerRemove.Builder builderForValue) {
      if (matchmakerRemoveBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        matchmakerRemoveBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 21;
      return this;
    }
    /**
     * <pre>
     * Cancel a matchmaking process using a ticket.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerRemove matchmaker_remove = 21 [json_name = "matchmakerRemove"];</code>
     */
    public Builder mergeMatchmakerRemove(com.heroiclabs.nakama.rtapi.MatchmakerRemove value) {
      if (matchmakerRemoveBuilder_ == null) {
        if (messageCase_ == 21 &&
            message_ != com.heroiclabs.nakama.rtapi.MatchmakerRemove.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.rtapi.MatchmakerRemove.newBuilder((com.heroiclabs.nakama.rtapi.MatchmakerRemove) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 21) {
          matchmakerRemoveBuilder_.mergeFrom(value);
        } else {
          matchmakerRemoveBuilder_.setMessage(value);
        }
      }
      messageCase_ = 21;
      return this;
    }
    /**
     * <pre>
     * Cancel a matchmaking process using a ticket.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerRemove matchmaker_remove = 21 [json_name = "matchmakerRemove"];</code>
     */
    public Builder clearMatchmakerRemove() {
      if (matchmakerRemoveBuilder_ == null) {
        if (messageCase_ == 21) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 21) {
          messageCase_ = 0;
          message_ = null;
        }
        matchmakerRemoveBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Cancel a matchmaking process using a ticket.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerRemove matchmaker_remove = 21 [json_name = "matchmakerRemove"];</code>
     */
    public com.heroiclabs.nakama.rtapi.MatchmakerRemove.Builder getMatchmakerRemoveBuilder() {
      return getMatchmakerRemoveFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Cancel a matchmaking process using a ticket.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerRemove matchmaker_remove = 21 [json_name = "matchmakerRemove"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.MatchmakerRemoveOrBuilder getMatchmakerRemoveOrBuilder() {
      if ((messageCase_ == 21) && (matchmakerRemoveBuilder_ != null)) {
        return matchmakerRemoveBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 21) {
          return (com.heroiclabs.nakama.rtapi.MatchmakerRemove) message_;
        }
        return com.heroiclabs.nakama.rtapi.MatchmakerRemove.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Cancel a matchmaking process using a ticket.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerRemove matchmaker_remove = 21 [json_name = "matchmakerRemove"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.MatchmakerRemove, com.heroiclabs.nakama.rtapi.MatchmakerRemove.Builder, com.heroiclabs.nakama.rtapi.MatchmakerRemoveOrBuilder> 
        getMatchmakerRemoveFieldBuilder() {
      if (matchmakerRemoveBuilder_ == null) {
        if (!(messageCase_ == 21)) {
          message_ = com.heroiclabs.nakama.rtapi.MatchmakerRemove.getDefaultInstance();
        }
        matchmakerRemoveBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.rtapi.MatchmakerRemove, com.heroiclabs.nakama.rtapi.MatchmakerRemove.Builder, com.heroiclabs.nakama.rtapi.MatchmakerRemoveOrBuilder>(
                (com.heroiclabs.nakama.rtapi.MatchmakerRemove) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 21;
      onChanged();
      return matchmakerRemoveBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.MatchmakerTicket, com.heroiclabs.nakama.rtapi.MatchmakerTicket.Builder, com.heroiclabs.nakama.rtapi.MatchmakerTicketOrBuilder> matchmakerTicketBuilder_;
    /**
     * <pre>
     * A response from starting a new matchmaking process.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerTicket matchmaker_ticket = 22 [json_name = "matchmakerTicket"];</code>
     * @return Whether the matchmakerTicket field is set.
     */
    @java.lang.Override
    public boolean hasMatchmakerTicket() {
      return messageCase_ == 22;
    }
    /**
     * <pre>
     * A response from starting a new matchmaking process.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerTicket matchmaker_ticket = 22 [json_name = "matchmakerTicket"];</code>
     * @return The matchmakerTicket.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.MatchmakerTicket getMatchmakerTicket() {
      if (matchmakerTicketBuilder_ == null) {
        if (messageCase_ == 22) {
          return (com.heroiclabs.nakama.rtapi.MatchmakerTicket) message_;
        }
        return com.heroiclabs.nakama.rtapi.MatchmakerTicket.getDefaultInstance();
      } else {
        if (messageCase_ == 22) {
          return matchmakerTicketBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.rtapi.MatchmakerTicket.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A response from starting a new matchmaking process.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerTicket matchmaker_ticket = 22 [json_name = "matchmakerTicket"];</code>
     */
    public Builder setMatchmakerTicket(com.heroiclabs.nakama.rtapi.MatchmakerTicket value) {
      if (matchmakerTicketBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        matchmakerTicketBuilder_.setMessage(value);
      }
      messageCase_ = 22;
      return this;
    }
    /**
     * <pre>
     * A response from starting a new matchmaking process.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerTicket matchmaker_ticket = 22 [json_name = "matchmakerTicket"];</code>
     */
    public Builder setMatchmakerTicket(
        com.heroiclabs.nakama.rtapi.MatchmakerTicket.Builder builderForValue) {
      if (matchmakerTicketBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        matchmakerTicketBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 22;
      return this;
    }
    /**
     * <pre>
     * A response from starting a new matchmaking process.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerTicket matchmaker_ticket = 22 [json_name = "matchmakerTicket"];</code>
     */
    public Builder mergeMatchmakerTicket(com.heroiclabs.nakama.rtapi.MatchmakerTicket value) {
      if (matchmakerTicketBuilder_ == null) {
        if (messageCase_ == 22 &&
            message_ != com.heroiclabs.nakama.rtapi.MatchmakerTicket.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.rtapi.MatchmakerTicket.newBuilder((com.heroiclabs.nakama.rtapi.MatchmakerTicket) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 22) {
          matchmakerTicketBuilder_.mergeFrom(value);
        } else {
          matchmakerTicketBuilder_.setMessage(value);
        }
      }
      messageCase_ = 22;
      return this;
    }
    /**
     * <pre>
     * A response from starting a new matchmaking process.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerTicket matchmaker_ticket = 22 [json_name = "matchmakerTicket"];</code>
     */
    public Builder clearMatchmakerTicket() {
      if (matchmakerTicketBuilder_ == null) {
        if (messageCase_ == 22) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 22) {
          messageCase_ = 0;
          message_ = null;
        }
        matchmakerTicketBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * A response from starting a new matchmaking process.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerTicket matchmaker_ticket = 22 [json_name = "matchmakerTicket"];</code>
     */
    public com.heroiclabs.nakama.rtapi.MatchmakerTicket.Builder getMatchmakerTicketBuilder() {
      return getMatchmakerTicketFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * A response from starting a new matchmaking process.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerTicket matchmaker_ticket = 22 [json_name = "matchmakerTicket"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.MatchmakerTicketOrBuilder getMatchmakerTicketOrBuilder() {
      if ((messageCase_ == 22) && (matchmakerTicketBuilder_ != null)) {
        return matchmakerTicketBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 22) {
          return (com.heroiclabs.nakama.rtapi.MatchmakerTicket) message_;
        }
        return com.heroiclabs.nakama.rtapi.MatchmakerTicket.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A response from starting a new matchmaking process.
     * </pre>
     *
     * <code>.nakama.realtime.MatchmakerTicket matchmaker_ticket = 22 [json_name = "matchmakerTicket"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.MatchmakerTicket, com.heroiclabs.nakama.rtapi.MatchmakerTicket.Builder, com.heroiclabs.nakama.rtapi.MatchmakerTicketOrBuilder> 
        getMatchmakerTicketFieldBuilder() {
      if (matchmakerTicketBuilder_ == null) {
        if (!(messageCase_ == 22)) {
          message_ = com.heroiclabs.nakama.rtapi.MatchmakerTicket.getDefaultInstance();
        }
        matchmakerTicketBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.rtapi.MatchmakerTicket, com.heroiclabs.nakama.rtapi.MatchmakerTicket.Builder, com.heroiclabs.nakama.rtapi.MatchmakerTicketOrBuilder>(
                (com.heroiclabs.nakama.rtapi.MatchmakerTicket) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 22;
      onChanged();
      return matchmakerTicketBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.Notifications, com.heroiclabs.nakama.rtapi.Notifications.Builder, com.heroiclabs.nakama.rtapi.NotificationsOrBuilder> notificationsBuilder_;
    /**
     * <pre>
     * Notifications send by the server.
     * </pre>
     *
     * <code>.nakama.realtime.Notifications notifications = 23 [json_name = "notifications"];</code>
     * @return Whether the notifications field is set.
     */
    @java.lang.Override
    public boolean hasNotifications() {
      return messageCase_ == 23;
    }
    /**
     * <pre>
     * Notifications send by the server.
     * </pre>
     *
     * <code>.nakama.realtime.Notifications notifications = 23 [json_name = "notifications"];</code>
     * @return The notifications.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.Notifications getNotifications() {
      if (notificationsBuilder_ == null) {
        if (messageCase_ == 23) {
          return (com.heroiclabs.nakama.rtapi.Notifications) message_;
        }
        return com.heroiclabs.nakama.rtapi.Notifications.getDefaultInstance();
      } else {
        if (messageCase_ == 23) {
          return notificationsBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.rtapi.Notifications.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Notifications send by the server.
     * </pre>
     *
     * <code>.nakama.realtime.Notifications notifications = 23 [json_name = "notifications"];</code>
     */
    public Builder setNotifications(com.heroiclabs.nakama.rtapi.Notifications value) {
      if (notificationsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        notificationsBuilder_.setMessage(value);
      }
      messageCase_ = 23;
      return this;
    }
    /**
     * <pre>
     * Notifications send by the server.
     * </pre>
     *
     * <code>.nakama.realtime.Notifications notifications = 23 [json_name = "notifications"];</code>
     */
    public Builder setNotifications(
        com.heroiclabs.nakama.rtapi.Notifications.Builder builderForValue) {
      if (notificationsBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        notificationsBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 23;
      return this;
    }
    /**
     * <pre>
     * Notifications send by the server.
     * </pre>
     *
     * <code>.nakama.realtime.Notifications notifications = 23 [json_name = "notifications"];</code>
     */
    public Builder mergeNotifications(com.heroiclabs.nakama.rtapi.Notifications value) {
      if (notificationsBuilder_ == null) {
        if (messageCase_ == 23 &&
            message_ != com.heroiclabs.nakama.rtapi.Notifications.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.rtapi.Notifications.newBuilder((com.heroiclabs.nakama.rtapi.Notifications) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 23) {
          notificationsBuilder_.mergeFrom(value);
        } else {
          notificationsBuilder_.setMessage(value);
        }
      }
      messageCase_ = 23;
      return this;
    }
    /**
     * <pre>
     * Notifications send by the server.
     * </pre>
     *
     * <code>.nakama.realtime.Notifications notifications = 23 [json_name = "notifications"];</code>
     */
    public Builder clearNotifications() {
      if (notificationsBuilder_ == null) {
        if (messageCase_ == 23) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 23) {
          messageCase_ = 0;
          message_ = null;
        }
        notificationsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Notifications send by the server.
     * </pre>
     *
     * <code>.nakama.realtime.Notifications notifications = 23 [json_name = "notifications"];</code>
     */
    public com.heroiclabs.nakama.rtapi.Notifications.Builder getNotificationsBuilder() {
      return getNotificationsFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Notifications send by the server.
     * </pre>
     *
     * <code>.nakama.realtime.Notifications notifications = 23 [json_name = "notifications"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.NotificationsOrBuilder getNotificationsOrBuilder() {
      if ((messageCase_ == 23) && (notificationsBuilder_ != null)) {
        return notificationsBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 23) {
          return (com.heroiclabs.nakama.rtapi.Notifications) message_;
        }
        return com.heroiclabs.nakama.rtapi.Notifications.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Notifications send by the server.
     * </pre>
     *
     * <code>.nakama.realtime.Notifications notifications = 23 [json_name = "notifications"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.Notifications, com.heroiclabs.nakama.rtapi.Notifications.Builder, com.heroiclabs.nakama.rtapi.NotificationsOrBuilder> 
        getNotificationsFieldBuilder() {
      if (notificationsBuilder_ == null) {
        if (!(messageCase_ == 23)) {
          message_ = com.heroiclabs.nakama.rtapi.Notifications.getDefaultInstance();
        }
        notificationsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.rtapi.Notifications, com.heroiclabs.nakama.rtapi.Notifications.Builder, com.heroiclabs.nakama.rtapi.NotificationsOrBuilder>(
                (com.heroiclabs.nakama.rtapi.Notifications) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 23;
      onChanged();
      return notificationsBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.api.Rpc, com.heroiclabs.nakama.api.Rpc.Builder, com.heroiclabs.nakama.api.RpcOrBuilder> rpcBuilder_;
    /**
     * <pre>
     * RPC call or response.
     * </pre>
     *
     * <code>.nakama.api.Rpc rpc = 24 [json_name = "rpc"];</code>
     * @return Whether the rpc field is set.
     */
    @java.lang.Override
    public boolean hasRpc() {
      return messageCase_ == 24;
    }
    /**
     * <pre>
     * RPC call or response.
     * </pre>
     *
     * <code>.nakama.api.Rpc rpc = 24 [json_name = "rpc"];</code>
     * @return The rpc.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.api.Rpc getRpc() {
      if (rpcBuilder_ == null) {
        if (messageCase_ == 24) {
          return (com.heroiclabs.nakama.api.Rpc) message_;
        }
        return com.heroiclabs.nakama.api.Rpc.getDefaultInstance();
      } else {
        if (messageCase_ == 24) {
          return rpcBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.api.Rpc.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * RPC call or response.
     * </pre>
     *
     * <code>.nakama.api.Rpc rpc = 24 [json_name = "rpc"];</code>
     */
    public Builder setRpc(com.heroiclabs.nakama.api.Rpc value) {
      if (rpcBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        rpcBuilder_.setMessage(value);
      }
      messageCase_ = 24;
      return this;
    }
    /**
     * <pre>
     * RPC call or response.
     * </pre>
     *
     * <code>.nakama.api.Rpc rpc = 24 [json_name = "rpc"];</code>
     */
    public Builder setRpc(
        com.heroiclabs.nakama.api.Rpc.Builder builderForValue) {
      if (rpcBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        rpcBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 24;
      return this;
    }
    /**
     * <pre>
     * RPC call or response.
     * </pre>
     *
     * <code>.nakama.api.Rpc rpc = 24 [json_name = "rpc"];</code>
     */
    public Builder mergeRpc(com.heroiclabs.nakama.api.Rpc value) {
      if (rpcBuilder_ == null) {
        if (messageCase_ == 24 &&
            message_ != com.heroiclabs.nakama.api.Rpc.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.api.Rpc.newBuilder((com.heroiclabs.nakama.api.Rpc) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 24) {
          rpcBuilder_.mergeFrom(value);
        } else {
          rpcBuilder_.setMessage(value);
        }
      }
      messageCase_ = 24;
      return this;
    }
    /**
     * <pre>
     * RPC call or response.
     * </pre>
     *
     * <code>.nakama.api.Rpc rpc = 24 [json_name = "rpc"];</code>
     */
    public Builder clearRpc() {
      if (rpcBuilder_ == null) {
        if (messageCase_ == 24) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 24) {
          messageCase_ = 0;
          message_ = null;
        }
        rpcBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * RPC call or response.
     * </pre>
     *
     * <code>.nakama.api.Rpc rpc = 24 [json_name = "rpc"];</code>
     */
    public com.heroiclabs.nakama.api.Rpc.Builder getRpcBuilder() {
      return getRpcFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * RPC call or response.
     * </pre>
     *
     * <code>.nakama.api.Rpc rpc = 24 [json_name = "rpc"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.api.RpcOrBuilder getRpcOrBuilder() {
      if ((messageCase_ == 24) && (rpcBuilder_ != null)) {
        return rpcBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 24) {
          return (com.heroiclabs.nakama.api.Rpc) message_;
        }
        return com.heroiclabs.nakama.api.Rpc.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * RPC call or response.
     * </pre>
     *
     * <code>.nakama.api.Rpc rpc = 24 [json_name = "rpc"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.api.Rpc, com.heroiclabs.nakama.api.Rpc.Builder, com.heroiclabs.nakama.api.RpcOrBuilder> 
        getRpcFieldBuilder() {
      if (rpcBuilder_ == null) {
        if (!(messageCase_ == 24)) {
          message_ = com.heroiclabs.nakama.api.Rpc.getDefaultInstance();
        }
        rpcBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.api.Rpc, com.heroiclabs.nakama.api.Rpc.Builder, com.heroiclabs.nakama.api.RpcOrBuilder>(
                (com.heroiclabs.nakama.api.Rpc) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 24;
      onChanged();
      return rpcBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.Status, com.heroiclabs.nakama.rtapi.Status.Builder, com.heroiclabs.nakama.rtapi.StatusOrBuilder> statusBuilder_;
    /**
     * <pre>
     * An incoming status snapshot for some set of users.
     * </pre>
     *
     * <code>.nakama.realtime.Status status = 25 [json_name = "status"];</code>
     * @return Whether the status field is set.
     */
    @java.lang.Override
    public boolean hasStatus() {
      return messageCase_ == 25;
    }
    /**
     * <pre>
     * An incoming status snapshot for some set of users.
     * </pre>
     *
     * <code>.nakama.realtime.Status status = 25 [json_name = "status"];</code>
     * @return The status.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.Status getStatus() {
      if (statusBuilder_ == null) {
        if (messageCase_ == 25) {
          return (com.heroiclabs.nakama.rtapi.Status) message_;
        }
        return com.heroiclabs.nakama.rtapi.Status.getDefaultInstance();
      } else {
        if (messageCase_ == 25) {
          return statusBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.rtapi.Status.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * An incoming status snapshot for some set of users.
     * </pre>
     *
     * <code>.nakama.realtime.Status status = 25 [json_name = "status"];</code>
     */
    public Builder setStatus(com.heroiclabs.nakama.rtapi.Status value) {
      if (statusBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        statusBuilder_.setMessage(value);
      }
      messageCase_ = 25;
      return this;
    }
    /**
     * <pre>
     * An incoming status snapshot for some set of users.
     * </pre>
     *
     * <code>.nakama.realtime.Status status = 25 [json_name = "status"];</code>
     */
    public Builder setStatus(
        com.heroiclabs.nakama.rtapi.Status.Builder builderForValue) {
      if (statusBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        statusBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 25;
      return this;
    }
    /**
     * <pre>
     * An incoming status snapshot for some set of users.
     * </pre>
     *
     * <code>.nakama.realtime.Status status = 25 [json_name = "status"];</code>
     */
    public Builder mergeStatus(com.heroiclabs.nakama.rtapi.Status value) {
      if (statusBuilder_ == null) {
        if (messageCase_ == 25 &&
            message_ != com.heroiclabs.nakama.rtapi.Status.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.rtapi.Status.newBuilder((com.heroiclabs.nakama.rtapi.Status) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 25) {
          statusBuilder_.mergeFrom(value);
        } else {
          statusBuilder_.setMessage(value);
        }
      }
      messageCase_ = 25;
      return this;
    }
    /**
     * <pre>
     * An incoming status snapshot for some set of users.
     * </pre>
     *
     * <code>.nakama.realtime.Status status = 25 [json_name = "status"];</code>
     */
    public Builder clearStatus() {
      if (statusBuilder_ == null) {
        if (messageCase_ == 25) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 25) {
          messageCase_ = 0;
          message_ = null;
        }
        statusBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * An incoming status snapshot for some set of users.
     * </pre>
     *
     * <code>.nakama.realtime.Status status = 25 [json_name = "status"];</code>
     */
    public com.heroiclabs.nakama.rtapi.Status.Builder getStatusBuilder() {
      return getStatusFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * An incoming status snapshot for some set of users.
     * </pre>
     *
     * <code>.nakama.realtime.Status status = 25 [json_name = "status"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.StatusOrBuilder getStatusOrBuilder() {
      if ((messageCase_ == 25) && (statusBuilder_ != null)) {
        return statusBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 25) {
          return (com.heroiclabs.nakama.rtapi.Status) message_;
        }
        return com.heroiclabs.nakama.rtapi.Status.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * An incoming status snapshot for some set of users.
     * </pre>
     *
     * <code>.nakama.realtime.Status status = 25 [json_name = "status"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.Status, com.heroiclabs.nakama.rtapi.Status.Builder, com.heroiclabs.nakama.rtapi.StatusOrBuilder> 
        getStatusFieldBuilder() {
      if (statusBuilder_ == null) {
        if (!(messageCase_ == 25)) {
          message_ = com.heroiclabs.nakama.rtapi.Status.getDefaultInstance();
        }
        statusBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.rtapi.Status, com.heroiclabs.nakama.rtapi.Status.Builder, com.heroiclabs.nakama.rtapi.StatusOrBuilder>(
                (com.heroiclabs.nakama.rtapi.Status) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 25;
      onChanged();
      return statusBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.StatusFollow, com.heroiclabs.nakama.rtapi.StatusFollow.Builder, com.heroiclabs.nakama.rtapi.StatusFollowOrBuilder> statusFollowBuilder_;
    /**
     * <pre>
     * Start following some set of users to receive their status updates.
     * </pre>
     *
     * <code>.nakama.realtime.StatusFollow status_follow = 26 [json_name = "statusFollow"];</code>
     * @return Whether the statusFollow field is set.
     */
    @java.lang.Override
    public boolean hasStatusFollow() {
      return messageCase_ == 26;
    }
    /**
     * <pre>
     * Start following some set of users to receive their status updates.
     * </pre>
     *
     * <code>.nakama.realtime.StatusFollow status_follow = 26 [json_name = "statusFollow"];</code>
     * @return The statusFollow.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.StatusFollow getStatusFollow() {
      if (statusFollowBuilder_ == null) {
        if (messageCase_ == 26) {
          return (com.heroiclabs.nakama.rtapi.StatusFollow) message_;
        }
        return com.heroiclabs.nakama.rtapi.StatusFollow.getDefaultInstance();
      } else {
        if (messageCase_ == 26) {
          return statusFollowBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.rtapi.StatusFollow.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Start following some set of users to receive their status updates.
     * </pre>
     *
     * <code>.nakama.realtime.StatusFollow status_follow = 26 [json_name = "statusFollow"];</code>
     */
    public Builder setStatusFollow(com.heroiclabs.nakama.rtapi.StatusFollow value) {
      if (statusFollowBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        statusFollowBuilder_.setMessage(value);
      }
      messageCase_ = 26;
      return this;
    }
    /**
     * <pre>
     * Start following some set of users to receive their status updates.
     * </pre>
     *
     * <code>.nakama.realtime.StatusFollow status_follow = 26 [json_name = "statusFollow"];</code>
     */
    public Builder setStatusFollow(
        com.heroiclabs.nakama.rtapi.StatusFollow.Builder builderForValue) {
      if (statusFollowBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        statusFollowBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 26;
      return this;
    }
    /**
     * <pre>
     * Start following some set of users to receive their status updates.
     * </pre>
     *
     * <code>.nakama.realtime.StatusFollow status_follow = 26 [json_name = "statusFollow"];</code>
     */
    public Builder mergeStatusFollow(com.heroiclabs.nakama.rtapi.StatusFollow value) {
      if (statusFollowBuilder_ == null) {
        if (messageCase_ == 26 &&
            message_ != com.heroiclabs.nakama.rtapi.StatusFollow.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.rtapi.StatusFollow.newBuilder((com.heroiclabs.nakama.rtapi.StatusFollow) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 26) {
          statusFollowBuilder_.mergeFrom(value);
        } else {
          statusFollowBuilder_.setMessage(value);
        }
      }
      messageCase_ = 26;
      return this;
    }
    /**
     * <pre>
     * Start following some set of users to receive their status updates.
     * </pre>
     *
     * <code>.nakama.realtime.StatusFollow status_follow = 26 [json_name = "statusFollow"];</code>
     */
    public Builder clearStatusFollow() {
      if (statusFollowBuilder_ == null) {
        if (messageCase_ == 26) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 26) {
          messageCase_ = 0;
          message_ = null;
        }
        statusFollowBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Start following some set of users to receive their status updates.
     * </pre>
     *
     * <code>.nakama.realtime.StatusFollow status_follow = 26 [json_name = "statusFollow"];</code>
     */
    public com.heroiclabs.nakama.rtapi.StatusFollow.Builder getStatusFollowBuilder() {
      return getStatusFollowFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Start following some set of users to receive their status updates.
     * </pre>
     *
     * <code>.nakama.realtime.StatusFollow status_follow = 26 [json_name = "statusFollow"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.StatusFollowOrBuilder getStatusFollowOrBuilder() {
      if ((messageCase_ == 26) && (statusFollowBuilder_ != null)) {
        return statusFollowBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 26) {
          return (com.heroiclabs.nakama.rtapi.StatusFollow) message_;
        }
        return com.heroiclabs.nakama.rtapi.StatusFollow.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Start following some set of users to receive their status updates.
     * </pre>
     *
     * <code>.nakama.realtime.StatusFollow status_follow = 26 [json_name = "statusFollow"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.StatusFollow, com.heroiclabs.nakama.rtapi.StatusFollow.Builder, com.heroiclabs.nakama.rtapi.StatusFollowOrBuilder> 
        getStatusFollowFieldBuilder() {
      if (statusFollowBuilder_ == null) {
        if (!(messageCase_ == 26)) {
          message_ = com.heroiclabs.nakama.rtapi.StatusFollow.getDefaultInstance();
        }
        statusFollowBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.rtapi.StatusFollow, com.heroiclabs.nakama.rtapi.StatusFollow.Builder, com.heroiclabs.nakama.rtapi.StatusFollowOrBuilder>(
                (com.heroiclabs.nakama.rtapi.StatusFollow) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 26;
      onChanged();
      return statusFollowBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.StatusPresenceEvent, com.heroiclabs.nakama.rtapi.StatusPresenceEvent.Builder, com.heroiclabs.nakama.rtapi.StatusPresenceEventOrBuilder> statusPresenceEventBuilder_;
    /**
     * <pre>
     * An incoming status update.
     * </pre>
     *
     * <code>.nakama.realtime.StatusPresenceEvent status_presence_event = 27 [json_name = "statusPresenceEvent"];</code>
     * @return Whether the statusPresenceEvent field is set.
     */
    @java.lang.Override
    public boolean hasStatusPresenceEvent() {
      return messageCase_ == 27;
    }
    /**
     * <pre>
     * An incoming status update.
     * </pre>
     *
     * <code>.nakama.realtime.StatusPresenceEvent status_presence_event = 27 [json_name = "statusPresenceEvent"];</code>
     * @return The statusPresenceEvent.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.StatusPresenceEvent getStatusPresenceEvent() {
      if (statusPresenceEventBuilder_ == null) {
        if (messageCase_ == 27) {
          return (com.heroiclabs.nakama.rtapi.StatusPresenceEvent) message_;
        }
        return com.heroiclabs.nakama.rtapi.StatusPresenceEvent.getDefaultInstance();
      } else {
        if (messageCase_ == 27) {
          return statusPresenceEventBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.rtapi.StatusPresenceEvent.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * An incoming status update.
     * </pre>
     *
     * <code>.nakama.realtime.StatusPresenceEvent status_presence_event = 27 [json_name = "statusPresenceEvent"];</code>
     */
    public Builder setStatusPresenceEvent(com.heroiclabs.nakama.rtapi.StatusPresenceEvent value) {
      if (statusPresenceEventBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        statusPresenceEventBuilder_.setMessage(value);
      }
      messageCase_ = 27;
      return this;
    }
    /**
     * <pre>
     * An incoming status update.
     * </pre>
     *
     * <code>.nakama.realtime.StatusPresenceEvent status_presence_event = 27 [json_name = "statusPresenceEvent"];</code>
     */
    public Builder setStatusPresenceEvent(
        com.heroiclabs.nakama.rtapi.StatusPresenceEvent.Builder builderForValue) {
      if (statusPresenceEventBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        statusPresenceEventBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 27;
      return this;
    }
    /**
     * <pre>
     * An incoming status update.
     * </pre>
     *
     * <code>.nakama.realtime.StatusPresenceEvent status_presence_event = 27 [json_name = "statusPresenceEvent"];</code>
     */
    public Builder mergeStatusPresenceEvent(com.heroiclabs.nakama.rtapi.StatusPresenceEvent value) {
      if (statusPresenceEventBuilder_ == null) {
        if (messageCase_ == 27 &&
            message_ != com.heroiclabs.nakama.rtapi.StatusPresenceEvent.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.rtapi.StatusPresenceEvent.newBuilder((com.heroiclabs.nakama.rtapi.StatusPresenceEvent) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 27) {
          statusPresenceEventBuilder_.mergeFrom(value);
        } else {
          statusPresenceEventBuilder_.setMessage(value);
        }
      }
      messageCase_ = 27;
      return this;
    }
    /**
     * <pre>
     * An incoming status update.
     * </pre>
     *
     * <code>.nakama.realtime.StatusPresenceEvent status_presence_event = 27 [json_name = "statusPresenceEvent"];</code>
     */
    public Builder clearStatusPresenceEvent() {
      if (statusPresenceEventBuilder_ == null) {
        if (messageCase_ == 27) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 27) {
          messageCase_ = 0;
          message_ = null;
        }
        statusPresenceEventBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * An incoming status update.
     * </pre>
     *
     * <code>.nakama.realtime.StatusPresenceEvent status_presence_event = 27 [json_name = "statusPresenceEvent"];</code>
     */
    public com.heroiclabs.nakama.rtapi.StatusPresenceEvent.Builder getStatusPresenceEventBuilder() {
      return getStatusPresenceEventFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * An incoming status update.
     * </pre>
     *
     * <code>.nakama.realtime.StatusPresenceEvent status_presence_event = 27 [json_name = "statusPresenceEvent"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.StatusPresenceEventOrBuilder getStatusPresenceEventOrBuilder() {
      if ((messageCase_ == 27) && (statusPresenceEventBuilder_ != null)) {
        return statusPresenceEventBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 27) {
          return (com.heroiclabs.nakama.rtapi.StatusPresenceEvent) message_;
        }
        return com.heroiclabs.nakama.rtapi.StatusPresenceEvent.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * An incoming status update.
     * </pre>
     *
     * <code>.nakama.realtime.StatusPresenceEvent status_presence_event = 27 [json_name = "statusPresenceEvent"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.StatusPresenceEvent, com.heroiclabs.nakama.rtapi.StatusPresenceEvent.Builder, com.heroiclabs.nakama.rtapi.StatusPresenceEventOrBuilder> 
        getStatusPresenceEventFieldBuilder() {
      if (statusPresenceEventBuilder_ == null) {
        if (!(messageCase_ == 27)) {
          message_ = com.heroiclabs.nakama.rtapi.StatusPresenceEvent.getDefaultInstance();
        }
        statusPresenceEventBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.rtapi.StatusPresenceEvent, com.heroiclabs.nakama.rtapi.StatusPresenceEvent.Builder, com.heroiclabs.nakama.rtapi.StatusPresenceEventOrBuilder>(
                (com.heroiclabs.nakama.rtapi.StatusPresenceEvent) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 27;
      onChanged();
      return statusPresenceEventBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.StatusUnfollow, com.heroiclabs.nakama.rtapi.StatusUnfollow.Builder, com.heroiclabs.nakama.rtapi.StatusUnfollowOrBuilder> statusUnfollowBuilder_;
    /**
     * <pre>
     * Stop following some set of users to no longer receive their status updates.
     * </pre>
     *
     * <code>.nakama.realtime.StatusUnfollow status_unfollow = 28 [json_name = "statusUnfollow"];</code>
     * @return Whether the statusUnfollow field is set.
     */
    @java.lang.Override
    public boolean hasStatusUnfollow() {
      return messageCase_ == 28;
    }
    /**
     * <pre>
     * Stop following some set of users to no longer receive their status updates.
     * </pre>
     *
     * <code>.nakama.realtime.StatusUnfollow status_unfollow = 28 [json_name = "statusUnfollow"];</code>
     * @return The statusUnfollow.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.StatusUnfollow getStatusUnfollow() {
      if (statusUnfollowBuilder_ == null) {
        if (messageCase_ == 28) {
          return (com.heroiclabs.nakama.rtapi.StatusUnfollow) message_;
        }
        return com.heroiclabs.nakama.rtapi.StatusUnfollow.getDefaultInstance();
      } else {
        if (messageCase_ == 28) {
          return statusUnfollowBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.rtapi.StatusUnfollow.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Stop following some set of users to no longer receive their status updates.
     * </pre>
     *
     * <code>.nakama.realtime.StatusUnfollow status_unfollow = 28 [json_name = "statusUnfollow"];</code>
     */
    public Builder setStatusUnfollow(com.heroiclabs.nakama.rtapi.StatusUnfollow value) {
      if (statusUnfollowBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        statusUnfollowBuilder_.setMessage(value);
      }
      messageCase_ = 28;
      return this;
    }
    /**
     * <pre>
     * Stop following some set of users to no longer receive their status updates.
     * </pre>
     *
     * <code>.nakama.realtime.StatusUnfollow status_unfollow = 28 [json_name = "statusUnfollow"];</code>
     */
    public Builder setStatusUnfollow(
        com.heroiclabs.nakama.rtapi.StatusUnfollow.Builder builderForValue) {
      if (statusUnfollowBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        statusUnfollowBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 28;
      return this;
    }
    /**
     * <pre>
     * Stop following some set of users to no longer receive their status updates.
     * </pre>
     *
     * <code>.nakama.realtime.StatusUnfollow status_unfollow = 28 [json_name = "statusUnfollow"];</code>
     */
    public Builder mergeStatusUnfollow(com.heroiclabs.nakama.rtapi.StatusUnfollow value) {
      if (statusUnfollowBuilder_ == null) {
        if (messageCase_ == 28 &&
            message_ != com.heroiclabs.nakama.rtapi.StatusUnfollow.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.rtapi.StatusUnfollow.newBuilder((com.heroiclabs.nakama.rtapi.StatusUnfollow) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 28) {
          statusUnfollowBuilder_.mergeFrom(value);
        } else {
          statusUnfollowBuilder_.setMessage(value);
        }
      }
      messageCase_ = 28;
      return this;
    }
    /**
     * <pre>
     * Stop following some set of users to no longer receive their status updates.
     * </pre>
     *
     * <code>.nakama.realtime.StatusUnfollow status_unfollow = 28 [json_name = "statusUnfollow"];</code>
     */
    public Builder clearStatusUnfollow() {
      if (statusUnfollowBuilder_ == null) {
        if (messageCase_ == 28) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 28) {
          messageCase_ = 0;
          message_ = null;
        }
        statusUnfollowBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Stop following some set of users to no longer receive their status updates.
     * </pre>
     *
     * <code>.nakama.realtime.StatusUnfollow status_unfollow = 28 [json_name = "statusUnfollow"];</code>
     */
    public com.heroiclabs.nakama.rtapi.StatusUnfollow.Builder getStatusUnfollowBuilder() {
      return getStatusUnfollowFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Stop following some set of users to no longer receive their status updates.
     * </pre>
     *
     * <code>.nakama.realtime.StatusUnfollow status_unfollow = 28 [json_name = "statusUnfollow"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.StatusUnfollowOrBuilder getStatusUnfollowOrBuilder() {
      if ((messageCase_ == 28) && (statusUnfollowBuilder_ != null)) {
        return statusUnfollowBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 28) {
          return (com.heroiclabs.nakama.rtapi.StatusUnfollow) message_;
        }
        return com.heroiclabs.nakama.rtapi.StatusUnfollow.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Stop following some set of users to no longer receive their status updates.
     * </pre>
     *
     * <code>.nakama.realtime.StatusUnfollow status_unfollow = 28 [json_name = "statusUnfollow"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.StatusUnfollow, com.heroiclabs.nakama.rtapi.StatusUnfollow.Builder, com.heroiclabs.nakama.rtapi.StatusUnfollowOrBuilder> 
        getStatusUnfollowFieldBuilder() {
      if (statusUnfollowBuilder_ == null) {
        if (!(messageCase_ == 28)) {
          message_ = com.heroiclabs.nakama.rtapi.StatusUnfollow.getDefaultInstance();
        }
        statusUnfollowBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.rtapi.StatusUnfollow, com.heroiclabs.nakama.rtapi.StatusUnfollow.Builder, com.heroiclabs.nakama.rtapi.StatusUnfollowOrBuilder>(
                (com.heroiclabs.nakama.rtapi.StatusUnfollow) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 28;
      onChanged();
      return statusUnfollowBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.StatusUpdate, com.heroiclabs.nakama.rtapi.StatusUpdate.Builder, com.heroiclabs.nakama.rtapi.StatusUpdateOrBuilder> statusUpdateBuilder_;
    /**
     * <pre>
     * Set the user's own status.
     * </pre>
     *
     * <code>.nakama.realtime.StatusUpdate status_update = 29 [json_name = "statusUpdate"];</code>
     * @return Whether the statusUpdate field is set.
     */
    @java.lang.Override
    public boolean hasStatusUpdate() {
      return messageCase_ == 29;
    }
    /**
     * <pre>
     * Set the user's own status.
     * </pre>
     *
     * <code>.nakama.realtime.StatusUpdate status_update = 29 [json_name = "statusUpdate"];</code>
     * @return The statusUpdate.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.StatusUpdate getStatusUpdate() {
      if (statusUpdateBuilder_ == null) {
        if (messageCase_ == 29) {
          return (com.heroiclabs.nakama.rtapi.StatusUpdate) message_;
        }
        return com.heroiclabs.nakama.rtapi.StatusUpdate.getDefaultInstance();
      } else {
        if (messageCase_ == 29) {
          return statusUpdateBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.rtapi.StatusUpdate.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Set the user's own status.
     * </pre>
     *
     * <code>.nakama.realtime.StatusUpdate status_update = 29 [json_name = "statusUpdate"];</code>
     */
    public Builder setStatusUpdate(com.heroiclabs.nakama.rtapi.StatusUpdate value) {
      if (statusUpdateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        statusUpdateBuilder_.setMessage(value);
      }
      messageCase_ = 29;
      return this;
    }
    /**
     * <pre>
     * Set the user's own status.
     * </pre>
     *
     * <code>.nakama.realtime.StatusUpdate status_update = 29 [json_name = "statusUpdate"];</code>
     */
    public Builder setStatusUpdate(
        com.heroiclabs.nakama.rtapi.StatusUpdate.Builder builderForValue) {
      if (statusUpdateBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        statusUpdateBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 29;
      return this;
    }
    /**
     * <pre>
     * Set the user's own status.
     * </pre>
     *
     * <code>.nakama.realtime.StatusUpdate status_update = 29 [json_name = "statusUpdate"];</code>
     */
    public Builder mergeStatusUpdate(com.heroiclabs.nakama.rtapi.StatusUpdate value) {
      if (statusUpdateBuilder_ == null) {
        if (messageCase_ == 29 &&
            message_ != com.heroiclabs.nakama.rtapi.StatusUpdate.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.rtapi.StatusUpdate.newBuilder((com.heroiclabs.nakama.rtapi.StatusUpdate) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 29) {
          statusUpdateBuilder_.mergeFrom(value);
        } else {
          statusUpdateBuilder_.setMessage(value);
        }
      }
      messageCase_ = 29;
      return this;
    }
    /**
     * <pre>
     * Set the user's own status.
     * </pre>
     *
     * <code>.nakama.realtime.StatusUpdate status_update = 29 [json_name = "statusUpdate"];</code>
     */
    public Builder clearStatusUpdate() {
      if (statusUpdateBuilder_ == null) {
        if (messageCase_ == 29) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 29) {
          messageCase_ = 0;
          message_ = null;
        }
        statusUpdateBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Set the user's own status.
     * </pre>
     *
     * <code>.nakama.realtime.StatusUpdate status_update = 29 [json_name = "statusUpdate"];</code>
     */
    public com.heroiclabs.nakama.rtapi.StatusUpdate.Builder getStatusUpdateBuilder() {
      return getStatusUpdateFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Set the user's own status.
     * </pre>
     *
     * <code>.nakama.realtime.StatusUpdate status_update = 29 [json_name = "statusUpdate"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.StatusUpdateOrBuilder getStatusUpdateOrBuilder() {
      if ((messageCase_ == 29) && (statusUpdateBuilder_ != null)) {
        return statusUpdateBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 29) {
          return (com.heroiclabs.nakama.rtapi.StatusUpdate) message_;
        }
        return com.heroiclabs.nakama.rtapi.StatusUpdate.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Set the user's own status.
     * </pre>
     *
     * <code>.nakama.realtime.StatusUpdate status_update = 29 [json_name = "statusUpdate"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.StatusUpdate, com.heroiclabs.nakama.rtapi.StatusUpdate.Builder, com.heroiclabs.nakama.rtapi.StatusUpdateOrBuilder> 
        getStatusUpdateFieldBuilder() {
      if (statusUpdateBuilder_ == null) {
        if (!(messageCase_ == 29)) {
          message_ = com.heroiclabs.nakama.rtapi.StatusUpdate.getDefaultInstance();
        }
        statusUpdateBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.rtapi.StatusUpdate, com.heroiclabs.nakama.rtapi.StatusUpdate.Builder, com.heroiclabs.nakama.rtapi.StatusUpdateOrBuilder>(
                (com.heroiclabs.nakama.rtapi.StatusUpdate) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 29;
      onChanged();
      return statusUpdateBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.StreamData, com.heroiclabs.nakama.rtapi.StreamData.Builder, com.heroiclabs.nakama.rtapi.StreamDataOrBuilder> streamDataBuilder_;
    /**
     * <pre>
     * A data message delivered over a stream.
     * </pre>
     *
     * <code>.nakama.realtime.StreamData stream_data = 30 [json_name = "streamData"];</code>
     * @return Whether the streamData field is set.
     */
    @java.lang.Override
    public boolean hasStreamData() {
      return messageCase_ == 30;
    }
    /**
     * <pre>
     * A data message delivered over a stream.
     * </pre>
     *
     * <code>.nakama.realtime.StreamData stream_data = 30 [json_name = "streamData"];</code>
     * @return The streamData.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.StreamData getStreamData() {
      if (streamDataBuilder_ == null) {
        if (messageCase_ == 30) {
          return (com.heroiclabs.nakama.rtapi.StreamData) message_;
        }
        return com.heroiclabs.nakama.rtapi.StreamData.getDefaultInstance();
      } else {
        if (messageCase_ == 30) {
          return streamDataBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.rtapi.StreamData.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A data message delivered over a stream.
     * </pre>
     *
     * <code>.nakama.realtime.StreamData stream_data = 30 [json_name = "streamData"];</code>
     */
    public Builder setStreamData(com.heroiclabs.nakama.rtapi.StreamData value) {
      if (streamDataBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        streamDataBuilder_.setMessage(value);
      }
      messageCase_ = 30;
      return this;
    }
    /**
     * <pre>
     * A data message delivered over a stream.
     * </pre>
     *
     * <code>.nakama.realtime.StreamData stream_data = 30 [json_name = "streamData"];</code>
     */
    public Builder setStreamData(
        com.heroiclabs.nakama.rtapi.StreamData.Builder builderForValue) {
      if (streamDataBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        streamDataBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 30;
      return this;
    }
    /**
     * <pre>
     * A data message delivered over a stream.
     * </pre>
     *
     * <code>.nakama.realtime.StreamData stream_data = 30 [json_name = "streamData"];</code>
     */
    public Builder mergeStreamData(com.heroiclabs.nakama.rtapi.StreamData value) {
      if (streamDataBuilder_ == null) {
        if (messageCase_ == 30 &&
            message_ != com.heroiclabs.nakama.rtapi.StreamData.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.rtapi.StreamData.newBuilder((com.heroiclabs.nakama.rtapi.StreamData) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 30) {
          streamDataBuilder_.mergeFrom(value);
        } else {
          streamDataBuilder_.setMessage(value);
        }
      }
      messageCase_ = 30;
      return this;
    }
    /**
     * <pre>
     * A data message delivered over a stream.
     * </pre>
     *
     * <code>.nakama.realtime.StreamData stream_data = 30 [json_name = "streamData"];</code>
     */
    public Builder clearStreamData() {
      if (streamDataBuilder_ == null) {
        if (messageCase_ == 30) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 30) {
          messageCase_ = 0;
          message_ = null;
        }
        streamDataBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * A data message delivered over a stream.
     * </pre>
     *
     * <code>.nakama.realtime.StreamData stream_data = 30 [json_name = "streamData"];</code>
     */
    public com.heroiclabs.nakama.rtapi.StreamData.Builder getStreamDataBuilder() {
      return getStreamDataFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * A data message delivered over a stream.
     * </pre>
     *
     * <code>.nakama.realtime.StreamData stream_data = 30 [json_name = "streamData"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.StreamDataOrBuilder getStreamDataOrBuilder() {
      if ((messageCase_ == 30) && (streamDataBuilder_ != null)) {
        return streamDataBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 30) {
          return (com.heroiclabs.nakama.rtapi.StreamData) message_;
        }
        return com.heroiclabs.nakama.rtapi.StreamData.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A data message delivered over a stream.
     * </pre>
     *
     * <code>.nakama.realtime.StreamData stream_data = 30 [json_name = "streamData"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.StreamData, com.heroiclabs.nakama.rtapi.StreamData.Builder, com.heroiclabs.nakama.rtapi.StreamDataOrBuilder> 
        getStreamDataFieldBuilder() {
      if (streamDataBuilder_ == null) {
        if (!(messageCase_ == 30)) {
          message_ = com.heroiclabs.nakama.rtapi.StreamData.getDefaultInstance();
        }
        streamDataBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.rtapi.StreamData, com.heroiclabs.nakama.rtapi.StreamData.Builder, com.heroiclabs.nakama.rtapi.StreamDataOrBuilder>(
                (com.heroiclabs.nakama.rtapi.StreamData) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 30;
      onChanged();
      return streamDataBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.StreamPresenceEvent, com.heroiclabs.nakama.rtapi.StreamPresenceEvent.Builder, com.heroiclabs.nakama.rtapi.StreamPresenceEventOrBuilder> streamPresenceEventBuilder_;
    /**
     * <pre>
     * Presence update for a particular stream.
     * </pre>
     *
     * <code>.nakama.realtime.StreamPresenceEvent stream_presence_event = 31 [json_name = "streamPresenceEvent"];</code>
     * @return Whether the streamPresenceEvent field is set.
     */
    @java.lang.Override
    public boolean hasStreamPresenceEvent() {
      return messageCase_ == 31;
    }
    /**
     * <pre>
     * Presence update for a particular stream.
     * </pre>
     *
     * <code>.nakama.realtime.StreamPresenceEvent stream_presence_event = 31 [json_name = "streamPresenceEvent"];</code>
     * @return The streamPresenceEvent.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.StreamPresenceEvent getStreamPresenceEvent() {
      if (streamPresenceEventBuilder_ == null) {
        if (messageCase_ == 31) {
          return (com.heroiclabs.nakama.rtapi.StreamPresenceEvent) message_;
        }
        return com.heroiclabs.nakama.rtapi.StreamPresenceEvent.getDefaultInstance();
      } else {
        if (messageCase_ == 31) {
          return streamPresenceEventBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.rtapi.StreamPresenceEvent.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Presence update for a particular stream.
     * </pre>
     *
     * <code>.nakama.realtime.StreamPresenceEvent stream_presence_event = 31 [json_name = "streamPresenceEvent"];</code>
     */
    public Builder setStreamPresenceEvent(com.heroiclabs.nakama.rtapi.StreamPresenceEvent value) {
      if (streamPresenceEventBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        streamPresenceEventBuilder_.setMessage(value);
      }
      messageCase_ = 31;
      return this;
    }
    /**
     * <pre>
     * Presence update for a particular stream.
     * </pre>
     *
     * <code>.nakama.realtime.StreamPresenceEvent stream_presence_event = 31 [json_name = "streamPresenceEvent"];</code>
     */
    public Builder setStreamPresenceEvent(
        com.heroiclabs.nakama.rtapi.StreamPresenceEvent.Builder builderForValue) {
      if (streamPresenceEventBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        streamPresenceEventBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 31;
      return this;
    }
    /**
     * <pre>
     * Presence update for a particular stream.
     * </pre>
     *
     * <code>.nakama.realtime.StreamPresenceEvent stream_presence_event = 31 [json_name = "streamPresenceEvent"];</code>
     */
    public Builder mergeStreamPresenceEvent(com.heroiclabs.nakama.rtapi.StreamPresenceEvent value) {
      if (streamPresenceEventBuilder_ == null) {
        if (messageCase_ == 31 &&
            message_ != com.heroiclabs.nakama.rtapi.StreamPresenceEvent.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.rtapi.StreamPresenceEvent.newBuilder((com.heroiclabs.nakama.rtapi.StreamPresenceEvent) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 31) {
          streamPresenceEventBuilder_.mergeFrom(value);
        } else {
          streamPresenceEventBuilder_.setMessage(value);
        }
      }
      messageCase_ = 31;
      return this;
    }
    /**
     * <pre>
     * Presence update for a particular stream.
     * </pre>
     *
     * <code>.nakama.realtime.StreamPresenceEvent stream_presence_event = 31 [json_name = "streamPresenceEvent"];</code>
     */
    public Builder clearStreamPresenceEvent() {
      if (streamPresenceEventBuilder_ == null) {
        if (messageCase_ == 31) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 31) {
          messageCase_ = 0;
          message_ = null;
        }
        streamPresenceEventBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Presence update for a particular stream.
     * </pre>
     *
     * <code>.nakama.realtime.StreamPresenceEvent stream_presence_event = 31 [json_name = "streamPresenceEvent"];</code>
     */
    public com.heroiclabs.nakama.rtapi.StreamPresenceEvent.Builder getStreamPresenceEventBuilder() {
      return getStreamPresenceEventFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Presence update for a particular stream.
     * </pre>
     *
     * <code>.nakama.realtime.StreamPresenceEvent stream_presence_event = 31 [json_name = "streamPresenceEvent"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.StreamPresenceEventOrBuilder getStreamPresenceEventOrBuilder() {
      if ((messageCase_ == 31) && (streamPresenceEventBuilder_ != null)) {
        return streamPresenceEventBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 31) {
          return (com.heroiclabs.nakama.rtapi.StreamPresenceEvent) message_;
        }
        return com.heroiclabs.nakama.rtapi.StreamPresenceEvent.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Presence update for a particular stream.
     * </pre>
     *
     * <code>.nakama.realtime.StreamPresenceEvent stream_presence_event = 31 [json_name = "streamPresenceEvent"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.StreamPresenceEvent, com.heroiclabs.nakama.rtapi.StreamPresenceEvent.Builder, com.heroiclabs.nakama.rtapi.StreamPresenceEventOrBuilder> 
        getStreamPresenceEventFieldBuilder() {
      if (streamPresenceEventBuilder_ == null) {
        if (!(messageCase_ == 31)) {
          message_ = com.heroiclabs.nakama.rtapi.StreamPresenceEvent.getDefaultInstance();
        }
        streamPresenceEventBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.rtapi.StreamPresenceEvent, com.heroiclabs.nakama.rtapi.StreamPresenceEvent.Builder, com.heroiclabs.nakama.rtapi.StreamPresenceEventOrBuilder>(
                (com.heroiclabs.nakama.rtapi.StreamPresenceEvent) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 31;
      onChanged();
      return streamPresenceEventBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.Ping, com.heroiclabs.nakama.rtapi.Ping.Builder, com.heroiclabs.nakama.rtapi.PingOrBuilder> pingBuilder_;
    /**
     * <pre>
     * Application-level heartbeat and connection check.
     * </pre>
     *
     * <code>.nakama.realtime.Ping ping = 32 [json_name = "ping"];</code>
     * @return Whether the ping field is set.
     */
    @java.lang.Override
    public boolean hasPing() {
      return messageCase_ == 32;
    }
    /**
     * <pre>
     * Application-level heartbeat and connection check.
     * </pre>
     *
     * <code>.nakama.realtime.Ping ping = 32 [json_name = "ping"];</code>
     * @return The ping.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.Ping getPing() {
      if (pingBuilder_ == null) {
        if (messageCase_ == 32) {
          return (com.heroiclabs.nakama.rtapi.Ping) message_;
        }
        return com.heroiclabs.nakama.rtapi.Ping.getDefaultInstance();
      } else {
        if (messageCase_ == 32) {
          return pingBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.rtapi.Ping.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Application-level heartbeat and connection check.
     * </pre>
     *
     * <code>.nakama.realtime.Ping ping = 32 [json_name = "ping"];</code>
     */
    public Builder setPing(com.heroiclabs.nakama.rtapi.Ping value) {
      if (pingBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        pingBuilder_.setMessage(value);
      }
      messageCase_ = 32;
      return this;
    }
    /**
     * <pre>
     * Application-level heartbeat and connection check.
     * </pre>
     *
     * <code>.nakama.realtime.Ping ping = 32 [json_name = "ping"];</code>
     */
    public Builder setPing(
        com.heroiclabs.nakama.rtapi.Ping.Builder builderForValue) {
      if (pingBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        pingBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 32;
      return this;
    }
    /**
     * <pre>
     * Application-level heartbeat and connection check.
     * </pre>
     *
     * <code>.nakama.realtime.Ping ping = 32 [json_name = "ping"];</code>
     */
    public Builder mergePing(com.heroiclabs.nakama.rtapi.Ping value) {
      if (pingBuilder_ == null) {
        if (messageCase_ == 32 &&
            message_ != com.heroiclabs.nakama.rtapi.Ping.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.rtapi.Ping.newBuilder((com.heroiclabs.nakama.rtapi.Ping) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 32) {
          pingBuilder_.mergeFrom(value);
        } else {
          pingBuilder_.setMessage(value);
        }
      }
      messageCase_ = 32;
      return this;
    }
    /**
     * <pre>
     * Application-level heartbeat and connection check.
     * </pre>
     *
     * <code>.nakama.realtime.Ping ping = 32 [json_name = "ping"];</code>
     */
    public Builder clearPing() {
      if (pingBuilder_ == null) {
        if (messageCase_ == 32) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 32) {
          messageCase_ = 0;
          message_ = null;
        }
        pingBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Application-level heartbeat and connection check.
     * </pre>
     *
     * <code>.nakama.realtime.Ping ping = 32 [json_name = "ping"];</code>
     */
    public com.heroiclabs.nakama.rtapi.Ping.Builder getPingBuilder() {
      return getPingFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Application-level heartbeat and connection check.
     * </pre>
     *
     * <code>.nakama.realtime.Ping ping = 32 [json_name = "ping"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.PingOrBuilder getPingOrBuilder() {
      if ((messageCase_ == 32) && (pingBuilder_ != null)) {
        return pingBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 32) {
          return (com.heroiclabs.nakama.rtapi.Ping) message_;
        }
        return com.heroiclabs.nakama.rtapi.Ping.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Application-level heartbeat and connection check.
     * </pre>
     *
     * <code>.nakama.realtime.Ping ping = 32 [json_name = "ping"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.Ping, com.heroiclabs.nakama.rtapi.Ping.Builder, com.heroiclabs.nakama.rtapi.PingOrBuilder> 
        getPingFieldBuilder() {
      if (pingBuilder_ == null) {
        if (!(messageCase_ == 32)) {
          message_ = com.heroiclabs.nakama.rtapi.Ping.getDefaultInstance();
        }
        pingBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.rtapi.Ping, com.heroiclabs.nakama.rtapi.Ping.Builder, com.heroiclabs.nakama.rtapi.PingOrBuilder>(
                (com.heroiclabs.nakama.rtapi.Ping) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 32;
      onChanged();
      return pingBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.Pong, com.heroiclabs.nakama.rtapi.Pong.Builder, com.heroiclabs.nakama.rtapi.PongOrBuilder> pongBuilder_;
    /**
     * <pre>
     * Application-level heartbeat and connection check response.
     * </pre>
     *
     * <code>.nakama.realtime.Pong pong = 33 [json_name = "pong"];</code>
     * @return Whether the pong field is set.
     */
    @java.lang.Override
    public boolean hasPong() {
      return messageCase_ == 33;
    }
    /**
     * <pre>
     * Application-level heartbeat and connection check response.
     * </pre>
     *
     * <code>.nakama.realtime.Pong pong = 33 [json_name = "pong"];</code>
     * @return The pong.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.Pong getPong() {
      if (pongBuilder_ == null) {
        if (messageCase_ == 33) {
          return (com.heroiclabs.nakama.rtapi.Pong) message_;
        }
        return com.heroiclabs.nakama.rtapi.Pong.getDefaultInstance();
      } else {
        if (messageCase_ == 33) {
          return pongBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.rtapi.Pong.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Application-level heartbeat and connection check response.
     * </pre>
     *
     * <code>.nakama.realtime.Pong pong = 33 [json_name = "pong"];</code>
     */
    public Builder setPong(com.heroiclabs.nakama.rtapi.Pong value) {
      if (pongBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        pongBuilder_.setMessage(value);
      }
      messageCase_ = 33;
      return this;
    }
    /**
     * <pre>
     * Application-level heartbeat and connection check response.
     * </pre>
     *
     * <code>.nakama.realtime.Pong pong = 33 [json_name = "pong"];</code>
     */
    public Builder setPong(
        com.heroiclabs.nakama.rtapi.Pong.Builder builderForValue) {
      if (pongBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        pongBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 33;
      return this;
    }
    /**
     * <pre>
     * Application-level heartbeat and connection check response.
     * </pre>
     *
     * <code>.nakama.realtime.Pong pong = 33 [json_name = "pong"];</code>
     */
    public Builder mergePong(com.heroiclabs.nakama.rtapi.Pong value) {
      if (pongBuilder_ == null) {
        if (messageCase_ == 33 &&
            message_ != com.heroiclabs.nakama.rtapi.Pong.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.rtapi.Pong.newBuilder((com.heroiclabs.nakama.rtapi.Pong) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 33) {
          pongBuilder_.mergeFrom(value);
        } else {
          pongBuilder_.setMessage(value);
        }
      }
      messageCase_ = 33;
      return this;
    }
    /**
     * <pre>
     * Application-level heartbeat and connection check response.
     * </pre>
     *
     * <code>.nakama.realtime.Pong pong = 33 [json_name = "pong"];</code>
     */
    public Builder clearPong() {
      if (pongBuilder_ == null) {
        if (messageCase_ == 33) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 33) {
          messageCase_ = 0;
          message_ = null;
        }
        pongBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Application-level heartbeat and connection check response.
     * </pre>
     *
     * <code>.nakama.realtime.Pong pong = 33 [json_name = "pong"];</code>
     */
    public com.heroiclabs.nakama.rtapi.Pong.Builder getPongBuilder() {
      return getPongFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Application-level heartbeat and connection check response.
     * </pre>
     *
     * <code>.nakama.realtime.Pong pong = 33 [json_name = "pong"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.PongOrBuilder getPongOrBuilder() {
      if ((messageCase_ == 33) && (pongBuilder_ != null)) {
        return pongBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 33) {
          return (com.heroiclabs.nakama.rtapi.Pong) message_;
        }
        return com.heroiclabs.nakama.rtapi.Pong.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Application-level heartbeat and connection check response.
     * </pre>
     *
     * <code>.nakama.realtime.Pong pong = 33 [json_name = "pong"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.Pong, com.heroiclabs.nakama.rtapi.Pong.Builder, com.heroiclabs.nakama.rtapi.PongOrBuilder> 
        getPongFieldBuilder() {
      if (pongBuilder_ == null) {
        if (!(messageCase_ == 33)) {
          message_ = com.heroiclabs.nakama.rtapi.Pong.getDefaultInstance();
        }
        pongBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.rtapi.Pong, com.heroiclabs.nakama.rtapi.Pong.Builder, com.heroiclabs.nakama.rtapi.PongOrBuilder>(
                (com.heroiclabs.nakama.rtapi.Pong) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 33;
      onChanged();
      return pongBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.Party, com.heroiclabs.nakama.rtapi.Party.Builder, com.heroiclabs.nakama.rtapi.PartyOrBuilder> partyBuilder_;
    /**
     * <pre>
     * Incoming information about a party.
     * </pre>
     *
     * <code>.nakama.realtime.Party party = 34 [json_name = "party"];</code>
     * @return Whether the party field is set.
     */
    @java.lang.Override
    public boolean hasParty() {
      return messageCase_ == 34;
    }
    /**
     * <pre>
     * Incoming information about a party.
     * </pre>
     *
     * <code>.nakama.realtime.Party party = 34 [json_name = "party"];</code>
     * @return The party.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.Party getParty() {
      if (partyBuilder_ == null) {
        if (messageCase_ == 34) {
          return (com.heroiclabs.nakama.rtapi.Party) message_;
        }
        return com.heroiclabs.nakama.rtapi.Party.getDefaultInstance();
      } else {
        if (messageCase_ == 34) {
          return partyBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.rtapi.Party.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Incoming information about a party.
     * </pre>
     *
     * <code>.nakama.realtime.Party party = 34 [json_name = "party"];</code>
     */
    public Builder setParty(com.heroiclabs.nakama.rtapi.Party value) {
      if (partyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        partyBuilder_.setMessage(value);
      }
      messageCase_ = 34;
      return this;
    }
    /**
     * <pre>
     * Incoming information about a party.
     * </pre>
     *
     * <code>.nakama.realtime.Party party = 34 [json_name = "party"];</code>
     */
    public Builder setParty(
        com.heroiclabs.nakama.rtapi.Party.Builder builderForValue) {
      if (partyBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        partyBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 34;
      return this;
    }
    /**
     * <pre>
     * Incoming information about a party.
     * </pre>
     *
     * <code>.nakama.realtime.Party party = 34 [json_name = "party"];</code>
     */
    public Builder mergeParty(com.heroiclabs.nakama.rtapi.Party value) {
      if (partyBuilder_ == null) {
        if (messageCase_ == 34 &&
            message_ != com.heroiclabs.nakama.rtapi.Party.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.rtapi.Party.newBuilder((com.heroiclabs.nakama.rtapi.Party) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 34) {
          partyBuilder_.mergeFrom(value);
        } else {
          partyBuilder_.setMessage(value);
        }
      }
      messageCase_ = 34;
      return this;
    }
    /**
     * <pre>
     * Incoming information about a party.
     * </pre>
     *
     * <code>.nakama.realtime.Party party = 34 [json_name = "party"];</code>
     */
    public Builder clearParty() {
      if (partyBuilder_ == null) {
        if (messageCase_ == 34) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 34) {
          messageCase_ = 0;
          message_ = null;
        }
        partyBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Incoming information about a party.
     * </pre>
     *
     * <code>.nakama.realtime.Party party = 34 [json_name = "party"];</code>
     */
    public com.heroiclabs.nakama.rtapi.Party.Builder getPartyBuilder() {
      return getPartyFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Incoming information about a party.
     * </pre>
     *
     * <code>.nakama.realtime.Party party = 34 [json_name = "party"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.PartyOrBuilder getPartyOrBuilder() {
      if ((messageCase_ == 34) && (partyBuilder_ != null)) {
        return partyBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 34) {
          return (com.heroiclabs.nakama.rtapi.Party) message_;
        }
        return com.heroiclabs.nakama.rtapi.Party.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Incoming information about a party.
     * </pre>
     *
     * <code>.nakama.realtime.Party party = 34 [json_name = "party"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.Party, com.heroiclabs.nakama.rtapi.Party.Builder, com.heroiclabs.nakama.rtapi.PartyOrBuilder> 
        getPartyFieldBuilder() {
      if (partyBuilder_ == null) {
        if (!(messageCase_ == 34)) {
          message_ = com.heroiclabs.nakama.rtapi.Party.getDefaultInstance();
        }
        partyBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.rtapi.Party, com.heroiclabs.nakama.rtapi.Party.Builder, com.heroiclabs.nakama.rtapi.PartyOrBuilder>(
                (com.heroiclabs.nakama.rtapi.Party) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 34;
      onChanged();
      return partyBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.PartyCreate, com.heroiclabs.nakama.rtapi.PartyCreate.Builder, com.heroiclabs.nakama.rtapi.PartyCreateOrBuilder> partyCreateBuilder_;
    /**
     * <pre>
     * Create a party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyCreate party_create = 35 [json_name = "partyCreate"];</code>
     * @return Whether the partyCreate field is set.
     */
    @java.lang.Override
    public boolean hasPartyCreate() {
      return messageCase_ == 35;
    }
    /**
     * <pre>
     * Create a party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyCreate party_create = 35 [json_name = "partyCreate"];</code>
     * @return The partyCreate.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.PartyCreate getPartyCreate() {
      if (partyCreateBuilder_ == null) {
        if (messageCase_ == 35) {
          return (com.heroiclabs.nakama.rtapi.PartyCreate) message_;
        }
        return com.heroiclabs.nakama.rtapi.PartyCreate.getDefaultInstance();
      } else {
        if (messageCase_ == 35) {
          return partyCreateBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.rtapi.PartyCreate.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Create a party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyCreate party_create = 35 [json_name = "partyCreate"];</code>
     */
    public Builder setPartyCreate(com.heroiclabs.nakama.rtapi.PartyCreate value) {
      if (partyCreateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        partyCreateBuilder_.setMessage(value);
      }
      messageCase_ = 35;
      return this;
    }
    /**
     * <pre>
     * Create a party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyCreate party_create = 35 [json_name = "partyCreate"];</code>
     */
    public Builder setPartyCreate(
        com.heroiclabs.nakama.rtapi.PartyCreate.Builder builderForValue) {
      if (partyCreateBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        partyCreateBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 35;
      return this;
    }
    /**
     * <pre>
     * Create a party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyCreate party_create = 35 [json_name = "partyCreate"];</code>
     */
    public Builder mergePartyCreate(com.heroiclabs.nakama.rtapi.PartyCreate value) {
      if (partyCreateBuilder_ == null) {
        if (messageCase_ == 35 &&
            message_ != com.heroiclabs.nakama.rtapi.PartyCreate.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.rtapi.PartyCreate.newBuilder((com.heroiclabs.nakama.rtapi.PartyCreate) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 35) {
          partyCreateBuilder_.mergeFrom(value);
        } else {
          partyCreateBuilder_.setMessage(value);
        }
      }
      messageCase_ = 35;
      return this;
    }
    /**
     * <pre>
     * Create a party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyCreate party_create = 35 [json_name = "partyCreate"];</code>
     */
    public Builder clearPartyCreate() {
      if (partyCreateBuilder_ == null) {
        if (messageCase_ == 35) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 35) {
          messageCase_ = 0;
          message_ = null;
        }
        partyCreateBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Create a party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyCreate party_create = 35 [json_name = "partyCreate"];</code>
     */
    public com.heroiclabs.nakama.rtapi.PartyCreate.Builder getPartyCreateBuilder() {
      return getPartyCreateFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Create a party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyCreate party_create = 35 [json_name = "partyCreate"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.PartyCreateOrBuilder getPartyCreateOrBuilder() {
      if ((messageCase_ == 35) && (partyCreateBuilder_ != null)) {
        return partyCreateBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 35) {
          return (com.heroiclabs.nakama.rtapi.PartyCreate) message_;
        }
        return com.heroiclabs.nakama.rtapi.PartyCreate.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Create a party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyCreate party_create = 35 [json_name = "partyCreate"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.PartyCreate, com.heroiclabs.nakama.rtapi.PartyCreate.Builder, com.heroiclabs.nakama.rtapi.PartyCreateOrBuilder> 
        getPartyCreateFieldBuilder() {
      if (partyCreateBuilder_ == null) {
        if (!(messageCase_ == 35)) {
          message_ = com.heroiclabs.nakama.rtapi.PartyCreate.getDefaultInstance();
        }
        partyCreateBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.rtapi.PartyCreate, com.heroiclabs.nakama.rtapi.PartyCreate.Builder, com.heroiclabs.nakama.rtapi.PartyCreateOrBuilder>(
                (com.heroiclabs.nakama.rtapi.PartyCreate) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 35;
      onChanged();
      return partyCreateBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.PartyJoin, com.heroiclabs.nakama.rtapi.PartyJoin.Builder, com.heroiclabs.nakama.rtapi.PartyJoinOrBuilder> partyJoinBuilder_;
    /**
     * <pre>
     * Join a party, or request to join if the party is not open.
     * </pre>
     *
     * <code>.nakama.realtime.PartyJoin party_join = 36 [json_name = "partyJoin"];</code>
     * @return Whether the partyJoin field is set.
     */
    @java.lang.Override
    public boolean hasPartyJoin() {
      return messageCase_ == 36;
    }
    /**
     * <pre>
     * Join a party, or request to join if the party is not open.
     * </pre>
     *
     * <code>.nakama.realtime.PartyJoin party_join = 36 [json_name = "partyJoin"];</code>
     * @return The partyJoin.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.PartyJoin getPartyJoin() {
      if (partyJoinBuilder_ == null) {
        if (messageCase_ == 36) {
          return (com.heroiclabs.nakama.rtapi.PartyJoin) message_;
        }
        return com.heroiclabs.nakama.rtapi.PartyJoin.getDefaultInstance();
      } else {
        if (messageCase_ == 36) {
          return partyJoinBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.rtapi.PartyJoin.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Join a party, or request to join if the party is not open.
     * </pre>
     *
     * <code>.nakama.realtime.PartyJoin party_join = 36 [json_name = "partyJoin"];</code>
     */
    public Builder setPartyJoin(com.heroiclabs.nakama.rtapi.PartyJoin value) {
      if (partyJoinBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        partyJoinBuilder_.setMessage(value);
      }
      messageCase_ = 36;
      return this;
    }
    /**
     * <pre>
     * Join a party, or request to join if the party is not open.
     * </pre>
     *
     * <code>.nakama.realtime.PartyJoin party_join = 36 [json_name = "partyJoin"];</code>
     */
    public Builder setPartyJoin(
        com.heroiclabs.nakama.rtapi.PartyJoin.Builder builderForValue) {
      if (partyJoinBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        partyJoinBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 36;
      return this;
    }
    /**
     * <pre>
     * Join a party, or request to join if the party is not open.
     * </pre>
     *
     * <code>.nakama.realtime.PartyJoin party_join = 36 [json_name = "partyJoin"];</code>
     */
    public Builder mergePartyJoin(com.heroiclabs.nakama.rtapi.PartyJoin value) {
      if (partyJoinBuilder_ == null) {
        if (messageCase_ == 36 &&
            message_ != com.heroiclabs.nakama.rtapi.PartyJoin.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.rtapi.PartyJoin.newBuilder((com.heroiclabs.nakama.rtapi.PartyJoin) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 36) {
          partyJoinBuilder_.mergeFrom(value);
        } else {
          partyJoinBuilder_.setMessage(value);
        }
      }
      messageCase_ = 36;
      return this;
    }
    /**
     * <pre>
     * Join a party, or request to join if the party is not open.
     * </pre>
     *
     * <code>.nakama.realtime.PartyJoin party_join = 36 [json_name = "partyJoin"];</code>
     */
    public Builder clearPartyJoin() {
      if (partyJoinBuilder_ == null) {
        if (messageCase_ == 36) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 36) {
          messageCase_ = 0;
          message_ = null;
        }
        partyJoinBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Join a party, or request to join if the party is not open.
     * </pre>
     *
     * <code>.nakama.realtime.PartyJoin party_join = 36 [json_name = "partyJoin"];</code>
     */
    public com.heroiclabs.nakama.rtapi.PartyJoin.Builder getPartyJoinBuilder() {
      return getPartyJoinFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Join a party, or request to join if the party is not open.
     * </pre>
     *
     * <code>.nakama.realtime.PartyJoin party_join = 36 [json_name = "partyJoin"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.PartyJoinOrBuilder getPartyJoinOrBuilder() {
      if ((messageCase_ == 36) && (partyJoinBuilder_ != null)) {
        return partyJoinBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 36) {
          return (com.heroiclabs.nakama.rtapi.PartyJoin) message_;
        }
        return com.heroiclabs.nakama.rtapi.PartyJoin.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Join a party, or request to join if the party is not open.
     * </pre>
     *
     * <code>.nakama.realtime.PartyJoin party_join = 36 [json_name = "partyJoin"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.PartyJoin, com.heroiclabs.nakama.rtapi.PartyJoin.Builder, com.heroiclabs.nakama.rtapi.PartyJoinOrBuilder> 
        getPartyJoinFieldBuilder() {
      if (partyJoinBuilder_ == null) {
        if (!(messageCase_ == 36)) {
          message_ = com.heroiclabs.nakama.rtapi.PartyJoin.getDefaultInstance();
        }
        partyJoinBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.rtapi.PartyJoin, com.heroiclabs.nakama.rtapi.PartyJoin.Builder, com.heroiclabs.nakama.rtapi.PartyJoinOrBuilder>(
                (com.heroiclabs.nakama.rtapi.PartyJoin) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 36;
      onChanged();
      return partyJoinBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.PartyLeave, com.heroiclabs.nakama.rtapi.PartyLeave.Builder, com.heroiclabs.nakama.rtapi.PartyLeaveOrBuilder> partyLeaveBuilder_;
    /**
     * <pre>
     * Leave a party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyLeave party_leave = 37 [json_name = "partyLeave"];</code>
     * @return Whether the partyLeave field is set.
     */
    @java.lang.Override
    public boolean hasPartyLeave() {
      return messageCase_ == 37;
    }
    /**
     * <pre>
     * Leave a party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyLeave party_leave = 37 [json_name = "partyLeave"];</code>
     * @return The partyLeave.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.PartyLeave getPartyLeave() {
      if (partyLeaveBuilder_ == null) {
        if (messageCase_ == 37) {
          return (com.heroiclabs.nakama.rtapi.PartyLeave) message_;
        }
        return com.heroiclabs.nakama.rtapi.PartyLeave.getDefaultInstance();
      } else {
        if (messageCase_ == 37) {
          return partyLeaveBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.rtapi.PartyLeave.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Leave a party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyLeave party_leave = 37 [json_name = "partyLeave"];</code>
     */
    public Builder setPartyLeave(com.heroiclabs.nakama.rtapi.PartyLeave value) {
      if (partyLeaveBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        partyLeaveBuilder_.setMessage(value);
      }
      messageCase_ = 37;
      return this;
    }
    /**
     * <pre>
     * Leave a party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyLeave party_leave = 37 [json_name = "partyLeave"];</code>
     */
    public Builder setPartyLeave(
        com.heroiclabs.nakama.rtapi.PartyLeave.Builder builderForValue) {
      if (partyLeaveBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        partyLeaveBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 37;
      return this;
    }
    /**
     * <pre>
     * Leave a party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyLeave party_leave = 37 [json_name = "partyLeave"];</code>
     */
    public Builder mergePartyLeave(com.heroiclabs.nakama.rtapi.PartyLeave value) {
      if (partyLeaveBuilder_ == null) {
        if (messageCase_ == 37 &&
            message_ != com.heroiclabs.nakama.rtapi.PartyLeave.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.rtapi.PartyLeave.newBuilder((com.heroiclabs.nakama.rtapi.PartyLeave) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 37) {
          partyLeaveBuilder_.mergeFrom(value);
        } else {
          partyLeaveBuilder_.setMessage(value);
        }
      }
      messageCase_ = 37;
      return this;
    }
    /**
     * <pre>
     * Leave a party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyLeave party_leave = 37 [json_name = "partyLeave"];</code>
     */
    public Builder clearPartyLeave() {
      if (partyLeaveBuilder_ == null) {
        if (messageCase_ == 37) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 37) {
          messageCase_ = 0;
          message_ = null;
        }
        partyLeaveBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Leave a party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyLeave party_leave = 37 [json_name = "partyLeave"];</code>
     */
    public com.heroiclabs.nakama.rtapi.PartyLeave.Builder getPartyLeaveBuilder() {
      return getPartyLeaveFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Leave a party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyLeave party_leave = 37 [json_name = "partyLeave"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.PartyLeaveOrBuilder getPartyLeaveOrBuilder() {
      if ((messageCase_ == 37) && (partyLeaveBuilder_ != null)) {
        return partyLeaveBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 37) {
          return (com.heroiclabs.nakama.rtapi.PartyLeave) message_;
        }
        return com.heroiclabs.nakama.rtapi.PartyLeave.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Leave a party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyLeave party_leave = 37 [json_name = "partyLeave"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.PartyLeave, com.heroiclabs.nakama.rtapi.PartyLeave.Builder, com.heroiclabs.nakama.rtapi.PartyLeaveOrBuilder> 
        getPartyLeaveFieldBuilder() {
      if (partyLeaveBuilder_ == null) {
        if (!(messageCase_ == 37)) {
          message_ = com.heroiclabs.nakama.rtapi.PartyLeave.getDefaultInstance();
        }
        partyLeaveBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.rtapi.PartyLeave, com.heroiclabs.nakama.rtapi.PartyLeave.Builder, com.heroiclabs.nakama.rtapi.PartyLeaveOrBuilder>(
                (com.heroiclabs.nakama.rtapi.PartyLeave) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 37;
      onChanged();
      return partyLeaveBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.PartyPromote, com.heroiclabs.nakama.rtapi.PartyPromote.Builder, com.heroiclabs.nakama.rtapi.PartyPromoteOrBuilder> partyPromoteBuilder_;
    /**
     * <pre>
     * Promote a new party leader.
     * </pre>
     *
     * <code>.nakama.realtime.PartyPromote party_promote = 38 [json_name = "partyPromote"];</code>
     * @return Whether the partyPromote field is set.
     */
    @java.lang.Override
    public boolean hasPartyPromote() {
      return messageCase_ == 38;
    }
    /**
     * <pre>
     * Promote a new party leader.
     * </pre>
     *
     * <code>.nakama.realtime.PartyPromote party_promote = 38 [json_name = "partyPromote"];</code>
     * @return The partyPromote.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.PartyPromote getPartyPromote() {
      if (partyPromoteBuilder_ == null) {
        if (messageCase_ == 38) {
          return (com.heroiclabs.nakama.rtapi.PartyPromote) message_;
        }
        return com.heroiclabs.nakama.rtapi.PartyPromote.getDefaultInstance();
      } else {
        if (messageCase_ == 38) {
          return partyPromoteBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.rtapi.PartyPromote.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Promote a new party leader.
     * </pre>
     *
     * <code>.nakama.realtime.PartyPromote party_promote = 38 [json_name = "partyPromote"];</code>
     */
    public Builder setPartyPromote(com.heroiclabs.nakama.rtapi.PartyPromote value) {
      if (partyPromoteBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        partyPromoteBuilder_.setMessage(value);
      }
      messageCase_ = 38;
      return this;
    }
    /**
     * <pre>
     * Promote a new party leader.
     * </pre>
     *
     * <code>.nakama.realtime.PartyPromote party_promote = 38 [json_name = "partyPromote"];</code>
     */
    public Builder setPartyPromote(
        com.heroiclabs.nakama.rtapi.PartyPromote.Builder builderForValue) {
      if (partyPromoteBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        partyPromoteBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 38;
      return this;
    }
    /**
     * <pre>
     * Promote a new party leader.
     * </pre>
     *
     * <code>.nakama.realtime.PartyPromote party_promote = 38 [json_name = "partyPromote"];</code>
     */
    public Builder mergePartyPromote(com.heroiclabs.nakama.rtapi.PartyPromote value) {
      if (partyPromoteBuilder_ == null) {
        if (messageCase_ == 38 &&
            message_ != com.heroiclabs.nakama.rtapi.PartyPromote.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.rtapi.PartyPromote.newBuilder((com.heroiclabs.nakama.rtapi.PartyPromote) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 38) {
          partyPromoteBuilder_.mergeFrom(value);
        } else {
          partyPromoteBuilder_.setMessage(value);
        }
      }
      messageCase_ = 38;
      return this;
    }
    /**
     * <pre>
     * Promote a new party leader.
     * </pre>
     *
     * <code>.nakama.realtime.PartyPromote party_promote = 38 [json_name = "partyPromote"];</code>
     */
    public Builder clearPartyPromote() {
      if (partyPromoteBuilder_ == null) {
        if (messageCase_ == 38) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 38) {
          messageCase_ = 0;
          message_ = null;
        }
        partyPromoteBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Promote a new party leader.
     * </pre>
     *
     * <code>.nakama.realtime.PartyPromote party_promote = 38 [json_name = "partyPromote"];</code>
     */
    public com.heroiclabs.nakama.rtapi.PartyPromote.Builder getPartyPromoteBuilder() {
      return getPartyPromoteFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Promote a new party leader.
     * </pre>
     *
     * <code>.nakama.realtime.PartyPromote party_promote = 38 [json_name = "partyPromote"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.PartyPromoteOrBuilder getPartyPromoteOrBuilder() {
      if ((messageCase_ == 38) && (partyPromoteBuilder_ != null)) {
        return partyPromoteBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 38) {
          return (com.heroiclabs.nakama.rtapi.PartyPromote) message_;
        }
        return com.heroiclabs.nakama.rtapi.PartyPromote.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Promote a new party leader.
     * </pre>
     *
     * <code>.nakama.realtime.PartyPromote party_promote = 38 [json_name = "partyPromote"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.PartyPromote, com.heroiclabs.nakama.rtapi.PartyPromote.Builder, com.heroiclabs.nakama.rtapi.PartyPromoteOrBuilder> 
        getPartyPromoteFieldBuilder() {
      if (partyPromoteBuilder_ == null) {
        if (!(messageCase_ == 38)) {
          message_ = com.heroiclabs.nakama.rtapi.PartyPromote.getDefaultInstance();
        }
        partyPromoteBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.rtapi.PartyPromote, com.heroiclabs.nakama.rtapi.PartyPromote.Builder, com.heroiclabs.nakama.rtapi.PartyPromoteOrBuilder>(
                (com.heroiclabs.nakama.rtapi.PartyPromote) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 38;
      onChanged();
      return partyPromoteBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.PartyLeader, com.heroiclabs.nakama.rtapi.PartyLeader.Builder, com.heroiclabs.nakama.rtapi.PartyLeaderOrBuilder> partyLeaderBuilder_;
    /**
     * <pre>
     * Announcement of a new party leader.
     * </pre>
     *
     * <code>.nakama.realtime.PartyLeader party_leader = 39 [json_name = "partyLeader"];</code>
     * @return Whether the partyLeader field is set.
     */
    @java.lang.Override
    public boolean hasPartyLeader() {
      return messageCase_ == 39;
    }
    /**
     * <pre>
     * Announcement of a new party leader.
     * </pre>
     *
     * <code>.nakama.realtime.PartyLeader party_leader = 39 [json_name = "partyLeader"];</code>
     * @return The partyLeader.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.PartyLeader getPartyLeader() {
      if (partyLeaderBuilder_ == null) {
        if (messageCase_ == 39) {
          return (com.heroiclabs.nakama.rtapi.PartyLeader) message_;
        }
        return com.heroiclabs.nakama.rtapi.PartyLeader.getDefaultInstance();
      } else {
        if (messageCase_ == 39) {
          return partyLeaderBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.rtapi.PartyLeader.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Announcement of a new party leader.
     * </pre>
     *
     * <code>.nakama.realtime.PartyLeader party_leader = 39 [json_name = "partyLeader"];</code>
     */
    public Builder setPartyLeader(com.heroiclabs.nakama.rtapi.PartyLeader value) {
      if (partyLeaderBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        partyLeaderBuilder_.setMessage(value);
      }
      messageCase_ = 39;
      return this;
    }
    /**
     * <pre>
     * Announcement of a new party leader.
     * </pre>
     *
     * <code>.nakama.realtime.PartyLeader party_leader = 39 [json_name = "partyLeader"];</code>
     */
    public Builder setPartyLeader(
        com.heroiclabs.nakama.rtapi.PartyLeader.Builder builderForValue) {
      if (partyLeaderBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        partyLeaderBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 39;
      return this;
    }
    /**
     * <pre>
     * Announcement of a new party leader.
     * </pre>
     *
     * <code>.nakama.realtime.PartyLeader party_leader = 39 [json_name = "partyLeader"];</code>
     */
    public Builder mergePartyLeader(com.heroiclabs.nakama.rtapi.PartyLeader value) {
      if (partyLeaderBuilder_ == null) {
        if (messageCase_ == 39 &&
            message_ != com.heroiclabs.nakama.rtapi.PartyLeader.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.rtapi.PartyLeader.newBuilder((com.heroiclabs.nakama.rtapi.PartyLeader) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 39) {
          partyLeaderBuilder_.mergeFrom(value);
        } else {
          partyLeaderBuilder_.setMessage(value);
        }
      }
      messageCase_ = 39;
      return this;
    }
    /**
     * <pre>
     * Announcement of a new party leader.
     * </pre>
     *
     * <code>.nakama.realtime.PartyLeader party_leader = 39 [json_name = "partyLeader"];</code>
     */
    public Builder clearPartyLeader() {
      if (partyLeaderBuilder_ == null) {
        if (messageCase_ == 39) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 39) {
          messageCase_ = 0;
          message_ = null;
        }
        partyLeaderBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Announcement of a new party leader.
     * </pre>
     *
     * <code>.nakama.realtime.PartyLeader party_leader = 39 [json_name = "partyLeader"];</code>
     */
    public com.heroiclabs.nakama.rtapi.PartyLeader.Builder getPartyLeaderBuilder() {
      return getPartyLeaderFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Announcement of a new party leader.
     * </pre>
     *
     * <code>.nakama.realtime.PartyLeader party_leader = 39 [json_name = "partyLeader"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.PartyLeaderOrBuilder getPartyLeaderOrBuilder() {
      if ((messageCase_ == 39) && (partyLeaderBuilder_ != null)) {
        return partyLeaderBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 39) {
          return (com.heroiclabs.nakama.rtapi.PartyLeader) message_;
        }
        return com.heroiclabs.nakama.rtapi.PartyLeader.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Announcement of a new party leader.
     * </pre>
     *
     * <code>.nakama.realtime.PartyLeader party_leader = 39 [json_name = "partyLeader"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.PartyLeader, com.heroiclabs.nakama.rtapi.PartyLeader.Builder, com.heroiclabs.nakama.rtapi.PartyLeaderOrBuilder> 
        getPartyLeaderFieldBuilder() {
      if (partyLeaderBuilder_ == null) {
        if (!(messageCase_ == 39)) {
          message_ = com.heroiclabs.nakama.rtapi.PartyLeader.getDefaultInstance();
        }
        partyLeaderBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.rtapi.PartyLeader, com.heroiclabs.nakama.rtapi.PartyLeader.Builder, com.heroiclabs.nakama.rtapi.PartyLeaderOrBuilder>(
                (com.heroiclabs.nakama.rtapi.PartyLeader) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 39;
      onChanged();
      return partyLeaderBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.PartyAccept, com.heroiclabs.nakama.rtapi.PartyAccept.Builder, com.heroiclabs.nakama.rtapi.PartyAcceptOrBuilder> partyAcceptBuilder_;
    /**
     * <pre>
     * Accept a request to join.
     * </pre>
     *
     * <code>.nakama.realtime.PartyAccept party_accept = 40 [json_name = "partyAccept"];</code>
     * @return Whether the partyAccept field is set.
     */
    @java.lang.Override
    public boolean hasPartyAccept() {
      return messageCase_ == 40;
    }
    /**
     * <pre>
     * Accept a request to join.
     * </pre>
     *
     * <code>.nakama.realtime.PartyAccept party_accept = 40 [json_name = "partyAccept"];</code>
     * @return The partyAccept.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.PartyAccept getPartyAccept() {
      if (partyAcceptBuilder_ == null) {
        if (messageCase_ == 40) {
          return (com.heroiclabs.nakama.rtapi.PartyAccept) message_;
        }
        return com.heroiclabs.nakama.rtapi.PartyAccept.getDefaultInstance();
      } else {
        if (messageCase_ == 40) {
          return partyAcceptBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.rtapi.PartyAccept.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Accept a request to join.
     * </pre>
     *
     * <code>.nakama.realtime.PartyAccept party_accept = 40 [json_name = "partyAccept"];</code>
     */
    public Builder setPartyAccept(com.heroiclabs.nakama.rtapi.PartyAccept value) {
      if (partyAcceptBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        partyAcceptBuilder_.setMessage(value);
      }
      messageCase_ = 40;
      return this;
    }
    /**
     * <pre>
     * Accept a request to join.
     * </pre>
     *
     * <code>.nakama.realtime.PartyAccept party_accept = 40 [json_name = "partyAccept"];</code>
     */
    public Builder setPartyAccept(
        com.heroiclabs.nakama.rtapi.PartyAccept.Builder builderForValue) {
      if (partyAcceptBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        partyAcceptBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 40;
      return this;
    }
    /**
     * <pre>
     * Accept a request to join.
     * </pre>
     *
     * <code>.nakama.realtime.PartyAccept party_accept = 40 [json_name = "partyAccept"];</code>
     */
    public Builder mergePartyAccept(com.heroiclabs.nakama.rtapi.PartyAccept value) {
      if (partyAcceptBuilder_ == null) {
        if (messageCase_ == 40 &&
            message_ != com.heroiclabs.nakama.rtapi.PartyAccept.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.rtapi.PartyAccept.newBuilder((com.heroiclabs.nakama.rtapi.PartyAccept) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 40) {
          partyAcceptBuilder_.mergeFrom(value);
        } else {
          partyAcceptBuilder_.setMessage(value);
        }
      }
      messageCase_ = 40;
      return this;
    }
    /**
     * <pre>
     * Accept a request to join.
     * </pre>
     *
     * <code>.nakama.realtime.PartyAccept party_accept = 40 [json_name = "partyAccept"];</code>
     */
    public Builder clearPartyAccept() {
      if (partyAcceptBuilder_ == null) {
        if (messageCase_ == 40) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 40) {
          messageCase_ = 0;
          message_ = null;
        }
        partyAcceptBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Accept a request to join.
     * </pre>
     *
     * <code>.nakama.realtime.PartyAccept party_accept = 40 [json_name = "partyAccept"];</code>
     */
    public com.heroiclabs.nakama.rtapi.PartyAccept.Builder getPartyAcceptBuilder() {
      return getPartyAcceptFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Accept a request to join.
     * </pre>
     *
     * <code>.nakama.realtime.PartyAccept party_accept = 40 [json_name = "partyAccept"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.PartyAcceptOrBuilder getPartyAcceptOrBuilder() {
      if ((messageCase_ == 40) && (partyAcceptBuilder_ != null)) {
        return partyAcceptBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 40) {
          return (com.heroiclabs.nakama.rtapi.PartyAccept) message_;
        }
        return com.heroiclabs.nakama.rtapi.PartyAccept.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Accept a request to join.
     * </pre>
     *
     * <code>.nakama.realtime.PartyAccept party_accept = 40 [json_name = "partyAccept"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.PartyAccept, com.heroiclabs.nakama.rtapi.PartyAccept.Builder, com.heroiclabs.nakama.rtapi.PartyAcceptOrBuilder> 
        getPartyAcceptFieldBuilder() {
      if (partyAcceptBuilder_ == null) {
        if (!(messageCase_ == 40)) {
          message_ = com.heroiclabs.nakama.rtapi.PartyAccept.getDefaultInstance();
        }
        partyAcceptBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.rtapi.PartyAccept, com.heroiclabs.nakama.rtapi.PartyAccept.Builder, com.heroiclabs.nakama.rtapi.PartyAcceptOrBuilder>(
                (com.heroiclabs.nakama.rtapi.PartyAccept) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 40;
      onChanged();
      return partyAcceptBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.PartyRemove, com.heroiclabs.nakama.rtapi.PartyRemove.Builder, com.heroiclabs.nakama.rtapi.PartyRemoveOrBuilder> partyRemoveBuilder_;
    /**
     * <pre>
     * Kick a party member, or decline a request to join.
     * </pre>
     *
     * <code>.nakama.realtime.PartyRemove party_remove = 41 [json_name = "partyRemove"];</code>
     * @return Whether the partyRemove field is set.
     */
    @java.lang.Override
    public boolean hasPartyRemove() {
      return messageCase_ == 41;
    }
    /**
     * <pre>
     * Kick a party member, or decline a request to join.
     * </pre>
     *
     * <code>.nakama.realtime.PartyRemove party_remove = 41 [json_name = "partyRemove"];</code>
     * @return The partyRemove.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.PartyRemove getPartyRemove() {
      if (partyRemoveBuilder_ == null) {
        if (messageCase_ == 41) {
          return (com.heroiclabs.nakama.rtapi.PartyRemove) message_;
        }
        return com.heroiclabs.nakama.rtapi.PartyRemove.getDefaultInstance();
      } else {
        if (messageCase_ == 41) {
          return partyRemoveBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.rtapi.PartyRemove.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Kick a party member, or decline a request to join.
     * </pre>
     *
     * <code>.nakama.realtime.PartyRemove party_remove = 41 [json_name = "partyRemove"];</code>
     */
    public Builder setPartyRemove(com.heroiclabs.nakama.rtapi.PartyRemove value) {
      if (partyRemoveBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        partyRemoveBuilder_.setMessage(value);
      }
      messageCase_ = 41;
      return this;
    }
    /**
     * <pre>
     * Kick a party member, or decline a request to join.
     * </pre>
     *
     * <code>.nakama.realtime.PartyRemove party_remove = 41 [json_name = "partyRemove"];</code>
     */
    public Builder setPartyRemove(
        com.heroiclabs.nakama.rtapi.PartyRemove.Builder builderForValue) {
      if (partyRemoveBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        partyRemoveBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 41;
      return this;
    }
    /**
     * <pre>
     * Kick a party member, or decline a request to join.
     * </pre>
     *
     * <code>.nakama.realtime.PartyRemove party_remove = 41 [json_name = "partyRemove"];</code>
     */
    public Builder mergePartyRemove(com.heroiclabs.nakama.rtapi.PartyRemove value) {
      if (partyRemoveBuilder_ == null) {
        if (messageCase_ == 41 &&
            message_ != com.heroiclabs.nakama.rtapi.PartyRemove.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.rtapi.PartyRemove.newBuilder((com.heroiclabs.nakama.rtapi.PartyRemove) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 41) {
          partyRemoveBuilder_.mergeFrom(value);
        } else {
          partyRemoveBuilder_.setMessage(value);
        }
      }
      messageCase_ = 41;
      return this;
    }
    /**
     * <pre>
     * Kick a party member, or decline a request to join.
     * </pre>
     *
     * <code>.nakama.realtime.PartyRemove party_remove = 41 [json_name = "partyRemove"];</code>
     */
    public Builder clearPartyRemove() {
      if (partyRemoveBuilder_ == null) {
        if (messageCase_ == 41) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 41) {
          messageCase_ = 0;
          message_ = null;
        }
        partyRemoveBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Kick a party member, or decline a request to join.
     * </pre>
     *
     * <code>.nakama.realtime.PartyRemove party_remove = 41 [json_name = "partyRemove"];</code>
     */
    public com.heroiclabs.nakama.rtapi.PartyRemove.Builder getPartyRemoveBuilder() {
      return getPartyRemoveFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Kick a party member, or decline a request to join.
     * </pre>
     *
     * <code>.nakama.realtime.PartyRemove party_remove = 41 [json_name = "partyRemove"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.PartyRemoveOrBuilder getPartyRemoveOrBuilder() {
      if ((messageCase_ == 41) && (partyRemoveBuilder_ != null)) {
        return partyRemoveBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 41) {
          return (com.heroiclabs.nakama.rtapi.PartyRemove) message_;
        }
        return com.heroiclabs.nakama.rtapi.PartyRemove.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Kick a party member, or decline a request to join.
     * </pre>
     *
     * <code>.nakama.realtime.PartyRemove party_remove = 41 [json_name = "partyRemove"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.PartyRemove, com.heroiclabs.nakama.rtapi.PartyRemove.Builder, com.heroiclabs.nakama.rtapi.PartyRemoveOrBuilder> 
        getPartyRemoveFieldBuilder() {
      if (partyRemoveBuilder_ == null) {
        if (!(messageCase_ == 41)) {
          message_ = com.heroiclabs.nakama.rtapi.PartyRemove.getDefaultInstance();
        }
        partyRemoveBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.rtapi.PartyRemove, com.heroiclabs.nakama.rtapi.PartyRemove.Builder, com.heroiclabs.nakama.rtapi.PartyRemoveOrBuilder>(
                (com.heroiclabs.nakama.rtapi.PartyRemove) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 41;
      onChanged();
      return partyRemoveBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.PartyClose, com.heroiclabs.nakama.rtapi.PartyClose.Builder, com.heroiclabs.nakama.rtapi.PartyCloseOrBuilder> partyCloseBuilder_;
    /**
     * <pre>
     * End a party, kicking all party members and closing it.
     * </pre>
     *
     * <code>.nakama.realtime.PartyClose party_close = 42 [json_name = "partyClose"];</code>
     * @return Whether the partyClose field is set.
     */
    @java.lang.Override
    public boolean hasPartyClose() {
      return messageCase_ == 42;
    }
    /**
     * <pre>
     * End a party, kicking all party members and closing it.
     * </pre>
     *
     * <code>.nakama.realtime.PartyClose party_close = 42 [json_name = "partyClose"];</code>
     * @return The partyClose.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.PartyClose getPartyClose() {
      if (partyCloseBuilder_ == null) {
        if (messageCase_ == 42) {
          return (com.heroiclabs.nakama.rtapi.PartyClose) message_;
        }
        return com.heroiclabs.nakama.rtapi.PartyClose.getDefaultInstance();
      } else {
        if (messageCase_ == 42) {
          return partyCloseBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.rtapi.PartyClose.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * End a party, kicking all party members and closing it.
     * </pre>
     *
     * <code>.nakama.realtime.PartyClose party_close = 42 [json_name = "partyClose"];</code>
     */
    public Builder setPartyClose(com.heroiclabs.nakama.rtapi.PartyClose value) {
      if (partyCloseBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        partyCloseBuilder_.setMessage(value);
      }
      messageCase_ = 42;
      return this;
    }
    /**
     * <pre>
     * End a party, kicking all party members and closing it.
     * </pre>
     *
     * <code>.nakama.realtime.PartyClose party_close = 42 [json_name = "partyClose"];</code>
     */
    public Builder setPartyClose(
        com.heroiclabs.nakama.rtapi.PartyClose.Builder builderForValue) {
      if (partyCloseBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        partyCloseBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 42;
      return this;
    }
    /**
     * <pre>
     * End a party, kicking all party members and closing it.
     * </pre>
     *
     * <code>.nakama.realtime.PartyClose party_close = 42 [json_name = "partyClose"];</code>
     */
    public Builder mergePartyClose(com.heroiclabs.nakama.rtapi.PartyClose value) {
      if (partyCloseBuilder_ == null) {
        if (messageCase_ == 42 &&
            message_ != com.heroiclabs.nakama.rtapi.PartyClose.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.rtapi.PartyClose.newBuilder((com.heroiclabs.nakama.rtapi.PartyClose) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 42) {
          partyCloseBuilder_.mergeFrom(value);
        } else {
          partyCloseBuilder_.setMessage(value);
        }
      }
      messageCase_ = 42;
      return this;
    }
    /**
     * <pre>
     * End a party, kicking all party members and closing it.
     * </pre>
     *
     * <code>.nakama.realtime.PartyClose party_close = 42 [json_name = "partyClose"];</code>
     */
    public Builder clearPartyClose() {
      if (partyCloseBuilder_ == null) {
        if (messageCase_ == 42) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 42) {
          messageCase_ = 0;
          message_ = null;
        }
        partyCloseBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * End a party, kicking all party members and closing it.
     * </pre>
     *
     * <code>.nakama.realtime.PartyClose party_close = 42 [json_name = "partyClose"];</code>
     */
    public com.heroiclabs.nakama.rtapi.PartyClose.Builder getPartyCloseBuilder() {
      return getPartyCloseFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * End a party, kicking all party members and closing it.
     * </pre>
     *
     * <code>.nakama.realtime.PartyClose party_close = 42 [json_name = "partyClose"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.PartyCloseOrBuilder getPartyCloseOrBuilder() {
      if ((messageCase_ == 42) && (partyCloseBuilder_ != null)) {
        return partyCloseBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 42) {
          return (com.heroiclabs.nakama.rtapi.PartyClose) message_;
        }
        return com.heroiclabs.nakama.rtapi.PartyClose.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * End a party, kicking all party members and closing it.
     * </pre>
     *
     * <code>.nakama.realtime.PartyClose party_close = 42 [json_name = "partyClose"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.PartyClose, com.heroiclabs.nakama.rtapi.PartyClose.Builder, com.heroiclabs.nakama.rtapi.PartyCloseOrBuilder> 
        getPartyCloseFieldBuilder() {
      if (partyCloseBuilder_ == null) {
        if (!(messageCase_ == 42)) {
          message_ = com.heroiclabs.nakama.rtapi.PartyClose.getDefaultInstance();
        }
        partyCloseBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.rtapi.PartyClose, com.heroiclabs.nakama.rtapi.PartyClose.Builder, com.heroiclabs.nakama.rtapi.PartyCloseOrBuilder>(
                (com.heroiclabs.nakama.rtapi.PartyClose) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 42;
      onChanged();
      return partyCloseBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.PartyJoinRequestList, com.heroiclabs.nakama.rtapi.PartyJoinRequestList.Builder, com.heroiclabs.nakama.rtapi.PartyJoinRequestListOrBuilder> partyJoinRequestListBuilder_;
    /**
     * <pre>
     * Request a list of pending join requests for a party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyJoinRequestList party_join_request_list = 43 [json_name = "partyJoinRequestList"];</code>
     * @return Whether the partyJoinRequestList field is set.
     */
    @java.lang.Override
    public boolean hasPartyJoinRequestList() {
      return messageCase_ == 43;
    }
    /**
     * <pre>
     * Request a list of pending join requests for a party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyJoinRequestList party_join_request_list = 43 [json_name = "partyJoinRequestList"];</code>
     * @return The partyJoinRequestList.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.PartyJoinRequestList getPartyJoinRequestList() {
      if (partyJoinRequestListBuilder_ == null) {
        if (messageCase_ == 43) {
          return (com.heroiclabs.nakama.rtapi.PartyJoinRequestList) message_;
        }
        return com.heroiclabs.nakama.rtapi.PartyJoinRequestList.getDefaultInstance();
      } else {
        if (messageCase_ == 43) {
          return partyJoinRequestListBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.rtapi.PartyJoinRequestList.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Request a list of pending join requests for a party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyJoinRequestList party_join_request_list = 43 [json_name = "partyJoinRequestList"];</code>
     */
    public Builder setPartyJoinRequestList(com.heroiclabs.nakama.rtapi.PartyJoinRequestList value) {
      if (partyJoinRequestListBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        partyJoinRequestListBuilder_.setMessage(value);
      }
      messageCase_ = 43;
      return this;
    }
    /**
     * <pre>
     * Request a list of pending join requests for a party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyJoinRequestList party_join_request_list = 43 [json_name = "partyJoinRequestList"];</code>
     */
    public Builder setPartyJoinRequestList(
        com.heroiclabs.nakama.rtapi.PartyJoinRequestList.Builder builderForValue) {
      if (partyJoinRequestListBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        partyJoinRequestListBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 43;
      return this;
    }
    /**
     * <pre>
     * Request a list of pending join requests for a party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyJoinRequestList party_join_request_list = 43 [json_name = "partyJoinRequestList"];</code>
     */
    public Builder mergePartyJoinRequestList(com.heroiclabs.nakama.rtapi.PartyJoinRequestList value) {
      if (partyJoinRequestListBuilder_ == null) {
        if (messageCase_ == 43 &&
            message_ != com.heroiclabs.nakama.rtapi.PartyJoinRequestList.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.rtapi.PartyJoinRequestList.newBuilder((com.heroiclabs.nakama.rtapi.PartyJoinRequestList) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 43) {
          partyJoinRequestListBuilder_.mergeFrom(value);
        } else {
          partyJoinRequestListBuilder_.setMessage(value);
        }
      }
      messageCase_ = 43;
      return this;
    }
    /**
     * <pre>
     * Request a list of pending join requests for a party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyJoinRequestList party_join_request_list = 43 [json_name = "partyJoinRequestList"];</code>
     */
    public Builder clearPartyJoinRequestList() {
      if (partyJoinRequestListBuilder_ == null) {
        if (messageCase_ == 43) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 43) {
          messageCase_ = 0;
          message_ = null;
        }
        partyJoinRequestListBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Request a list of pending join requests for a party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyJoinRequestList party_join_request_list = 43 [json_name = "partyJoinRequestList"];</code>
     */
    public com.heroiclabs.nakama.rtapi.PartyJoinRequestList.Builder getPartyJoinRequestListBuilder() {
      return getPartyJoinRequestListFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Request a list of pending join requests for a party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyJoinRequestList party_join_request_list = 43 [json_name = "partyJoinRequestList"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.PartyJoinRequestListOrBuilder getPartyJoinRequestListOrBuilder() {
      if ((messageCase_ == 43) && (partyJoinRequestListBuilder_ != null)) {
        return partyJoinRequestListBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 43) {
          return (com.heroiclabs.nakama.rtapi.PartyJoinRequestList) message_;
        }
        return com.heroiclabs.nakama.rtapi.PartyJoinRequestList.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Request a list of pending join requests for a party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyJoinRequestList party_join_request_list = 43 [json_name = "partyJoinRequestList"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.PartyJoinRequestList, com.heroiclabs.nakama.rtapi.PartyJoinRequestList.Builder, com.heroiclabs.nakama.rtapi.PartyJoinRequestListOrBuilder> 
        getPartyJoinRequestListFieldBuilder() {
      if (partyJoinRequestListBuilder_ == null) {
        if (!(messageCase_ == 43)) {
          message_ = com.heroiclabs.nakama.rtapi.PartyJoinRequestList.getDefaultInstance();
        }
        partyJoinRequestListBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.rtapi.PartyJoinRequestList, com.heroiclabs.nakama.rtapi.PartyJoinRequestList.Builder, com.heroiclabs.nakama.rtapi.PartyJoinRequestListOrBuilder>(
                (com.heroiclabs.nakama.rtapi.PartyJoinRequestList) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 43;
      onChanged();
      return partyJoinRequestListBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.PartyJoinRequest, com.heroiclabs.nakama.rtapi.PartyJoinRequest.Builder, com.heroiclabs.nakama.rtapi.PartyJoinRequestOrBuilder> partyJoinRequestBuilder_;
    /**
     * <pre>
     * Incoming notification for one or more new presences attempting to join the party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyJoinRequest party_join_request = 44 [json_name = "partyJoinRequest"];</code>
     * @return Whether the partyJoinRequest field is set.
     */
    @java.lang.Override
    public boolean hasPartyJoinRequest() {
      return messageCase_ == 44;
    }
    /**
     * <pre>
     * Incoming notification for one or more new presences attempting to join the party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyJoinRequest party_join_request = 44 [json_name = "partyJoinRequest"];</code>
     * @return The partyJoinRequest.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.PartyJoinRequest getPartyJoinRequest() {
      if (partyJoinRequestBuilder_ == null) {
        if (messageCase_ == 44) {
          return (com.heroiclabs.nakama.rtapi.PartyJoinRequest) message_;
        }
        return com.heroiclabs.nakama.rtapi.PartyJoinRequest.getDefaultInstance();
      } else {
        if (messageCase_ == 44) {
          return partyJoinRequestBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.rtapi.PartyJoinRequest.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Incoming notification for one or more new presences attempting to join the party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyJoinRequest party_join_request = 44 [json_name = "partyJoinRequest"];</code>
     */
    public Builder setPartyJoinRequest(com.heroiclabs.nakama.rtapi.PartyJoinRequest value) {
      if (partyJoinRequestBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        partyJoinRequestBuilder_.setMessage(value);
      }
      messageCase_ = 44;
      return this;
    }
    /**
     * <pre>
     * Incoming notification for one or more new presences attempting to join the party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyJoinRequest party_join_request = 44 [json_name = "partyJoinRequest"];</code>
     */
    public Builder setPartyJoinRequest(
        com.heroiclabs.nakama.rtapi.PartyJoinRequest.Builder builderForValue) {
      if (partyJoinRequestBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        partyJoinRequestBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 44;
      return this;
    }
    /**
     * <pre>
     * Incoming notification for one or more new presences attempting to join the party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyJoinRequest party_join_request = 44 [json_name = "partyJoinRequest"];</code>
     */
    public Builder mergePartyJoinRequest(com.heroiclabs.nakama.rtapi.PartyJoinRequest value) {
      if (partyJoinRequestBuilder_ == null) {
        if (messageCase_ == 44 &&
            message_ != com.heroiclabs.nakama.rtapi.PartyJoinRequest.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.rtapi.PartyJoinRequest.newBuilder((com.heroiclabs.nakama.rtapi.PartyJoinRequest) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 44) {
          partyJoinRequestBuilder_.mergeFrom(value);
        } else {
          partyJoinRequestBuilder_.setMessage(value);
        }
      }
      messageCase_ = 44;
      return this;
    }
    /**
     * <pre>
     * Incoming notification for one or more new presences attempting to join the party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyJoinRequest party_join_request = 44 [json_name = "partyJoinRequest"];</code>
     */
    public Builder clearPartyJoinRequest() {
      if (partyJoinRequestBuilder_ == null) {
        if (messageCase_ == 44) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 44) {
          messageCase_ = 0;
          message_ = null;
        }
        partyJoinRequestBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Incoming notification for one or more new presences attempting to join the party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyJoinRequest party_join_request = 44 [json_name = "partyJoinRequest"];</code>
     */
    public com.heroiclabs.nakama.rtapi.PartyJoinRequest.Builder getPartyJoinRequestBuilder() {
      return getPartyJoinRequestFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Incoming notification for one or more new presences attempting to join the party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyJoinRequest party_join_request = 44 [json_name = "partyJoinRequest"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.PartyJoinRequestOrBuilder getPartyJoinRequestOrBuilder() {
      if ((messageCase_ == 44) && (partyJoinRequestBuilder_ != null)) {
        return partyJoinRequestBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 44) {
          return (com.heroiclabs.nakama.rtapi.PartyJoinRequest) message_;
        }
        return com.heroiclabs.nakama.rtapi.PartyJoinRequest.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Incoming notification for one or more new presences attempting to join the party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyJoinRequest party_join_request = 44 [json_name = "partyJoinRequest"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.PartyJoinRequest, com.heroiclabs.nakama.rtapi.PartyJoinRequest.Builder, com.heroiclabs.nakama.rtapi.PartyJoinRequestOrBuilder> 
        getPartyJoinRequestFieldBuilder() {
      if (partyJoinRequestBuilder_ == null) {
        if (!(messageCase_ == 44)) {
          message_ = com.heroiclabs.nakama.rtapi.PartyJoinRequest.getDefaultInstance();
        }
        partyJoinRequestBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.rtapi.PartyJoinRequest, com.heroiclabs.nakama.rtapi.PartyJoinRequest.Builder, com.heroiclabs.nakama.rtapi.PartyJoinRequestOrBuilder>(
                (com.heroiclabs.nakama.rtapi.PartyJoinRequest) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 44;
      onChanged();
      return partyJoinRequestBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.PartyMatchmakerAdd, com.heroiclabs.nakama.rtapi.PartyMatchmakerAdd.Builder, com.heroiclabs.nakama.rtapi.PartyMatchmakerAddOrBuilder> partyMatchmakerAddBuilder_;
    /**
     * <pre>
     * Begin matchmaking as a party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyMatchmakerAdd party_matchmaker_add = 45 [json_name = "partyMatchmakerAdd"];</code>
     * @return Whether the partyMatchmakerAdd field is set.
     */
    @java.lang.Override
    public boolean hasPartyMatchmakerAdd() {
      return messageCase_ == 45;
    }
    /**
     * <pre>
     * Begin matchmaking as a party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyMatchmakerAdd party_matchmaker_add = 45 [json_name = "partyMatchmakerAdd"];</code>
     * @return The partyMatchmakerAdd.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.PartyMatchmakerAdd getPartyMatchmakerAdd() {
      if (partyMatchmakerAddBuilder_ == null) {
        if (messageCase_ == 45) {
          return (com.heroiclabs.nakama.rtapi.PartyMatchmakerAdd) message_;
        }
        return com.heroiclabs.nakama.rtapi.PartyMatchmakerAdd.getDefaultInstance();
      } else {
        if (messageCase_ == 45) {
          return partyMatchmakerAddBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.rtapi.PartyMatchmakerAdd.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Begin matchmaking as a party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyMatchmakerAdd party_matchmaker_add = 45 [json_name = "partyMatchmakerAdd"];</code>
     */
    public Builder setPartyMatchmakerAdd(com.heroiclabs.nakama.rtapi.PartyMatchmakerAdd value) {
      if (partyMatchmakerAddBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        partyMatchmakerAddBuilder_.setMessage(value);
      }
      messageCase_ = 45;
      return this;
    }
    /**
     * <pre>
     * Begin matchmaking as a party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyMatchmakerAdd party_matchmaker_add = 45 [json_name = "partyMatchmakerAdd"];</code>
     */
    public Builder setPartyMatchmakerAdd(
        com.heroiclabs.nakama.rtapi.PartyMatchmakerAdd.Builder builderForValue) {
      if (partyMatchmakerAddBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        partyMatchmakerAddBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 45;
      return this;
    }
    /**
     * <pre>
     * Begin matchmaking as a party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyMatchmakerAdd party_matchmaker_add = 45 [json_name = "partyMatchmakerAdd"];</code>
     */
    public Builder mergePartyMatchmakerAdd(com.heroiclabs.nakama.rtapi.PartyMatchmakerAdd value) {
      if (partyMatchmakerAddBuilder_ == null) {
        if (messageCase_ == 45 &&
            message_ != com.heroiclabs.nakama.rtapi.PartyMatchmakerAdd.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.rtapi.PartyMatchmakerAdd.newBuilder((com.heroiclabs.nakama.rtapi.PartyMatchmakerAdd) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 45) {
          partyMatchmakerAddBuilder_.mergeFrom(value);
        } else {
          partyMatchmakerAddBuilder_.setMessage(value);
        }
      }
      messageCase_ = 45;
      return this;
    }
    /**
     * <pre>
     * Begin matchmaking as a party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyMatchmakerAdd party_matchmaker_add = 45 [json_name = "partyMatchmakerAdd"];</code>
     */
    public Builder clearPartyMatchmakerAdd() {
      if (partyMatchmakerAddBuilder_ == null) {
        if (messageCase_ == 45) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 45) {
          messageCase_ = 0;
          message_ = null;
        }
        partyMatchmakerAddBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Begin matchmaking as a party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyMatchmakerAdd party_matchmaker_add = 45 [json_name = "partyMatchmakerAdd"];</code>
     */
    public com.heroiclabs.nakama.rtapi.PartyMatchmakerAdd.Builder getPartyMatchmakerAddBuilder() {
      return getPartyMatchmakerAddFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Begin matchmaking as a party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyMatchmakerAdd party_matchmaker_add = 45 [json_name = "partyMatchmakerAdd"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.PartyMatchmakerAddOrBuilder getPartyMatchmakerAddOrBuilder() {
      if ((messageCase_ == 45) && (partyMatchmakerAddBuilder_ != null)) {
        return partyMatchmakerAddBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 45) {
          return (com.heroiclabs.nakama.rtapi.PartyMatchmakerAdd) message_;
        }
        return com.heroiclabs.nakama.rtapi.PartyMatchmakerAdd.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Begin matchmaking as a party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyMatchmakerAdd party_matchmaker_add = 45 [json_name = "partyMatchmakerAdd"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.PartyMatchmakerAdd, com.heroiclabs.nakama.rtapi.PartyMatchmakerAdd.Builder, com.heroiclabs.nakama.rtapi.PartyMatchmakerAddOrBuilder> 
        getPartyMatchmakerAddFieldBuilder() {
      if (partyMatchmakerAddBuilder_ == null) {
        if (!(messageCase_ == 45)) {
          message_ = com.heroiclabs.nakama.rtapi.PartyMatchmakerAdd.getDefaultInstance();
        }
        partyMatchmakerAddBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.rtapi.PartyMatchmakerAdd, com.heroiclabs.nakama.rtapi.PartyMatchmakerAdd.Builder, com.heroiclabs.nakama.rtapi.PartyMatchmakerAddOrBuilder>(
                (com.heroiclabs.nakama.rtapi.PartyMatchmakerAdd) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 45;
      onChanged();
      return partyMatchmakerAddBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.PartyMatchmakerRemove, com.heroiclabs.nakama.rtapi.PartyMatchmakerRemove.Builder, com.heroiclabs.nakama.rtapi.PartyMatchmakerRemoveOrBuilder> partyMatchmakerRemoveBuilder_;
    /**
     * <pre>
     * Cancel a party matchmaking process using a ticket.
     * </pre>
     *
     * <code>.nakama.realtime.PartyMatchmakerRemove party_matchmaker_remove = 46 [json_name = "partyMatchmakerRemove"];</code>
     * @return Whether the partyMatchmakerRemove field is set.
     */
    @java.lang.Override
    public boolean hasPartyMatchmakerRemove() {
      return messageCase_ == 46;
    }
    /**
     * <pre>
     * Cancel a party matchmaking process using a ticket.
     * </pre>
     *
     * <code>.nakama.realtime.PartyMatchmakerRemove party_matchmaker_remove = 46 [json_name = "partyMatchmakerRemove"];</code>
     * @return The partyMatchmakerRemove.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.PartyMatchmakerRemove getPartyMatchmakerRemove() {
      if (partyMatchmakerRemoveBuilder_ == null) {
        if (messageCase_ == 46) {
          return (com.heroiclabs.nakama.rtapi.PartyMatchmakerRemove) message_;
        }
        return com.heroiclabs.nakama.rtapi.PartyMatchmakerRemove.getDefaultInstance();
      } else {
        if (messageCase_ == 46) {
          return partyMatchmakerRemoveBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.rtapi.PartyMatchmakerRemove.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Cancel a party matchmaking process using a ticket.
     * </pre>
     *
     * <code>.nakama.realtime.PartyMatchmakerRemove party_matchmaker_remove = 46 [json_name = "partyMatchmakerRemove"];</code>
     */
    public Builder setPartyMatchmakerRemove(com.heroiclabs.nakama.rtapi.PartyMatchmakerRemove value) {
      if (partyMatchmakerRemoveBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        partyMatchmakerRemoveBuilder_.setMessage(value);
      }
      messageCase_ = 46;
      return this;
    }
    /**
     * <pre>
     * Cancel a party matchmaking process using a ticket.
     * </pre>
     *
     * <code>.nakama.realtime.PartyMatchmakerRemove party_matchmaker_remove = 46 [json_name = "partyMatchmakerRemove"];</code>
     */
    public Builder setPartyMatchmakerRemove(
        com.heroiclabs.nakama.rtapi.PartyMatchmakerRemove.Builder builderForValue) {
      if (partyMatchmakerRemoveBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        partyMatchmakerRemoveBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 46;
      return this;
    }
    /**
     * <pre>
     * Cancel a party matchmaking process using a ticket.
     * </pre>
     *
     * <code>.nakama.realtime.PartyMatchmakerRemove party_matchmaker_remove = 46 [json_name = "partyMatchmakerRemove"];</code>
     */
    public Builder mergePartyMatchmakerRemove(com.heroiclabs.nakama.rtapi.PartyMatchmakerRemove value) {
      if (partyMatchmakerRemoveBuilder_ == null) {
        if (messageCase_ == 46 &&
            message_ != com.heroiclabs.nakama.rtapi.PartyMatchmakerRemove.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.rtapi.PartyMatchmakerRemove.newBuilder((com.heroiclabs.nakama.rtapi.PartyMatchmakerRemove) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 46) {
          partyMatchmakerRemoveBuilder_.mergeFrom(value);
        } else {
          partyMatchmakerRemoveBuilder_.setMessage(value);
        }
      }
      messageCase_ = 46;
      return this;
    }
    /**
     * <pre>
     * Cancel a party matchmaking process using a ticket.
     * </pre>
     *
     * <code>.nakama.realtime.PartyMatchmakerRemove party_matchmaker_remove = 46 [json_name = "partyMatchmakerRemove"];</code>
     */
    public Builder clearPartyMatchmakerRemove() {
      if (partyMatchmakerRemoveBuilder_ == null) {
        if (messageCase_ == 46) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 46) {
          messageCase_ = 0;
          message_ = null;
        }
        partyMatchmakerRemoveBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Cancel a party matchmaking process using a ticket.
     * </pre>
     *
     * <code>.nakama.realtime.PartyMatchmakerRemove party_matchmaker_remove = 46 [json_name = "partyMatchmakerRemove"];</code>
     */
    public com.heroiclabs.nakama.rtapi.PartyMatchmakerRemove.Builder getPartyMatchmakerRemoveBuilder() {
      return getPartyMatchmakerRemoveFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Cancel a party matchmaking process using a ticket.
     * </pre>
     *
     * <code>.nakama.realtime.PartyMatchmakerRemove party_matchmaker_remove = 46 [json_name = "partyMatchmakerRemove"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.PartyMatchmakerRemoveOrBuilder getPartyMatchmakerRemoveOrBuilder() {
      if ((messageCase_ == 46) && (partyMatchmakerRemoveBuilder_ != null)) {
        return partyMatchmakerRemoveBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 46) {
          return (com.heroiclabs.nakama.rtapi.PartyMatchmakerRemove) message_;
        }
        return com.heroiclabs.nakama.rtapi.PartyMatchmakerRemove.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Cancel a party matchmaking process using a ticket.
     * </pre>
     *
     * <code>.nakama.realtime.PartyMatchmakerRemove party_matchmaker_remove = 46 [json_name = "partyMatchmakerRemove"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.PartyMatchmakerRemove, com.heroiclabs.nakama.rtapi.PartyMatchmakerRemove.Builder, com.heroiclabs.nakama.rtapi.PartyMatchmakerRemoveOrBuilder> 
        getPartyMatchmakerRemoveFieldBuilder() {
      if (partyMatchmakerRemoveBuilder_ == null) {
        if (!(messageCase_ == 46)) {
          message_ = com.heroiclabs.nakama.rtapi.PartyMatchmakerRemove.getDefaultInstance();
        }
        partyMatchmakerRemoveBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.rtapi.PartyMatchmakerRemove, com.heroiclabs.nakama.rtapi.PartyMatchmakerRemove.Builder, com.heroiclabs.nakama.rtapi.PartyMatchmakerRemoveOrBuilder>(
                (com.heroiclabs.nakama.rtapi.PartyMatchmakerRemove) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 46;
      onChanged();
      return partyMatchmakerRemoveBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.PartyMatchmakerTicket, com.heroiclabs.nakama.rtapi.PartyMatchmakerTicket.Builder, com.heroiclabs.nakama.rtapi.PartyMatchmakerTicketOrBuilder> partyMatchmakerTicketBuilder_;
    /**
     * <pre>
     * A response from starting a new party matchmaking process.
     * </pre>
     *
     * <code>.nakama.realtime.PartyMatchmakerTicket party_matchmaker_ticket = 47 [json_name = "partyMatchmakerTicket"];</code>
     * @return Whether the partyMatchmakerTicket field is set.
     */
    @java.lang.Override
    public boolean hasPartyMatchmakerTicket() {
      return messageCase_ == 47;
    }
    /**
     * <pre>
     * A response from starting a new party matchmaking process.
     * </pre>
     *
     * <code>.nakama.realtime.PartyMatchmakerTicket party_matchmaker_ticket = 47 [json_name = "partyMatchmakerTicket"];</code>
     * @return The partyMatchmakerTicket.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.PartyMatchmakerTicket getPartyMatchmakerTicket() {
      if (partyMatchmakerTicketBuilder_ == null) {
        if (messageCase_ == 47) {
          return (com.heroiclabs.nakama.rtapi.PartyMatchmakerTicket) message_;
        }
        return com.heroiclabs.nakama.rtapi.PartyMatchmakerTicket.getDefaultInstance();
      } else {
        if (messageCase_ == 47) {
          return partyMatchmakerTicketBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.rtapi.PartyMatchmakerTicket.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A response from starting a new party matchmaking process.
     * </pre>
     *
     * <code>.nakama.realtime.PartyMatchmakerTicket party_matchmaker_ticket = 47 [json_name = "partyMatchmakerTicket"];</code>
     */
    public Builder setPartyMatchmakerTicket(com.heroiclabs.nakama.rtapi.PartyMatchmakerTicket value) {
      if (partyMatchmakerTicketBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        partyMatchmakerTicketBuilder_.setMessage(value);
      }
      messageCase_ = 47;
      return this;
    }
    /**
     * <pre>
     * A response from starting a new party matchmaking process.
     * </pre>
     *
     * <code>.nakama.realtime.PartyMatchmakerTicket party_matchmaker_ticket = 47 [json_name = "partyMatchmakerTicket"];</code>
     */
    public Builder setPartyMatchmakerTicket(
        com.heroiclabs.nakama.rtapi.PartyMatchmakerTicket.Builder builderForValue) {
      if (partyMatchmakerTicketBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        partyMatchmakerTicketBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 47;
      return this;
    }
    /**
     * <pre>
     * A response from starting a new party matchmaking process.
     * </pre>
     *
     * <code>.nakama.realtime.PartyMatchmakerTicket party_matchmaker_ticket = 47 [json_name = "partyMatchmakerTicket"];</code>
     */
    public Builder mergePartyMatchmakerTicket(com.heroiclabs.nakama.rtapi.PartyMatchmakerTicket value) {
      if (partyMatchmakerTicketBuilder_ == null) {
        if (messageCase_ == 47 &&
            message_ != com.heroiclabs.nakama.rtapi.PartyMatchmakerTicket.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.rtapi.PartyMatchmakerTicket.newBuilder((com.heroiclabs.nakama.rtapi.PartyMatchmakerTicket) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 47) {
          partyMatchmakerTicketBuilder_.mergeFrom(value);
        } else {
          partyMatchmakerTicketBuilder_.setMessage(value);
        }
      }
      messageCase_ = 47;
      return this;
    }
    /**
     * <pre>
     * A response from starting a new party matchmaking process.
     * </pre>
     *
     * <code>.nakama.realtime.PartyMatchmakerTicket party_matchmaker_ticket = 47 [json_name = "partyMatchmakerTicket"];</code>
     */
    public Builder clearPartyMatchmakerTicket() {
      if (partyMatchmakerTicketBuilder_ == null) {
        if (messageCase_ == 47) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 47) {
          messageCase_ = 0;
          message_ = null;
        }
        partyMatchmakerTicketBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * A response from starting a new party matchmaking process.
     * </pre>
     *
     * <code>.nakama.realtime.PartyMatchmakerTicket party_matchmaker_ticket = 47 [json_name = "partyMatchmakerTicket"];</code>
     */
    public com.heroiclabs.nakama.rtapi.PartyMatchmakerTicket.Builder getPartyMatchmakerTicketBuilder() {
      return getPartyMatchmakerTicketFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * A response from starting a new party matchmaking process.
     * </pre>
     *
     * <code>.nakama.realtime.PartyMatchmakerTicket party_matchmaker_ticket = 47 [json_name = "partyMatchmakerTicket"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.PartyMatchmakerTicketOrBuilder getPartyMatchmakerTicketOrBuilder() {
      if ((messageCase_ == 47) && (partyMatchmakerTicketBuilder_ != null)) {
        return partyMatchmakerTicketBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 47) {
          return (com.heroiclabs.nakama.rtapi.PartyMatchmakerTicket) message_;
        }
        return com.heroiclabs.nakama.rtapi.PartyMatchmakerTicket.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A response from starting a new party matchmaking process.
     * </pre>
     *
     * <code>.nakama.realtime.PartyMatchmakerTicket party_matchmaker_ticket = 47 [json_name = "partyMatchmakerTicket"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.PartyMatchmakerTicket, com.heroiclabs.nakama.rtapi.PartyMatchmakerTicket.Builder, com.heroiclabs.nakama.rtapi.PartyMatchmakerTicketOrBuilder> 
        getPartyMatchmakerTicketFieldBuilder() {
      if (partyMatchmakerTicketBuilder_ == null) {
        if (!(messageCase_ == 47)) {
          message_ = com.heroiclabs.nakama.rtapi.PartyMatchmakerTicket.getDefaultInstance();
        }
        partyMatchmakerTicketBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.rtapi.PartyMatchmakerTicket, com.heroiclabs.nakama.rtapi.PartyMatchmakerTicket.Builder, com.heroiclabs.nakama.rtapi.PartyMatchmakerTicketOrBuilder>(
                (com.heroiclabs.nakama.rtapi.PartyMatchmakerTicket) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 47;
      onChanged();
      return partyMatchmakerTicketBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.PartyData, com.heroiclabs.nakama.rtapi.PartyData.Builder, com.heroiclabs.nakama.rtapi.PartyDataOrBuilder> partyDataBuilder_;
    /**
     * <pre>
     * Incoming party data delivered from the server.
     * </pre>
     *
     * <code>.nakama.realtime.PartyData party_data = 48 [json_name = "partyData"];</code>
     * @return Whether the partyData field is set.
     */
    @java.lang.Override
    public boolean hasPartyData() {
      return messageCase_ == 48;
    }
    /**
     * <pre>
     * Incoming party data delivered from the server.
     * </pre>
     *
     * <code>.nakama.realtime.PartyData party_data = 48 [json_name = "partyData"];</code>
     * @return The partyData.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.PartyData getPartyData() {
      if (partyDataBuilder_ == null) {
        if (messageCase_ == 48) {
          return (com.heroiclabs.nakama.rtapi.PartyData) message_;
        }
        return com.heroiclabs.nakama.rtapi.PartyData.getDefaultInstance();
      } else {
        if (messageCase_ == 48) {
          return partyDataBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.rtapi.PartyData.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Incoming party data delivered from the server.
     * </pre>
     *
     * <code>.nakama.realtime.PartyData party_data = 48 [json_name = "partyData"];</code>
     */
    public Builder setPartyData(com.heroiclabs.nakama.rtapi.PartyData value) {
      if (partyDataBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        partyDataBuilder_.setMessage(value);
      }
      messageCase_ = 48;
      return this;
    }
    /**
     * <pre>
     * Incoming party data delivered from the server.
     * </pre>
     *
     * <code>.nakama.realtime.PartyData party_data = 48 [json_name = "partyData"];</code>
     */
    public Builder setPartyData(
        com.heroiclabs.nakama.rtapi.PartyData.Builder builderForValue) {
      if (partyDataBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        partyDataBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 48;
      return this;
    }
    /**
     * <pre>
     * Incoming party data delivered from the server.
     * </pre>
     *
     * <code>.nakama.realtime.PartyData party_data = 48 [json_name = "partyData"];</code>
     */
    public Builder mergePartyData(com.heroiclabs.nakama.rtapi.PartyData value) {
      if (partyDataBuilder_ == null) {
        if (messageCase_ == 48 &&
            message_ != com.heroiclabs.nakama.rtapi.PartyData.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.rtapi.PartyData.newBuilder((com.heroiclabs.nakama.rtapi.PartyData) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 48) {
          partyDataBuilder_.mergeFrom(value);
        } else {
          partyDataBuilder_.setMessage(value);
        }
      }
      messageCase_ = 48;
      return this;
    }
    /**
     * <pre>
     * Incoming party data delivered from the server.
     * </pre>
     *
     * <code>.nakama.realtime.PartyData party_data = 48 [json_name = "partyData"];</code>
     */
    public Builder clearPartyData() {
      if (partyDataBuilder_ == null) {
        if (messageCase_ == 48) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 48) {
          messageCase_ = 0;
          message_ = null;
        }
        partyDataBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Incoming party data delivered from the server.
     * </pre>
     *
     * <code>.nakama.realtime.PartyData party_data = 48 [json_name = "partyData"];</code>
     */
    public com.heroiclabs.nakama.rtapi.PartyData.Builder getPartyDataBuilder() {
      return getPartyDataFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Incoming party data delivered from the server.
     * </pre>
     *
     * <code>.nakama.realtime.PartyData party_data = 48 [json_name = "partyData"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.PartyDataOrBuilder getPartyDataOrBuilder() {
      if ((messageCase_ == 48) && (partyDataBuilder_ != null)) {
        return partyDataBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 48) {
          return (com.heroiclabs.nakama.rtapi.PartyData) message_;
        }
        return com.heroiclabs.nakama.rtapi.PartyData.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Incoming party data delivered from the server.
     * </pre>
     *
     * <code>.nakama.realtime.PartyData party_data = 48 [json_name = "partyData"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.PartyData, com.heroiclabs.nakama.rtapi.PartyData.Builder, com.heroiclabs.nakama.rtapi.PartyDataOrBuilder> 
        getPartyDataFieldBuilder() {
      if (partyDataBuilder_ == null) {
        if (!(messageCase_ == 48)) {
          message_ = com.heroiclabs.nakama.rtapi.PartyData.getDefaultInstance();
        }
        partyDataBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.rtapi.PartyData, com.heroiclabs.nakama.rtapi.PartyData.Builder, com.heroiclabs.nakama.rtapi.PartyDataOrBuilder>(
                (com.heroiclabs.nakama.rtapi.PartyData) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 48;
      onChanged();
      return partyDataBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.PartyDataSend, com.heroiclabs.nakama.rtapi.PartyDataSend.Builder, com.heroiclabs.nakama.rtapi.PartyDataSendOrBuilder> partyDataSendBuilder_;
    /**
     * <pre>
     * A client to server request to send data to a party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyDataSend party_data_send = 49 [json_name = "partyDataSend"];</code>
     * @return Whether the partyDataSend field is set.
     */
    @java.lang.Override
    public boolean hasPartyDataSend() {
      return messageCase_ == 49;
    }
    /**
     * <pre>
     * A client to server request to send data to a party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyDataSend party_data_send = 49 [json_name = "partyDataSend"];</code>
     * @return The partyDataSend.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.PartyDataSend getPartyDataSend() {
      if (partyDataSendBuilder_ == null) {
        if (messageCase_ == 49) {
          return (com.heroiclabs.nakama.rtapi.PartyDataSend) message_;
        }
        return com.heroiclabs.nakama.rtapi.PartyDataSend.getDefaultInstance();
      } else {
        if (messageCase_ == 49) {
          return partyDataSendBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.rtapi.PartyDataSend.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A client to server request to send data to a party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyDataSend party_data_send = 49 [json_name = "partyDataSend"];</code>
     */
    public Builder setPartyDataSend(com.heroiclabs.nakama.rtapi.PartyDataSend value) {
      if (partyDataSendBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        partyDataSendBuilder_.setMessage(value);
      }
      messageCase_ = 49;
      return this;
    }
    /**
     * <pre>
     * A client to server request to send data to a party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyDataSend party_data_send = 49 [json_name = "partyDataSend"];</code>
     */
    public Builder setPartyDataSend(
        com.heroiclabs.nakama.rtapi.PartyDataSend.Builder builderForValue) {
      if (partyDataSendBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        partyDataSendBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 49;
      return this;
    }
    /**
     * <pre>
     * A client to server request to send data to a party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyDataSend party_data_send = 49 [json_name = "partyDataSend"];</code>
     */
    public Builder mergePartyDataSend(com.heroiclabs.nakama.rtapi.PartyDataSend value) {
      if (partyDataSendBuilder_ == null) {
        if (messageCase_ == 49 &&
            message_ != com.heroiclabs.nakama.rtapi.PartyDataSend.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.rtapi.PartyDataSend.newBuilder((com.heroiclabs.nakama.rtapi.PartyDataSend) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 49) {
          partyDataSendBuilder_.mergeFrom(value);
        } else {
          partyDataSendBuilder_.setMessage(value);
        }
      }
      messageCase_ = 49;
      return this;
    }
    /**
     * <pre>
     * A client to server request to send data to a party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyDataSend party_data_send = 49 [json_name = "partyDataSend"];</code>
     */
    public Builder clearPartyDataSend() {
      if (partyDataSendBuilder_ == null) {
        if (messageCase_ == 49) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 49) {
          messageCase_ = 0;
          message_ = null;
        }
        partyDataSendBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * A client to server request to send data to a party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyDataSend party_data_send = 49 [json_name = "partyDataSend"];</code>
     */
    public com.heroiclabs.nakama.rtapi.PartyDataSend.Builder getPartyDataSendBuilder() {
      return getPartyDataSendFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * A client to server request to send data to a party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyDataSend party_data_send = 49 [json_name = "partyDataSend"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.PartyDataSendOrBuilder getPartyDataSendOrBuilder() {
      if ((messageCase_ == 49) && (partyDataSendBuilder_ != null)) {
        return partyDataSendBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 49) {
          return (com.heroiclabs.nakama.rtapi.PartyDataSend) message_;
        }
        return com.heroiclabs.nakama.rtapi.PartyDataSend.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A client to server request to send data to a party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyDataSend party_data_send = 49 [json_name = "partyDataSend"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.PartyDataSend, com.heroiclabs.nakama.rtapi.PartyDataSend.Builder, com.heroiclabs.nakama.rtapi.PartyDataSendOrBuilder> 
        getPartyDataSendFieldBuilder() {
      if (partyDataSendBuilder_ == null) {
        if (!(messageCase_ == 49)) {
          message_ = com.heroiclabs.nakama.rtapi.PartyDataSend.getDefaultInstance();
        }
        partyDataSendBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.rtapi.PartyDataSend, com.heroiclabs.nakama.rtapi.PartyDataSend.Builder, com.heroiclabs.nakama.rtapi.PartyDataSendOrBuilder>(
                (com.heroiclabs.nakama.rtapi.PartyDataSend) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 49;
      onChanged();
      return partyDataSendBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.PartyPresenceEvent, com.heroiclabs.nakama.rtapi.PartyPresenceEvent.Builder, com.heroiclabs.nakama.rtapi.PartyPresenceEventOrBuilder> partyPresenceEventBuilder_;
    /**
     * <pre>
     * Presence update for a particular party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyPresenceEvent party_presence_event = 50 [json_name = "partyPresenceEvent"];</code>
     * @return Whether the partyPresenceEvent field is set.
     */
    @java.lang.Override
    public boolean hasPartyPresenceEvent() {
      return messageCase_ == 50;
    }
    /**
     * <pre>
     * Presence update for a particular party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyPresenceEvent party_presence_event = 50 [json_name = "partyPresenceEvent"];</code>
     * @return The partyPresenceEvent.
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.PartyPresenceEvent getPartyPresenceEvent() {
      if (partyPresenceEventBuilder_ == null) {
        if (messageCase_ == 50) {
          return (com.heroiclabs.nakama.rtapi.PartyPresenceEvent) message_;
        }
        return com.heroiclabs.nakama.rtapi.PartyPresenceEvent.getDefaultInstance();
      } else {
        if (messageCase_ == 50) {
          return partyPresenceEventBuilder_.getMessage();
        }
        return com.heroiclabs.nakama.rtapi.PartyPresenceEvent.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Presence update for a particular party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyPresenceEvent party_presence_event = 50 [json_name = "partyPresenceEvent"];</code>
     */
    public Builder setPartyPresenceEvent(com.heroiclabs.nakama.rtapi.PartyPresenceEvent value) {
      if (partyPresenceEventBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        message_ = value;
        onChanged();
      } else {
        partyPresenceEventBuilder_.setMessage(value);
      }
      messageCase_ = 50;
      return this;
    }
    /**
     * <pre>
     * Presence update for a particular party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyPresenceEvent party_presence_event = 50 [json_name = "partyPresenceEvent"];</code>
     */
    public Builder setPartyPresenceEvent(
        com.heroiclabs.nakama.rtapi.PartyPresenceEvent.Builder builderForValue) {
      if (partyPresenceEventBuilder_ == null) {
        message_ = builderForValue.build();
        onChanged();
      } else {
        partyPresenceEventBuilder_.setMessage(builderForValue.build());
      }
      messageCase_ = 50;
      return this;
    }
    /**
     * <pre>
     * Presence update for a particular party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyPresenceEvent party_presence_event = 50 [json_name = "partyPresenceEvent"];</code>
     */
    public Builder mergePartyPresenceEvent(com.heroiclabs.nakama.rtapi.PartyPresenceEvent value) {
      if (partyPresenceEventBuilder_ == null) {
        if (messageCase_ == 50 &&
            message_ != com.heroiclabs.nakama.rtapi.PartyPresenceEvent.getDefaultInstance()) {
          message_ = com.heroiclabs.nakama.rtapi.PartyPresenceEvent.newBuilder((com.heroiclabs.nakama.rtapi.PartyPresenceEvent) message_)
              .mergeFrom(value).buildPartial();
        } else {
          message_ = value;
        }
        onChanged();
      } else {
        if (messageCase_ == 50) {
          partyPresenceEventBuilder_.mergeFrom(value);
        } else {
          partyPresenceEventBuilder_.setMessage(value);
        }
      }
      messageCase_ = 50;
      return this;
    }
    /**
     * <pre>
     * Presence update for a particular party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyPresenceEvent party_presence_event = 50 [json_name = "partyPresenceEvent"];</code>
     */
    public Builder clearPartyPresenceEvent() {
      if (partyPresenceEventBuilder_ == null) {
        if (messageCase_ == 50) {
          messageCase_ = 0;
          message_ = null;
          onChanged();
        }
      } else {
        if (messageCase_ == 50) {
          messageCase_ = 0;
          message_ = null;
        }
        partyPresenceEventBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Presence update for a particular party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyPresenceEvent party_presence_event = 50 [json_name = "partyPresenceEvent"];</code>
     */
    public com.heroiclabs.nakama.rtapi.PartyPresenceEvent.Builder getPartyPresenceEventBuilder() {
      return getPartyPresenceEventFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Presence update for a particular party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyPresenceEvent party_presence_event = 50 [json_name = "partyPresenceEvent"];</code>
     */
    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.PartyPresenceEventOrBuilder getPartyPresenceEventOrBuilder() {
      if ((messageCase_ == 50) && (partyPresenceEventBuilder_ != null)) {
        return partyPresenceEventBuilder_.getMessageOrBuilder();
      } else {
        if (messageCase_ == 50) {
          return (com.heroiclabs.nakama.rtapi.PartyPresenceEvent) message_;
        }
        return com.heroiclabs.nakama.rtapi.PartyPresenceEvent.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Presence update for a particular party.
     * </pre>
     *
     * <code>.nakama.realtime.PartyPresenceEvent party_presence_event = 50 [json_name = "partyPresenceEvent"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.heroiclabs.nakama.rtapi.PartyPresenceEvent, com.heroiclabs.nakama.rtapi.PartyPresenceEvent.Builder, com.heroiclabs.nakama.rtapi.PartyPresenceEventOrBuilder> 
        getPartyPresenceEventFieldBuilder() {
      if (partyPresenceEventBuilder_ == null) {
        if (!(messageCase_ == 50)) {
          message_ = com.heroiclabs.nakama.rtapi.PartyPresenceEvent.getDefaultInstance();
        }
        partyPresenceEventBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.heroiclabs.nakama.rtapi.PartyPresenceEvent, com.heroiclabs.nakama.rtapi.PartyPresenceEvent.Builder, com.heroiclabs.nakama.rtapi.PartyPresenceEventOrBuilder>(
                (com.heroiclabs.nakama.rtapi.PartyPresenceEvent) message_,
                getParentForChildren(),
                isClean());
        message_ = null;
      }
      messageCase_ = 50;
      onChanged();
      return partyPresenceEventBuilder_;
    }

    // @@protoc_insertion_point(builder_scope:nakama.realtime.Envelope)
  }

  // @@protoc_insertion_point(class_scope:nakama.realtime.Envelope)
  private static final com.heroiclabs.nakama.rtapi.Envelope DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.heroiclabs.nakama.rtapi.Envelope();
  }

  public static com.heroiclabs.nakama.rtapi.Envelope getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Envelope>
      PARSER = new com.google.protobuf.AbstractParser<Envelope>() {
    @java.lang.Override
    public Envelope parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<Envelope> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Envelope> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.Envelope getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

