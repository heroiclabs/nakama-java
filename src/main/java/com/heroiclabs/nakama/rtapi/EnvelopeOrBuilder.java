// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: github.com/heroiclabs/nakama-common/rtapi/realtime.proto
// Protobuf Java Version: 4.28.2

package com.heroiclabs.nakama.rtapi;

public interface EnvelopeOrBuilder extends
    // @@protoc_insertion_point(interface_extends:nakama.realtime.Envelope)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>string cid = 1 [json_name = "cid"];</code>
   * @return The cid.
   */
  java.lang.String getCid();
  /**
   * <code>string cid = 1 [json_name = "cid"];</code>
   * @return The bytes for cid.
   */
  com.google.protobuf.ByteString
      getCidBytes();

  /**
   * <pre>
   * A response from a channel join operation.
   * </pre>
   *
   * <code>.nakama.realtime.Channel channel = 2 [json_name = "channel"];</code>
   * @return Whether the channel field is set.
   */
  boolean hasChannel();
  /**
   * <pre>
   * A response from a channel join operation.
   * </pre>
   *
   * <code>.nakama.realtime.Channel channel = 2 [json_name = "channel"];</code>
   * @return The channel.
   */
  com.heroiclabs.nakama.rtapi.Channel getChannel();
  /**
   * <pre>
   * A response from a channel join operation.
   * </pre>
   *
   * <code>.nakama.realtime.Channel channel = 2 [json_name = "channel"];</code>
   */
  com.heroiclabs.nakama.rtapi.ChannelOrBuilder getChannelOrBuilder();

  /**
   * <pre>
   * Join a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelJoin channel_join = 3 [json_name = "channelJoin"];</code>
   * @return Whether the channelJoin field is set.
   */
  boolean hasChannelJoin();
  /**
   * <pre>
   * Join a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelJoin channel_join = 3 [json_name = "channelJoin"];</code>
   * @return The channelJoin.
   */
  com.heroiclabs.nakama.rtapi.ChannelJoin getChannelJoin();
  /**
   * <pre>
   * Join a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelJoin channel_join = 3 [json_name = "channelJoin"];</code>
   */
  com.heroiclabs.nakama.rtapi.ChannelJoinOrBuilder getChannelJoinOrBuilder();

  /**
   * <pre>
   * Leave a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelLeave channel_leave = 4 [json_name = "channelLeave"];</code>
   * @return Whether the channelLeave field is set.
   */
  boolean hasChannelLeave();
  /**
   * <pre>
   * Leave a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelLeave channel_leave = 4 [json_name = "channelLeave"];</code>
   * @return The channelLeave.
   */
  com.heroiclabs.nakama.rtapi.ChannelLeave getChannelLeave();
  /**
   * <pre>
   * Leave a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelLeave channel_leave = 4 [json_name = "channelLeave"];</code>
   */
  com.heroiclabs.nakama.rtapi.ChannelLeaveOrBuilder getChannelLeaveOrBuilder();

  /**
   * <pre>
   * An incoming message on a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.api.ChannelMessage channel_message = 5 [json_name = "channelMessage"];</code>
   * @return Whether the channelMessage field is set.
   */
  boolean hasChannelMessage();
  /**
   * <pre>
   * An incoming message on a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.api.ChannelMessage channel_message = 5 [json_name = "channelMessage"];</code>
   * @return The channelMessage.
   */
  com.heroiclabs.nakama.api.ChannelMessage getChannelMessage();
  /**
   * <pre>
   * An incoming message on a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.api.ChannelMessage channel_message = 5 [json_name = "channelMessage"];</code>
   */
  com.heroiclabs.nakama.api.ChannelMessageOrBuilder getChannelMessageOrBuilder();

  /**
   * <pre>
   * An acknowledgement received in response to sending a message on a chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageAck channel_message_ack = 6 [json_name = "channelMessageAck"];</code>
   * @return Whether the channelMessageAck field is set.
   */
  boolean hasChannelMessageAck();
  /**
   * <pre>
   * An acknowledgement received in response to sending a message on a chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageAck channel_message_ack = 6 [json_name = "channelMessageAck"];</code>
   * @return The channelMessageAck.
   */
  com.heroiclabs.nakama.rtapi.ChannelMessageAck getChannelMessageAck();
  /**
   * <pre>
   * An acknowledgement received in response to sending a message on a chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageAck channel_message_ack = 6 [json_name = "channelMessageAck"];</code>
   */
  com.heroiclabs.nakama.rtapi.ChannelMessageAckOrBuilder getChannelMessageAckOrBuilder();

  /**
   * <pre>
   * Send a message to a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageSend channel_message_send = 7 [json_name = "channelMessageSend"];</code>
   * @return Whether the channelMessageSend field is set.
   */
  boolean hasChannelMessageSend();
  /**
   * <pre>
   * Send a message to a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageSend channel_message_send = 7 [json_name = "channelMessageSend"];</code>
   * @return The channelMessageSend.
   */
  com.heroiclabs.nakama.rtapi.ChannelMessageSend getChannelMessageSend();
  /**
   * <pre>
   * Send a message to a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageSend channel_message_send = 7 [json_name = "channelMessageSend"];</code>
   */
  com.heroiclabs.nakama.rtapi.ChannelMessageSendOrBuilder getChannelMessageSendOrBuilder();

  /**
   * <pre>
   * Update a message previously sent to a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageUpdate channel_message_update = 8 [json_name = "channelMessageUpdate"];</code>
   * @return Whether the channelMessageUpdate field is set.
   */
  boolean hasChannelMessageUpdate();
  /**
   * <pre>
   * Update a message previously sent to a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageUpdate channel_message_update = 8 [json_name = "channelMessageUpdate"];</code>
   * @return The channelMessageUpdate.
   */
  com.heroiclabs.nakama.rtapi.ChannelMessageUpdate getChannelMessageUpdate();
  /**
   * <pre>
   * Update a message previously sent to a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageUpdate channel_message_update = 8 [json_name = "channelMessageUpdate"];</code>
   */
  com.heroiclabs.nakama.rtapi.ChannelMessageUpdateOrBuilder getChannelMessageUpdateOrBuilder();

  /**
   * <pre>
   * Remove a message previously sent to a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageRemove channel_message_remove = 9 [json_name = "channelMessageRemove"];</code>
   * @return Whether the channelMessageRemove field is set.
   */
  boolean hasChannelMessageRemove();
  /**
   * <pre>
   * Remove a message previously sent to a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageRemove channel_message_remove = 9 [json_name = "channelMessageRemove"];</code>
   * @return The channelMessageRemove.
   */
  com.heroiclabs.nakama.rtapi.ChannelMessageRemove getChannelMessageRemove();
  /**
   * <pre>
   * Remove a message previously sent to a realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelMessageRemove channel_message_remove = 9 [json_name = "channelMessageRemove"];</code>
   */
  com.heroiclabs.nakama.rtapi.ChannelMessageRemoveOrBuilder getChannelMessageRemoveOrBuilder();

  /**
   * <pre>
   * Presence update for a particular realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelPresenceEvent channel_presence_event = 10 [json_name = "channelPresenceEvent"];</code>
   * @return Whether the channelPresenceEvent field is set.
   */
  boolean hasChannelPresenceEvent();
  /**
   * <pre>
   * Presence update for a particular realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelPresenceEvent channel_presence_event = 10 [json_name = "channelPresenceEvent"];</code>
   * @return The channelPresenceEvent.
   */
  com.heroiclabs.nakama.rtapi.ChannelPresenceEvent getChannelPresenceEvent();
  /**
   * <pre>
   * Presence update for a particular realtime chat channel.
   * </pre>
   *
   * <code>.nakama.realtime.ChannelPresenceEvent channel_presence_event = 10 [json_name = "channelPresenceEvent"];</code>
   */
  com.heroiclabs.nakama.rtapi.ChannelPresenceEventOrBuilder getChannelPresenceEventOrBuilder();

  /**
   * <pre>
   * Describes an error which occurred on the server.
   * </pre>
   *
   * <code>.nakama.realtime.Error error = 11 [json_name = "error"];</code>
   * @return Whether the error field is set.
   */
  boolean hasError();
  /**
   * <pre>
   * Describes an error which occurred on the server.
   * </pre>
   *
   * <code>.nakama.realtime.Error error = 11 [json_name = "error"];</code>
   * @return The error.
   */
  com.heroiclabs.nakama.rtapi.Error getError();
  /**
   * <pre>
   * Describes an error which occurred on the server.
   * </pre>
   *
   * <code>.nakama.realtime.Error error = 11 [json_name = "error"];</code>
   */
  com.heroiclabs.nakama.rtapi.ErrorOrBuilder getErrorOrBuilder();

  /**
   * <pre>
   * Incoming information about a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.Match match = 12 [json_name = "match"];</code>
   * @return Whether the match field is set.
   */
  boolean hasMatch();
  /**
   * <pre>
   * Incoming information about a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.Match match = 12 [json_name = "match"];</code>
   * @return The match.
   */
  com.heroiclabs.nakama.rtapi.Match getMatch();
  /**
   * <pre>
   * Incoming information about a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.Match match = 12 [json_name = "match"];</code>
   */
  com.heroiclabs.nakama.rtapi.MatchOrBuilder getMatchOrBuilder();

  /**
   * <pre>
   * A client to server request to create a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchCreate match_create = 13 [json_name = "matchCreate"];</code>
   * @return Whether the matchCreate field is set.
   */
  boolean hasMatchCreate();
  /**
   * <pre>
   * A client to server request to create a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchCreate match_create = 13 [json_name = "matchCreate"];</code>
   * @return The matchCreate.
   */
  com.heroiclabs.nakama.rtapi.MatchCreate getMatchCreate();
  /**
   * <pre>
   * A client to server request to create a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchCreate match_create = 13 [json_name = "matchCreate"];</code>
   */
  com.heroiclabs.nakama.rtapi.MatchCreateOrBuilder getMatchCreateOrBuilder();

  /**
   * <pre>
   * Incoming realtime match data delivered from the server.
   * </pre>
   *
   * <code>.nakama.realtime.MatchData match_data = 14 [json_name = "matchData"];</code>
   * @return Whether the matchData field is set.
   */
  boolean hasMatchData();
  /**
   * <pre>
   * Incoming realtime match data delivered from the server.
   * </pre>
   *
   * <code>.nakama.realtime.MatchData match_data = 14 [json_name = "matchData"];</code>
   * @return The matchData.
   */
  com.heroiclabs.nakama.rtapi.MatchData getMatchData();
  /**
   * <pre>
   * Incoming realtime match data delivered from the server.
   * </pre>
   *
   * <code>.nakama.realtime.MatchData match_data = 14 [json_name = "matchData"];</code>
   */
  com.heroiclabs.nakama.rtapi.MatchDataOrBuilder getMatchDataOrBuilder();

  /**
   * <pre>
   * A client to server request to send data to a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchDataSend match_data_send = 15 [json_name = "matchDataSend"];</code>
   * @return Whether the matchDataSend field is set.
   */
  boolean hasMatchDataSend();
  /**
   * <pre>
   * A client to server request to send data to a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchDataSend match_data_send = 15 [json_name = "matchDataSend"];</code>
   * @return The matchDataSend.
   */
  com.heroiclabs.nakama.rtapi.MatchDataSend getMatchDataSend();
  /**
   * <pre>
   * A client to server request to send data to a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchDataSend match_data_send = 15 [json_name = "matchDataSend"];</code>
   */
  com.heroiclabs.nakama.rtapi.MatchDataSendOrBuilder getMatchDataSendOrBuilder();

  /**
   * <pre>
   * A client to server request to join a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchJoin match_join = 16 [json_name = "matchJoin"];</code>
   * @return Whether the matchJoin field is set.
   */
  boolean hasMatchJoin();
  /**
   * <pre>
   * A client to server request to join a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchJoin match_join = 16 [json_name = "matchJoin"];</code>
   * @return The matchJoin.
   */
  com.heroiclabs.nakama.rtapi.MatchJoin getMatchJoin();
  /**
   * <pre>
   * A client to server request to join a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchJoin match_join = 16 [json_name = "matchJoin"];</code>
   */
  com.heroiclabs.nakama.rtapi.MatchJoinOrBuilder getMatchJoinOrBuilder();

  /**
   * <pre>
   * A client to server request to leave a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchLeave match_leave = 17 [json_name = "matchLeave"];</code>
   * @return Whether the matchLeave field is set.
   */
  boolean hasMatchLeave();
  /**
   * <pre>
   * A client to server request to leave a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchLeave match_leave = 17 [json_name = "matchLeave"];</code>
   * @return The matchLeave.
   */
  com.heroiclabs.nakama.rtapi.MatchLeave getMatchLeave();
  /**
   * <pre>
   * A client to server request to leave a realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchLeave match_leave = 17 [json_name = "matchLeave"];</code>
   */
  com.heroiclabs.nakama.rtapi.MatchLeaveOrBuilder getMatchLeaveOrBuilder();

  /**
   * <pre>
   * Presence update for a particular realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchPresenceEvent match_presence_event = 18 [json_name = "matchPresenceEvent"];</code>
   * @return Whether the matchPresenceEvent field is set.
   */
  boolean hasMatchPresenceEvent();
  /**
   * <pre>
   * Presence update for a particular realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchPresenceEvent match_presence_event = 18 [json_name = "matchPresenceEvent"];</code>
   * @return The matchPresenceEvent.
   */
  com.heroiclabs.nakama.rtapi.MatchPresenceEvent getMatchPresenceEvent();
  /**
   * <pre>
   * Presence update for a particular realtime match.
   * </pre>
   *
   * <code>.nakama.realtime.MatchPresenceEvent match_presence_event = 18 [json_name = "matchPresenceEvent"];</code>
   */
  com.heroiclabs.nakama.rtapi.MatchPresenceEventOrBuilder getMatchPresenceEventOrBuilder();

  /**
   * <pre>
   * Submit a new matchmaking process request.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerAdd matchmaker_add = 19 [json_name = "matchmakerAdd"];</code>
   * @return Whether the matchmakerAdd field is set.
   */
  boolean hasMatchmakerAdd();
  /**
   * <pre>
   * Submit a new matchmaking process request.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerAdd matchmaker_add = 19 [json_name = "matchmakerAdd"];</code>
   * @return The matchmakerAdd.
   */
  com.heroiclabs.nakama.rtapi.MatchmakerAdd getMatchmakerAdd();
  /**
   * <pre>
   * Submit a new matchmaking process request.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerAdd matchmaker_add = 19 [json_name = "matchmakerAdd"];</code>
   */
  com.heroiclabs.nakama.rtapi.MatchmakerAddOrBuilder getMatchmakerAddOrBuilder();

  /**
   * <pre>
   * A successful matchmaking result.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerMatched matchmaker_matched = 20 [json_name = "matchmakerMatched"];</code>
   * @return Whether the matchmakerMatched field is set.
   */
  boolean hasMatchmakerMatched();
  /**
   * <pre>
   * A successful matchmaking result.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerMatched matchmaker_matched = 20 [json_name = "matchmakerMatched"];</code>
   * @return The matchmakerMatched.
   */
  com.heroiclabs.nakama.rtapi.MatchmakerMatched getMatchmakerMatched();
  /**
   * <pre>
   * A successful matchmaking result.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerMatched matchmaker_matched = 20 [json_name = "matchmakerMatched"];</code>
   */
  com.heroiclabs.nakama.rtapi.MatchmakerMatchedOrBuilder getMatchmakerMatchedOrBuilder();

  /**
   * <pre>
   * Cancel a matchmaking process using a ticket.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerRemove matchmaker_remove = 21 [json_name = "matchmakerRemove"];</code>
   * @return Whether the matchmakerRemove field is set.
   */
  boolean hasMatchmakerRemove();
  /**
   * <pre>
   * Cancel a matchmaking process using a ticket.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerRemove matchmaker_remove = 21 [json_name = "matchmakerRemove"];</code>
   * @return The matchmakerRemove.
   */
  com.heroiclabs.nakama.rtapi.MatchmakerRemove getMatchmakerRemove();
  /**
   * <pre>
   * Cancel a matchmaking process using a ticket.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerRemove matchmaker_remove = 21 [json_name = "matchmakerRemove"];</code>
   */
  com.heroiclabs.nakama.rtapi.MatchmakerRemoveOrBuilder getMatchmakerRemoveOrBuilder();

  /**
   * <pre>
   * A response from starting a new matchmaking process.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerTicket matchmaker_ticket = 22 [json_name = "matchmakerTicket"];</code>
   * @return Whether the matchmakerTicket field is set.
   */
  boolean hasMatchmakerTicket();
  /**
   * <pre>
   * A response from starting a new matchmaking process.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerTicket matchmaker_ticket = 22 [json_name = "matchmakerTicket"];</code>
   * @return The matchmakerTicket.
   */
  com.heroiclabs.nakama.rtapi.MatchmakerTicket getMatchmakerTicket();
  /**
   * <pre>
   * A response from starting a new matchmaking process.
   * </pre>
   *
   * <code>.nakama.realtime.MatchmakerTicket matchmaker_ticket = 22 [json_name = "matchmakerTicket"];</code>
   */
  com.heroiclabs.nakama.rtapi.MatchmakerTicketOrBuilder getMatchmakerTicketOrBuilder();

  /**
   * <pre>
   * Notifications send by the server.
   * </pre>
   *
   * <code>.nakama.realtime.Notifications notifications = 23 [json_name = "notifications"];</code>
   * @return Whether the notifications field is set.
   */
  boolean hasNotifications();
  /**
   * <pre>
   * Notifications send by the server.
   * </pre>
   *
   * <code>.nakama.realtime.Notifications notifications = 23 [json_name = "notifications"];</code>
   * @return The notifications.
   */
  com.heroiclabs.nakama.rtapi.Notifications getNotifications();
  /**
   * <pre>
   * Notifications send by the server.
   * </pre>
   *
   * <code>.nakama.realtime.Notifications notifications = 23 [json_name = "notifications"];</code>
   */
  com.heroiclabs.nakama.rtapi.NotificationsOrBuilder getNotificationsOrBuilder();

  /**
   * <pre>
   * RPC call or response.
   * </pre>
   *
   * <code>.nakama.api.Rpc rpc = 24 [json_name = "rpc"];</code>
   * @return Whether the rpc field is set.
   */
  boolean hasRpc();
  /**
   * <pre>
   * RPC call or response.
   * </pre>
   *
   * <code>.nakama.api.Rpc rpc = 24 [json_name = "rpc"];</code>
   * @return The rpc.
   */
  com.heroiclabs.nakama.api.Rpc getRpc();
  /**
   * <pre>
   * RPC call or response.
   * </pre>
   *
   * <code>.nakama.api.Rpc rpc = 24 [json_name = "rpc"];</code>
   */
  com.heroiclabs.nakama.api.RpcOrBuilder getRpcOrBuilder();

  /**
   * <pre>
   * An incoming status snapshot for some set of users.
   * </pre>
   *
   * <code>.nakama.realtime.Status status = 25 [json_name = "status"];</code>
   * @return Whether the status field is set.
   */
  boolean hasStatus();
  /**
   * <pre>
   * An incoming status snapshot for some set of users.
   * </pre>
   *
   * <code>.nakama.realtime.Status status = 25 [json_name = "status"];</code>
   * @return The status.
   */
  com.heroiclabs.nakama.rtapi.Status getStatus();
  /**
   * <pre>
   * An incoming status snapshot for some set of users.
   * </pre>
   *
   * <code>.nakama.realtime.Status status = 25 [json_name = "status"];</code>
   */
  com.heroiclabs.nakama.rtapi.StatusOrBuilder getStatusOrBuilder();

  /**
   * <pre>
   * Start following some set of users to receive their status updates.
   * </pre>
   *
   * <code>.nakama.realtime.StatusFollow status_follow = 26 [json_name = "statusFollow"];</code>
   * @return Whether the statusFollow field is set.
   */
  boolean hasStatusFollow();
  /**
   * <pre>
   * Start following some set of users to receive their status updates.
   * </pre>
   *
   * <code>.nakama.realtime.StatusFollow status_follow = 26 [json_name = "statusFollow"];</code>
   * @return The statusFollow.
   */
  com.heroiclabs.nakama.rtapi.StatusFollow getStatusFollow();
  /**
   * <pre>
   * Start following some set of users to receive their status updates.
   * </pre>
   *
   * <code>.nakama.realtime.StatusFollow status_follow = 26 [json_name = "statusFollow"];</code>
   */
  com.heroiclabs.nakama.rtapi.StatusFollowOrBuilder getStatusFollowOrBuilder();

  /**
   * <pre>
   * An incoming status update.
   * </pre>
   *
   * <code>.nakama.realtime.StatusPresenceEvent status_presence_event = 27 [json_name = "statusPresenceEvent"];</code>
   * @return Whether the statusPresenceEvent field is set.
   */
  boolean hasStatusPresenceEvent();
  /**
   * <pre>
   * An incoming status update.
   * </pre>
   *
   * <code>.nakama.realtime.StatusPresenceEvent status_presence_event = 27 [json_name = "statusPresenceEvent"];</code>
   * @return The statusPresenceEvent.
   */
  com.heroiclabs.nakama.rtapi.StatusPresenceEvent getStatusPresenceEvent();
  /**
   * <pre>
   * An incoming status update.
   * </pre>
   *
   * <code>.nakama.realtime.StatusPresenceEvent status_presence_event = 27 [json_name = "statusPresenceEvent"];</code>
   */
  com.heroiclabs.nakama.rtapi.StatusPresenceEventOrBuilder getStatusPresenceEventOrBuilder();

  /**
   * <pre>
   * Stop following some set of users to no longer receive their status updates.
   * </pre>
   *
   * <code>.nakama.realtime.StatusUnfollow status_unfollow = 28 [json_name = "statusUnfollow"];</code>
   * @return Whether the statusUnfollow field is set.
   */
  boolean hasStatusUnfollow();
  /**
   * <pre>
   * Stop following some set of users to no longer receive their status updates.
   * </pre>
   *
   * <code>.nakama.realtime.StatusUnfollow status_unfollow = 28 [json_name = "statusUnfollow"];</code>
   * @return The statusUnfollow.
   */
  com.heroiclabs.nakama.rtapi.StatusUnfollow getStatusUnfollow();
  /**
   * <pre>
   * Stop following some set of users to no longer receive their status updates.
   * </pre>
   *
   * <code>.nakama.realtime.StatusUnfollow status_unfollow = 28 [json_name = "statusUnfollow"];</code>
   */
  com.heroiclabs.nakama.rtapi.StatusUnfollowOrBuilder getStatusUnfollowOrBuilder();

  /**
   * <pre>
   * Set the user's own status.
   * </pre>
   *
   * <code>.nakama.realtime.StatusUpdate status_update = 29 [json_name = "statusUpdate"];</code>
   * @return Whether the statusUpdate field is set.
   */
  boolean hasStatusUpdate();
  /**
   * <pre>
   * Set the user's own status.
   * </pre>
   *
   * <code>.nakama.realtime.StatusUpdate status_update = 29 [json_name = "statusUpdate"];</code>
   * @return The statusUpdate.
   */
  com.heroiclabs.nakama.rtapi.StatusUpdate getStatusUpdate();
  /**
   * <pre>
   * Set the user's own status.
   * </pre>
   *
   * <code>.nakama.realtime.StatusUpdate status_update = 29 [json_name = "statusUpdate"];</code>
   */
  com.heroiclabs.nakama.rtapi.StatusUpdateOrBuilder getStatusUpdateOrBuilder();

  /**
   * <pre>
   * A data message delivered over a stream.
   * </pre>
   *
   * <code>.nakama.realtime.StreamData stream_data = 30 [json_name = "streamData"];</code>
   * @return Whether the streamData field is set.
   */
  boolean hasStreamData();
  /**
   * <pre>
   * A data message delivered over a stream.
   * </pre>
   *
   * <code>.nakama.realtime.StreamData stream_data = 30 [json_name = "streamData"];</code>
   * @return The streamData.
   */
  com.heroiclabs.nakama.rtapi.StreamData getStreamData();
  /**
   * <pre>
   * A data message delivered over a stream.
   * </pre>
   *
   * <code>.nakama.realtime.StreamData stream_data = 30 [json_name = "streamData"];</code>
   */
  com.heroiclabs.nakama.rtapi.StreamDataOrBuilder getStreamDataOrBuilder();

  /**
   * <pre>
   * Presence update for a particular stream.
   * </pre>
   *
   * <code>.nakama.realtime.StreamPresenceEvent stream_presence_event = 31 [json_name = "streamPresenceEvent"];</code>
   * @return Whether the streamPresenceEvent field is set.
   */
  boolean hasStreamPresenceEvent();
  /**
   * <pre>
   * Presence update for a particular stream.
   * </pre>
   *
   * <code>.nakama.realtime.StreamPresenceEvent stream_presence_event = 31 [json_name = "streamPresenceEvent"];</code>
   * @return The streamPresenceEvent.
   */
  com.heroiclabs.nakama.rtapi.StreamPresenceEvent getStreamPresenceEvent();
  /**
   * <pre>
   * Presence update for a particular stream.
   * </pre>
   *
   * <code>.nakama.realtime.StreamPresenceEvent stream_presence_event = 31 [json_name = "streamPresenceEvent"];</code>
   */
  com.heroiclabs.nakama.rtapi.StreamPresenceEventOrBuilder getStreamPresenceEventOrBuilder();

  /**
   * <pre>
   * Application-level heartbeat and connection check.
   * </pre>
   *
   * <code>.nakama.realtime.Ping ping = 32 [json_name = "ping"];</code>
   * @return Whether the ping field is set.
   */
  boolean hasPing();
  /**
   * <pre>
   * Application-level heartbeat and connection check.
   * </pre>
   *
   * <code>.nakama.realtime.Ping ping = 32 [json_name = "ping"];</code>
   * @return The ping.
   */
  com.heroiclabs.nakama.rtapi.Ping getPing();
  /**
   * <pre>
   * Application-level heartbeat and connection check.
   * </pre>
   *
   * <code>.nakama.realtime.Ping ping = 32 [json_name = "ping"];</code>
   */
  com.heroiclabs.nakama.rtapi.PingOrBuilder getPingOrBuilder();

  /**
   * <pre>
   * Application-level heartbeat and connection check response.
   * </pre>
   *
   * <code>.nakama.realtime.Pong pong = 33 [json_name = "pong"];</code>
   * @return Whether the pong field is set.
   */
  boolean hasPong();
  /**
   * <pre>
   * Application-level heartbeat and connection check response.
   * </pre>
   *
   * <code>.nakama.realtime.Pong pong = 33 [json_name = "pong"];</code>
   * @return The pong.
   */
  com.heroiclabs.nakama.rtapi.Pong getPong();
  /**
   * <pre>
   * Application-level heartbeat and connection check response.
   * </pre>
   *
   * <code>.nakama.realtime.Pong pong = 33 [json_name = "pong"];</code>
   */
  com.heroiclabs.nakama.rtapi.PongOrBuilder getPongOrBuilder();

  /**
   * <pre>
   * Incoming information about a party.
   * </pre>
   *
   * <code>.nakama.realtime.Party party = 34 [json_name = "party"];</code>
   * @return Whether the party field is set.
   */
  boolean hasParty();
  /**
   * <pre>
   * Incoming information about a party.
   * </pre>
   *
   * <code>.nakama.realtime.Party party = 34 [json_name = "party"];</code>
   * @return The party.
   */
  com.heroiclabs.nakama.rtapi.Party getParty();
  /**
   * <pre>
   * Incoming information about a party.
   * </pre>
   *
   * <code>.nakama.realtime.Party party = 34 [json_name = "party"];</code>
   */
  com.heroiclabs.nakama.rtapi.PartyOrBuilder getPartyOrBuilder();

  /**
   * <pre>
   * Create a party.
   * </pre>
   *
   * <code>.nakama.realtime.PartyCreate party_create = 35 [json_name = "partyCreate"];</code>
   * @return Whether the partyCreate field is set.
   */
  boolean hasPartyCreate();
  /**
   * <pre>
   * Create a party.
   * </pre>
   *
   * <code>.nakama.realtime.PartyCreate party_create = 35 [json_name = "partyCreate"];</code>
   * @return The partyCreate.
   */
  com.heroiclabs.nakama.rtapi.PartyCreate getPartyCreate();
  /**
   * <pre>
   * Create a party.
   * </pre>
   *
   * <code>.nakama.realtime.PartyCreate party_create = 35 [json_name = "partyCreate"];</code>
   */
  com.heroiclabs.nakama.rtapi.PartyCreateOrBuilder getPartyCreateOrBuilder();

  /**
   * <pre>
   * Join a party, or request to join if the party is not open.
   * </pre>
   *
   * <code>.nakama.realtime.PartyJoin party_join = 36 [json_name = "partyJoin"];</code>
   * @return Whether the partyJoin field is set.
   */
  boolean hasPartyJoin();
  /**
   * <pre>
   * Join a party, or request to join if the party is not open.
   * </pre>
   *
   * <code>.nakama.realtime.PartyJoin party_join = 36 [json_name = "partyJoin"];</code>
   * @return The partyJoin.
   */
  com.heroiclabs.nakama.rtapi.PartyJoin getPartyJoin();
  /**
   * <pre>
   * Join a party, or request to join if the party is not open.
   * </pre>
   *
   * <code>.nakama.realtime.PartyJoin party_join = 36 [json_name = "partyJoin"];</code>
   */
  com.heroiclabs.nakama.rtapi.PartyJoinOrBuilder getPartyJoinOrBuilder();

  /**
   * <pre>
   * Leave a party.
   * </pre>
   *
   * <code>.nakama.realtime.PartyLeave party_leave = 37 [json_name = "partyLeave"];</code>
   * @return Whether the partyLeave field is set.
   */
  boolean hasPartyLeave();
  /**
   * <pre>
   * Leave a party.
   * </pre>
   *
   * <code>.nakama.realtime.PartyLeave party_leave = 37 [json_name = "partyLeave"];</code>
   * @return The partyLeave.
   */
  com.heroiclabs.nakama.rtapi.PartyLeave getPartyLeave();
  /**
   * <pre>
   * Leave a party.
   * </pre>
   *
   * <code>.nakama.realtime.PartyLeave party_leave = 37 [json_name = "partyLeave"];</code>
   */
  com.heroiclabs.nakama.rtapi.PartyLeaveOrBuilder getPartyLeaveOrBuilder();

  /**
   * <pre>
   * Promote a new party leader.
   * </pre>
   *
   * <code>.nakama.realtime.PartyPromote party_promote = 38 [json_name = "partyPromote"];</code>
   * @return Whether the partyPromote field is set.
   */
  boolean hasPartyPromote();
  /**
   * <pre>
   * Promote a new party leader.
   * </pre>
   *
   * <code>.nakama.realtime.PartyPromote party_promote = 38 [json_name = "partyPromote"];</code>
   * @return The partyPromote.
   */
  com.heroiclabs.nakama.rtapi.PartyPromote getPartyPromote();
  /**
   * <pre>
   * Promote a new party leader.
   * </pre>
   *
   * <code>.nakama.realtime.PartyPromote party_promote = 38 [json_name = "partyPromote"];</code>
   */
  com.heroiclabs.nakama.rtapi.PartyPromoteOrBuilder getPartyPromoteOrBuilder();

  /**
   * <pre>
   * Announcement of a new party leader.
   * </pre>
   *
   * <code>.nakama.realtime.PartyLeader party_leader = 39 [json_name = "partyLeader"];</code>
   * @return Whether the partyLeader field is set.
   */
  boolean hasPartyLeader();
  /**
   * <pre>
   * Announcement of a new party leader.
   * </pre>
   *
   * <code>.nakama.realtime.PartyLeader party_leader = 39 [json_name = "partyLeader"];</code>
   * @return The partyLeader.
   */
  com.heroiclabs.nakama.rtapi.PartyLeader getPartyLeader();
  /**
   * <pre>
   * Announcement of a new party leader.
   * </pre>
   *
   * <code>.nakama.realtime.PartyLeader party_leader = 39 [json_name = "partyLeader"];</code>
   */
  com.heroiclabs.nakama.rtapi.PartyLeaderOrBuilder getPartyLeaderOrBuilder();

  /**
   * <pre>
   * Accept a request to join.
   * </pre>
   *
   * <code>.nakama.realtime.PartyAccept party_accept = 40 [json_name = "partyAccept"];</code>
   * @return Whether the partyAccept field is set.
   */
  boolean hasPartyAccept();
  /**
   * <pre>
   * Accept a request to join.
   * </pre>
   *
   * <code>.nakama.realtime.PartyAccept party_accept = 40 [json_name = "partyAccept"];</code>
   * @return The partyAccept.
   */
  com.heroiclabs.nakama.rtapi.PartyAccept getPartyAccept();
  /**
   * <pre>
   * Accept a request to join.
   * </pre>
   *
   * <code>.nakama.realtime.PartyAccept party_accept = 40 [json_name = "partyAccept"];</code>
   */
  com.heroiclabs.nakama.rtapi.PartyAcceptOrBuilder getPartyAcceptOrBuilder();

  /**
   * <pre>
   * Kick a party member, or decline a request to join.
   * </pre>
   *
   * <code>.nakama.realtime.PartyRemove party_remove = 41 [json_name = "partyRemove"];</code>
   * @return Whether the partyRemove field is set.
   */
  boolean hasPartyRemove();
  /**
   * <pre>
   * Kick a party member, or decline a request to join.
   * </pre>
   *
   * <code>.nakama.realtime.PartyRemove party_remove = 41 [json_name = "partyRemove"];</code>
   * @return The partyRemove.
   */
  com.heroiclabs.nakama.rtapi.PartyRemove getPartyRemove();
  /**
   * <pre>
   * Kick a party member, or decline a request to join.
   * </pre>
   *
   * <code>.nakama.realtime.PartyRemove party_remove = 41 [json_name = "partyRemove"];</code>
   */
  com.heroiclabs.nakama.rtapi.PartyRemoveOrBuilder getPartyRemoveOrBuilder();

  /**
   * <pre>
   * End a party, kicking all party members and closing it.
   * </pre>
   *
   * <code>.nakama.realtime.PartyClose party_close = 42 [json_name = "partyClose"];</code>
   * @return Whether the partyClose field is set.
   */
  boolean hasPartyClose();
  /**
   * <pre>
   * End a party, kicking all party members and closing it.
   * </pre>
   *
   * <code>.nakama.realtime.PartyClose party_close = 42 [json_name = "partyClose"];</code>
   * @return The partyClose.
   */
  com.heroiclabs.nakama.rtapi.PartyClose getPartyClose();
  /**
   * <pre>
   * End a party, kicking all party members and closing it.
   * </pre>
   *
   * <code>.nakama.realtime.PartyClose party_close = 42 [json_name = "partyClose"];</code>
   */
  com.heroiclabs.nakama.rtapi.PartyCloseOrBuilder getPartyCloseOrBuilder();

  /**
   * <pre>
   * Request a list of pending join requests for a party.
   * </pre>
   *
   * <code>.nakama.realtime.PartyJoinRequestList party_join_request_list = 43 [json_name = "partyJoinRequestList"];</code>
   * @return Whether the partyJoinRequestList field is set.
   */
  boolean hasPartyJoinRequestList();
  /**
   * <pre>
   * Request a list of pending join requests for a party.
   * </pre>
   *
   * <code>.nakama.realtime.PartyJoinRequestList party_join_request_list = 43 [json_name = "partyJoinRequestList"];</code>
   * @return The partyJoinRequestList.
   */
  com.heroiclabs.nakama.rtapi.PartyJoinRequestList getPartyJoinRequestList();
  /**
   * <pre>
   * Request a list of pending join requests for a party.
   * </pre>
   *
   * <code>.nakama.realtime.PartyJoinRequestList party_join_request_list = 43 [json_name = "partyJoinRequestList"];</code>
   */
  com.heroiclabs.nakama.rtapi.PartyJoinRequestListOrBuilder getPartyJoinRequestListOrBuilder();

  /**
   * <pre>
   * Incoming notification for one or more new presences attempting to join the party.
   * </pre>
   *
   * <code>.nakama.realtime.PartyJoinRequest party_join_request = 44 [json_name = "partyJoinRequest"];</code>
   * @return Whether the partyJoinRequest field is set.
   */
  boolean hasPartyJoinRequest();
  /**
   * <pre>
   * Incoming notification for one or more new presences attempting to join the party.
   * </pre>
   *
   * <code>.nakama.realtime.PartyJoinRequest party_join_request = 44 [json_name = "partyJoinRequest"];</code>
   * @return The partyJoinRequest.
   */
  com.heroiclabs.nakama.rtapi.PartyJoinRequest getPartyJoinRequest();
  /**
   * <pre>
   * Incoming notification for one or more new presences attempting to join the party.
   * </pre>
   *
   * <code>.nakama.realtime.PartyJoinRequest party_join_request = 44 [json_name = "partyJoinRequest"];</code>
   */
  com.heroiclabs.nakama.rtapi.PartyJoinRequestOrBuilder getPartyJoinRequestOrBuilder();

  /**
   * <pre>
   * Begin matchmaking as a party.
   * </pre>
   *
   * <code>.nakama.realtime.PartyMatchmakerAdd party_matchmaker_add = 45 [json_name = "partyMatchmakerAdd"];</code>
   * @return Whether the partyMatchmakerAdd field is set.
   */
  boolean hasPartyMatchmakerAdd();
  /**
   * <pre>
   * Begin matchmaking as a party.
   * </pre>
   *
   * <code>.nakama.realtime.PartyMatchmakerAdd party_matchmaker_add = 45 [json_name = "partyMatchmakerAdd"];</code>
   * @return The partyMatchmakerAdd.
   */
  com.heroiclabs.nakama.rtapi.PartyMatchmakerAdd getPartyMatchmakerAdd();
  /**
   * <pre>
   * Begin matchmaking as a party.
   * </pre>
   *
   * <code>.nakama.realtime.PartyMatchmakerAdd party_matchmaker_add = 45 [json_name = "partyMatchmakerAdd"];</code>
   */
  com.heroiclabs.nakama.rtapi.PartyMatchmakerAddOrBuilder getPartyMatchmakerAddOrBuilder();

  /**
   * <pre>
   * Cancel a party matchmaking process using a ticket.
   * </pre>
   *
   * <code>.nakama.realtime.PartyMatchmakerRemove party_matchmaker_remove = 46 [json_name = "partyMatchmakerRemove"];</code>
   * @return Whether the partyMatchmakerRemove field is set.
   */
  boolean hasPartyMatchmakerRemove();
  /**
   * <pre>
   * Cancel a party matchmaking process using a ticket.
   * </pre>
   *
   * <code>.nakama.realtime.PartyMatchmakerRemove party_matchmaker_remove = 46 [json_name = "partyMatchmakerRemove"];</code>
   * @return The partyMatchmakerRemove.
   */
  com.heroiclabs.nakama.rtapi.PartyMatchmakerRemove getPartyMatchmakerRemove();
  /**
   * <pre>
   * Cancel a party matchmaking process using a ticket.
   * </pre>
   *
   * <code>.nakama.realtime.PartyMatchmakerRemove party_matchmaker_remove = 46 [json_name = "partyMatchmakerRemove"];</code>
   */
  com.heroiclabs.nakama.rtapi.PartyMatchmakerRemoveOrBuilder getPartyMatchmakerRemoveOrBuilder();

  /**
   * <pre>
   * A response from starting a new party matchmaking process.
   * </pre>
   *
   * <code>.nakama.realtime.PartyMatchmakerTicket party_matchmaker_ticket = 47 [json_name = "partyMatchmakerTicket"];</code>
   * @return Whether the partyMatchmakerTicket field is set.
   */
  boolean hasPartyMatchmakerTicket();
  /**
   * <pre>
   * A response from starting a new party matchmaking process.
   * </pre>
   *
   * <code>.nakama.realtime.PartyMatchmakerTicket party_matchmaker_ticket = 47 [json_name = "partyMatchmakerTicket"];</code>
   * @return The partyMatchmakerTicket.
   */
  com.heroiclabs.nakama.rtapi.PartyMatchmakerTicket getPartyMatchmakerTicket();
  /**
   * <pre>
   * A response from starting a new party matchmaking process.
   * </pre>
   *
   * <code>.nakama.realtime.PartyMatchmakerTicket party_matchmaker_ticket = 47 [json_name = "partyMatchmakerTicket"];</code>
   */
  com.heroiclabs.nakama.rtapi.PartyMatchmakerTicketOrBuilder getPartyMatchmakerTicketOrBuilder();

  /**
   * <pre>
   * Incoming party data delivered from the server.
   * </pre>
   *
   * <code>.nakama.realtime.PartyData party_data = 48 [json_name = "partyData"];</code>
   * @return Whether the partyData field is set.
   */
  boolean hasPartyData();
  /**
   * <pre>
   * Incoming party data delivered from the server.
   * </pre>
   *
   * <code>.nakama.realtime.PartyData party_data = 48 [json_name = "partyData"];</code>
   * @return The partyData.
   */
  com.heroiclabs.nakama.rtapi.PartyData getPartyData();
  /**
   * <pre>
   * Incoming party data delivered from the server.
   * </pre>
   *
   * <code>.nakama.realtime.PartyData party_data = 48 [json_name = "partyData"];</code>
   */
  com.heroiclabs.nakama.rtapi.PartyDataOrBuilder getPartyDataOrBuilder();

  /**
   * <pre>
   * A client to server request to send data to a party.
   * </pre>
   *
   * <code>.nakama.realtime.PartyDataSend party_data_send = 49 [json_name = "partyDataSend"];</code>
   * @return Whether the partyDataSend field is set.
   */
  boolean hasPartyDataSend();
  /**
   * <pre>
   * A client to server request to send data to a party.
   * </pre>
   *
   * <code>.nakama.realtime.PartyDataSend party_data_send = 49 [json_name = "partyDataSend"];</code>
   * @return The partyDataSend.
   */
  com.heroiclabs.nakama.rtapi.PartyDataSend getPartyDataSend();
  /**
   * <pre>
   * A client to server request to send data to a party.
   * </pre>
   *
   * <code>.nakama.realtime.PartyDataSend party_data_send = 49 [json_name = "partyDataSend"];</code>
   */
  com.heroiclabs.nakama.rtapi.PartyDataSendOrBuilder getPartyDataSendOrBuilder();

  /**
   * <pre>
   * Presence update for a particular party.
   * </pre>
   *
   * <code>.nakama.realtime.PartyPresenceEvent party_presence_event = 50 [json_name = "partyPresenceEvent"];</code>
   * @return Whether the partyPresenceEvent field is set.
   */
  boolean hasPartyPresenceEvent();
  /**
   * <pre>
   * Presence update for a particular party.
   * </pre>
   *
   * <code>.nakama.realtime.PartyPresenceEvent party_presence_event = 50 [json_name = "partyPresenceEvent"];</code>
   * @return The partyPresenceEvent.
   */
  com.heroiclabs.nakama.rtapi.PartyPresenceEvent getPartyPresenceEvent();
  /**
   * <pre>
   * Presence update for a particular party.
   * </pre>
   *
   * <code>.nakama.realtime.PartyPresenceEvent party_presence_event = 50 [json_name = "partyPresenceEvent"];</code>
   */
  com.heroiclabs.nakama.rtapi.PartyPresenceEventOrBuilder getPartyPresenceEventOrBuilder();

  com.heroiclabs.nakama.rtapi.Envelope.MessageCase getMessageCase();
}
