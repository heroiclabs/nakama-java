// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: github.com/heroiclabs/nakama-common/rtapi/realtime.proto
// Protobuf Java Version: 4.28.2

package com.heroiclabs.nakama.rtapi;

/**
 * <pre>
 * Send realtime match data to the server.
 * </pre>
 *
 * Protobuf type {@code nakama.realtime.MatchDataSend}
 */
public final class MatchDataSend extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:nakama.realtime.MatchDataSend)
    MatchDataSendOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 28,
      /* patch= */ 2,
      /* suffix= */ "",
      MatchDataSend.class.getName());
  }
  // Use MatchDataSend.newBuilder() to construct.
  private MatchDataSend(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private MatchDataSend() {
    matchId_ = "";
    data_ = com.google.protobuf.ByteString.EMPTY;
    presences_ = java.util.Collections.emptyList();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.heroiclabs.nakama.rtapi.RealtimeProto.internal_static_nakama_realtime_MatchDataSend_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.heroiclabs.nakama.rtapi.RealtimeProto.internal_static_nakama_realtime_MatchDataSend_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.heroiclabs.nakama.rtapi.MatchDataSend.class, com.heroiclabs.nakama.rtapi.MatchDataSend.Builder.class);
  }

  public static final int MATCH_ID_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private volatile java.lang.Object matchId_ = "";
  /**
   * <pre>
   * The match unique ID.
   * </pre>
   *
   * <code>string match_id = 1 [json_name = "matchId"];</code>
   * @return The matchId.
   */
  @java.lang.Override
  public java.lang.String getMatchId() {
    java.lang.Object ref = matchId_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      matchId_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The match unique ID.
   * </pre>
   *
   * <code>string match_id = 1 [json_name = "matchId"];</code>
   * @return The bytes for matchId.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getMatchIdBytes() {
    java.lang.Object ref = matchId_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      matchId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int OP_CODE_FIELD_NUMBER = 2;
  private long opCode_ = 0L;
  /**
   * <pre>
   * Op code value.
   * </pre>
   *
   * <code>int64 op_code = 2 [json_name = "opCode"];</code>
   * @return The opCode.
   */
  @java.lang.Override
  public long getOpCode() {
    return opCode_;
  }

  public static final int DATA_FIELD_NUMBER = 3;
  private com.google.protobuf.ByteString data_ = com.google.protobuf.ByteString.EMPTY;
  /**
   * <pre>
   * Data payload, if any.
   * </pre>
   *
   * <code>bytes data = 3 [json_name = "data"];</code>
   * @return The data.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getData() {
    return data_;
  }

  public static final int PRESENCES_FIELD_NUMBER = 4;
  @SuppressWarnings("serial")
  private java.util.List<com.heroiclabs.nakama.rtapi.UserPresence> presences_;
  /**
   * <pre>
   * List of presences in the match to deliver to, if filtering is required. Otherwise deliver to everyone in the match.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence presences = 4 [json_name = "presences"];</code>
   */
  @java.lang.Override
  public java.util.List<com.heroiclabs.nakama.rtapi.UserPresence> getPresencesList() {
    return presences_;
  }
  /**
   * <pre>
   * List of presences in the match to deliver to, if filtering is required. Otherwise deliver to everyone in the match.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence presences = 4 [json_name = "presences"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.heroiclabs.nakama.rtapi.UserPresenceOrBuilder> 
      getPresencesOrBuilderList() {
    return presences_;
  }
  /**
   * <pre>
   * List of presences in the match to deliver to, if filtering is required. Otherwise deliver to everyone in the match.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence presences = 4 [json_name = "presences"];</code>
   */
  @java.lang.Override
  public int getPresencesCount() {
    return presences_.size();
  }
  /**
   * <pre>
   * List of presences in the match to deliver to, if filtering is required. Otherwise deliver to everyone in the match.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence presences = 4 [json_name = "presences"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.UserPresence getPresences(int index) {
    return presences_.get(index);
  }
  /**
   * <pre>
   * List of presences in the match to deliver to, if filtering is required. Otherwise deliver to everyone in the match.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence presences = 4 [json_name = "presences"];</code>
   */
  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.UserPresenceOrBuilder getPresencesOrBuilder(
      int index) {
    return presences_.get(index);
  }

  public static final int RELIABLE_FIELD_NUMBER = 5;
  private boolean reliable_ = false;
  /**
   * <pre>
   * True if the data should be sent reliably, false otherwise.
   * </pre>
   *
   * <code>bool reliable = 5 [json_name = "reliable"];</code>
   * @return The reliable.
   */
  @java.lang.Override
  public boolean getReliable() {
    return reliable_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessage.isStringEmpty(matchId_)) {
      com.google.protobuf.GeneratedMessage.writeString(output, 1, matchId_);
    }
    if (opCode_ != 0L) {
      output.writeInt64(2, opCode_);
    }
    if (!data_.isEmpty()) {
      output.writeBytes(3, data_);
    }
    for (int i = 0; i < presences_.size(); i++) {
      output.writeMessage(4, presences_.get(i));
    }
    if (reliable_ != false) {
      output.writeBool(5, reliable_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessage.isStringEmpty(matchId_)) {
      size += com.google.protobuf.GeneratedMessage.computeStringSize(1, matchId_);
    }
    if (opCode_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(2, opCode_);
    }
    if (!data_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(3, data_);
    }
    for (int i = 0; i < presences_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, presences_.get(i));
    }
    if (reliable_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(5, reliable_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.heroiclabs.nakama.rtapi.MatchDataSend)) {
      return super.equals(obj);
    }
    com.heroiclabs.nakama.rtapi.MatchDataSend other = (com.heroiclabs.nakama.rtapi.MatchDataSend) obj;

    if (!getMatchId()
        .equals(other.getMatchId())) return false;
    if (getOpCode()
        != other.getOpCode()) return false;
    if (!getData()
        .equals(other.getData())) return false;
    if (!getPresencesList()
        .equals(other.getPresencesList())) return false;
    if (getReliable()
        != other.getReliable()) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + MATCH_ID_FIELD_NUMBER;
    hash = (53 * hash) + getMatchId().hashCode();
    hash = (37 * hash) + OP_CODE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getOpCode());
    hash = (37 * hash) + DATA_FIELD_NUMBER;
    hash = (53 * hash) + getData().hashCode();
    if (getPresencesCount() > 0) {
      hash = (37 * hash) + PRESENCES_FIELD_NUMBER;
      hash = (53 * hash) + getPresencesList().hashCode();
    }
    hash = (37 * hash) + RELIABLE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getReliable());
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.heroiclabs.nakama.rtapi.MatchDataSend parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.heroiclabs.nakama.rtapi.MatchDataSend parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.heroiclabs.nakama.rtapi.MatchDataSend parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.heroiclabs.nakama.rtapi.MatchDataSend parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.heroiclabs.nakama.rtapi.MatchDataSend parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.heroiclabs.nakama.rtapi.MatchDataSend parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.heroiclabs.nakama.rtapi.MatchDataSend parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static com.heroiclabs.nakama.rtapi.MatchDataSend parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.heroiclabs.nakama.rtapi.MatchDataSend parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.heroiclabs.nakama.rtapi.MatchDataSend parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.heroiclabs.nakama.rtapi.MatchDataSend parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static com.heroiclabs.nakama.rtapi.MatchDataSend parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.heroiclabs.nakama.rtapi.MatchDataSend prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Send realtime match data to the server.
   * </pre>
   *
   * Protobuf type {@code nakama.realtime.MatchDataSend}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:nakama.realtime.MatchDataSend)
      com.heroiclabs.nakama.rtapi.MatchDataSendOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.heroiclabs.nakama.rtapi.RealtimeProto.internal_static_nakama_realtime_MatchDataSend_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.heroiclabs.nakama.rtapi.RealtimeProto.internal_static_nakama_realtime_MatchDataSend_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.heroiclabs.nakama.rtapi.MatchDataSend.class, com.heroiclabs.nakama.rtapi.MatchDataSend.Builder.class);
    }

    // Construct using com.heroiclabs.nakama.rtapi.MatchDataSend.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      matchId_ = "";
      opCode_ = 0L;
      data_ = com.google.protobuf.ByteString.EMPTY;
      if (presencesBuilder_ == null) {
        presences_ = java.util.Collections.emptyList();
      } else {
        presences_ = null;
        presencesBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000008);
      reliable_ = false;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.heroiclabs.nakama.rtapi.RealtimeProto.internal_static_nakama_realtime_MatchDataSend_descriptor;
    }

    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.MatchDataSend getDefaultInstanceForType() {
      return com.heroiclabs.nakama.rtapi.MatchDataSend.getDefaultInstance();
    }

    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.MatchDataSend build() {
      com.heroiclabs.nakama.rtapi.MatchDataSend result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.heroiclabs.nakama.rtapi.MatchDataSend buildPartial() {
      com.heroiclabs.nakama.rtapi.MatchDataSend result = new com.heroiclabs.nakama.rtapi.MatchDataSend(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(com.heroiclabs.nakama.rtapi.MatchDataSend result) {
      if (presencesBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0)) {
          presences_ = java.util.Collections.unmodifiableList(presences_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.presences_ = presences_;
      } else {
        result.presences_ = presencesBuilder_.build();
      }
    }

    private void buildPartial0(com.heroiclabs.nakama.rtapi.MatchDataSend result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.matchId_ = matchId_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.opCode_ = opCode_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.data_ = data_;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.reliable_ = reliable_;
      }
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.heroiclabs.nakama.rtapi.MatchDataSend) {
        return mergeFrom((com.heroiclabs.nakama.rtapi.MatchDataSend)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.heroiclabs.nakama.rtapi.MatchDataSend other) {
      if (other == com.heroiclabs.nakama.rtapi.MatchDataSend.getDefaultInstance()) return this;
      if (!other.getMatchId().isEmpty()) {
        matchId_ = other.matchId_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (other.getOpCode() != 0L) {
        setOpCode(other.getOpCode());
      }
      if (other.getData() != com.google.protobuf.ByteString.EMPTY) {
        setData(other.getData());
      }
      if (presencesBuilder_ == null) {
        if (!other.presences_.isEmpty()) {
          if (presences_.isEmpty()) {
            presences_ = other.presences_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensurePresencesIsMutable();
            presences_.addAll(other.presences_);
          }
          onChanged();
        }
      } else {
        if (!other.presences_.isEmpty()) {
          if (presencesBuilder_.isEmpty()) {
            presencesBuilder_.dispose();
            presencesBuilder_ = null;
            presences_ = other.presences_;
            bitField0_ = (bitField0_ & ~0x00000008);
            presencesBuilder_ = 
              com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                 getPresencesFieldBuilder() : null;
          } else {
            presencesBuilder_.addAllMessages(other.presences_);
          }
        }
      }
      if (other.getReliable() != false) {
        setReliable(other.getReliable());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              matchId_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 16: {
              opCode_ = input.readInt64();
              bitField0_ |= 0x00000002;
              break;
            } // case 16
            case 26: {
              data_ = input.readBytes();
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            case 34: {
              com.heroiclabs.nakama.rtapi.UserPresence m =
                  input.readMessage(
                      com.heroiclabs.nakama.rtapi.UserPresence.parser(),
                      extensionRegistry);
              if (presencesBuilder_ == null) {
                ensurePresencesIsMutable();
                presences_.add(m);
              } else {
                presencesBuilder_.addMessage(m);
              }
              break;
            } // case 34
            case 40: {
              reliable_ = input.readBool();
              bitField0_ |= 0x00000010;
              break;
            } // case 40
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.lang.Object matchId_ = "";
    /**
     * <pre>
     * The match unique ID.
     * </pre>
     *
     * <code>string match_id = 1 [json_name = "matchId"];</code>
     * @return The matchId.
     */
    public java.lang.String getMatchId() {
      java.lang.Object ref = matchId_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        matchId_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The match unique ID.
     * </pre>
     *
     * <code>string match_id = 1 [json_name = "matchId"];</code>
     * @return The bytes for matchId.
     */
    public com.google.protobuf.ByteString
        getMatchIdBytes() {
      java.lang.Object ref = matchId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        matchId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The match unique ID.
     * </pre>
     *
     * <code>string match_id = 1 [json_name = "matchId"];</code>
     * @param value The matchId to set.
     * @return This builder for chaining.
     */
    public Builder setMatchId(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      matchId_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The match unique ID.
     * </pre>
     *
     * <code>string match_id = 1 [json_name = "matchId"];</code>
     * @return This builder for chaining.
     */
    public Builder clearMatchId() {
      matchId_ = getDefaultInstance().getMatchId();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The match unique ID.
     * </pre>
     *
     * <code>string match_id = 1 [json_name = "matchId"];</code>
     * @param value The bytes for matchId to set.
     * @return This builder for chaining.
     */
    public Builder setMatchIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      matchId_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private long opCode_ ;
    /**
     * <pre>
     * Op code value.
     * </pre>
     *
     * <code>int64 op_code = 2 [json_name = "opCode"];</code>
     * @return The opCode.
     */
    @java.lang.Override
    public long getOpCode() {
      return opCode_;
    }
    /**
     * <pre>
     * Op code value.
     * </pre>
     *
     * <code>int64 op_code = 2 [json_name = "opCode"];</code>
     * @param value The opCode to set.
     * @return This builder for chaining.
     */
    public Builder setOpCode(long value) {

      opCode_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Op code value.
     * </pre>
     *
     * <code>int64 op_code = 2 [json_name = "opCode"];</code>
     * @return This builder for chaining.
     */
    public Builder clearOpCode() {
      bitField0_ = (bitField0_ & ~0x00000002);
      opCode_ = 0L;
      onChanged();
      return this;
    }

    private com.google.protobuf.ByteString data_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * Data payload, if any.
     * </pre>
     *
     * <code>bytes data = 3 [json_name = "data"];</code>
     * @return The data.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getData() {
      return data_;
    }
    /**
     * <pre>
     * Data payload, if any.
     * </pre>
     *
     * <code>bytes data = 3 [json_name = "data"];</code>
     * @param value The data to set.
     * @return This builder for chaining.
     */
    public Builder setData(com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      data_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Data payload, if any.
     * </pre>
     *
     * <code>bytes data = 3 [json_name = "data"];</code>
     * @return This builder for chaining.
     */
    public Builder clearData() {
      bitField0_ = (bitField0_ & ~0x00000004);
      data_ = getDefaultInstance().getData();
      onChanged();
      return this;
    }

    private java.util.List<com.heroiclabs.nakama.rtapi.UserPresence> presences_ =
      java.util.Collections.emptyList();
    private void ensurePresencesIsMutable() {
      if (!((bitField0_ & 0x00000008) != 0)) {
        presences_ = new java.util.ArrayList<com.heroiclabs.nakama.rtapi.UserPresence>(presences_);
        bitField0_ |= 0x00000008;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilder<
        com.heroiclabs.nakama.rtapi.UserPresence, com.heroiclabs.nakama.rtapi.UserPresence.Builder, com.heroiclabs.nakama.rtapi.UserPresenceOrBuilder> presencesBuilder_;

    /**
     * <pre>
     * List of presences in the match to deliver to, if filtering is required. Otherwise deliver to everyone in the match.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence presences = 4 [json_name = "presences"];</code>
     */
    public java.util.List<com.heroiclabs.nakama.rtapi.UserPresence> getPresencesList() {
      if (presencesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(presences_);
      } else {
        return presencesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * List of presences in the match to deliver to, if filtering is required. Otherwise deliver to everyone in the match.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence presences = 4 [json_name = "presences"];</code>
     */
    public int getPresencesCount() {
      if (presencesBuilder_ == null) {
        return presences_.size();
      } else {
        return presencesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * List of presences in the match to deliver to, if filtering is required. Otherwise deliver to everyone in the match.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence presences = 4 [json_name = "presences"];</code>
     */
    public com.heroiclabs.nakama.rtapi.UserPresence getPresences(int index) {
      if (presencesBuilder_ == null) {
        return presences_.get(index);
      } else {
        return presencesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * List of presences in the match to deliver to, if filtering is required. Otherwise deliver to everyone in the match.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence presences = 4 [json_name = "presences"];</code>
     */
    public Builder setPresences(
        int index, com.heroiclabs.nakama.rtapi.UserPresence value) {
      if (presencesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePresencesIsMutable();
        presences_.set(index, value);
        onChanged();
      } else {
        presencesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * List of presences in the match to deliver to, if filtering is required. Otherwise deliver to everyone in the match.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence presences = 4 [json_name = "presences"];</code>
     */
    public Builder setPresences(
        int index, com.heroiclabs.nakama.rtapi.UserPresence.Builder builderForValue) {
      if (presencesBuilder_ == null) {
        ensurePresencesIsMutable();
        presences_.set(index, builderForValue.build());
        onChanged();
      } else {
        presencesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * List of presences in the match to deliver to, if filtering is required. Otherwise deliver to everyone in the match.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence presences = 4 [json_name = "presences"];</code>
     */
    public Builder addPresences(com.heroiclabs.nakama.rtapi.UserPresence value) {
      if (presencesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePresencesIsMutable();
        presences_.add(value);
        onChanged();
      } else {
        presencesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * List of presences in the match to deliver to, if filtering is required. Otherwise deliver to everyone in the match.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence presences = 4 [json_name = "presences"];</code>
     */
    public Builder addPresences(
        int index, com.heroiclabs.nakama.rtapi.UserPresence value) {
      if (presencesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePresencesIsMutable();
        presences_.add(index, value);
        onChanged();
      } else {
        presencesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * List of presences in the match to deliver to, if filtering is required. Otherwise deliver to everyone in the match.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence presences = 4 [json_name = "presences"];</code>
     */
    public Builder addPresences(
        com.heroiclabs.nakama.rtapi.UserPresence.Builder builderForValue) {
      if (presencesBuilder_ == null) {
        ensurePresencesIsMutable();
        presences_.add(builderForValue.build());
        onChanged();
      } else {
        presencesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * List of presences in the match to deliver to, if filtering is required. Otherwise deliver to everyone in the match.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence presences = 4 [json_name = "presences"];</code>
     */
    public Builder addPresences(
        int index, com.heroiclabs.nakama.rtapi.UserPresence.Builder builderForValue) {
      if (presencesBuilder_ == null) {
        ensurePresencesIsMutable();
        presences_.add(index, builderForValue.build());
        onChanged();
      } else {
        presencesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * List of presences in the match to deliver to, if filtering is required. Otherwise deliver to everyone in the match.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence presences = 4 [json_name = "presences"];</code>
     */
    public Builder addAllPresences(
        java.lang.Iterable<? extends com.heroiclabs.nakama.rtapi.UserPresence> values) {
      if (presencesBuilder_ == null) {
        ensurePresencesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, presences_);
        onChanged();
      } else {
        presencesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * List of presences in the match to deliver to, if filtering is required. Otherwise deliver to everyone in the match.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence presences = 4 [json_name = "presences"];</code>
     */
    public Builder clearPresences() {
      if (presencesBuilder_ == null) {
        presences_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
      } else {
        presencesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * List of presences in the match to deliver to, if filtering is required. Otherwise deliver to everyone in the match.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence presences = 4 [json_name = "presences"];</code>
     */
    public Builder removePresences(int index) {
      if (presencesBuilder_ == null) {
        ensurePresencesIsMutable();
        presences_.remove(index);
        onChanged();
      } else {
        presencesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * List of presences in the match to deliver to, if filtering is required. Otherwise deliver to everyone in the match.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence presences = 4 [json_name = "presences"];</code>
     */
    public com.heroiclabs.nakama.rtapi.UserPresence.Builder getPresencesBuilder(
        int index) {
      return getPresencesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * List of presences in the match to deliver to, if filtering is required. Otherwise deliver to everyone in the match.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence presences = 4 [json_name = "presences"];</code>
     */
    public com.heroiclabs.nakama.rtapi.UserPresenceOrBuilder getPresencesOrBuilder(
        int index) {
      if (presencesBuilder_ == null) {
        return presences_.get(index);  } else {
        return presencesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * List of presences in the match to deliver to, if filtering is required. Otherwise deliver to everyone in the match.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence presences = 4 [json_name = "presences"];</code>
     */
    public java.util.List<? extends com.heroiclabs.nakama.rtapi.UserPresenceOrBuilder> 
         getPresencesOrBuilderList() {
      if (presencesBuilder_ != null) {
        return presencesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(presences_);
      }
    }
    /**
     * <pre>
     * List of presences in the match to deliver to, if filtering is required. Otherwise deliver to everyone in the match.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence presences = 4 [json_name = "presences"];</code>
     */
    public com.heroiclabs.nakama.rtapi.UserPresence.Builder addPresencesBuilder() {
      return getPresencesFieldBuilder().addBuilder(
          com.heroiclabs.nakama.rtapi.UserPresence.getDefaultInstance());
    }
    /**
     * <pre>
     * List of presences in the match to deliver to, if filtering is required. Otherwise deliver to everyone in the match.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence presences = 4 [json_name = "presences"];</code>
     */
    public com.heroiclabs.nakama.rtapi.UserPresence.Builder addPresencesBuilder(
        int index) {
      return getPresencesFieldBuilder().addBuilder(
          index, com.heroiclabs.nakama.rtapi.UserPresence.getDefaultInstance());
    }
    /**
     * <pre>
     * List of presences in the match to deliver to, if filtering is required. Otherwise deliver to everyone in the match.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence presences = 4 [json_name = "presences"];</code>
     */
    public java.util.List<com.heroiclabs.nakama.rtapi.UserPresence.Builder> 
         getPresencesBuilderList() {
      return getPresencesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilder<
        com.heroiclabs.nakama.rtapi.UserPresence, com.heroiclabs.nakama.rtapi.UserPresence.Builder, com.heroiclabs.nakama.rtapi.UserPresenceOrBuilder> 
        getPresencesFieldBuilder() {
      if (presencesBuilder_ == null) {
        presencesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
            com.heroiclabs.nakama.rtapi.UserPresence, com.heroiclabs.nakama.rtapi.UserPresence.Builder, com.heroiclabs.nakama.rtapi.UserPresenceOrBuilder>(
                presences_,
                ((bitField0_ & 0x00000008) != 0),
                getParentForChildren(),
                isClean());
        presences_ = null;
      }
      return presencesBuilder_;
    }

    private boolean reliable_ ;
    /**
     * <pre>
     * True if the data should be sent reliably, false otherwise.
     * </pre>
     *
     * <code>bool reliable = 5 [json_name = "reliable"];</code>
     * @return The reliable.
     */
    @java.lang.Override
    public boolean getReliable() {
      return reliable_;
    }
    /**
     * <pre>
     * True if the data should be sent reliably, false otherwise.
     * </pre>
     *
     * <code>bool reliable = 5 [json_name = "reliable"];</code>
     * @param value The reliable to set.
     * @return This builder for chaining.
     */
    public Builder setReliable(boolean value) {

      reliable_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * True if the data should be sent reliably, false otherwise.
     * </pre>
     *
     * <code>bool reliable = 5 [json_name = "reliable"];</code>
     * @return This builder for chaining.
     */
    public Builder clearReliable() {
      bitField0_ = (bitField0_ & ~0x00000010);
      reliable_ = false;
      onChanged();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:nakama.realtime.MatchDataSend)
  }

  // @@protoc_insertion_point(class_scope:nakama.realtime.MatchDataSend)
  private static final com.heroiclabs.nakama.rtapi.MatchDataSend DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.heroiclabs.nakama.rtapi.MatchDataSend();
  }

  public static com.heroiclabs.nakama.rtapi.MatchDataSend getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<MatchDataSend>
      PARSER = new com.google.protobuf.AbstractParser<MatchDataSend>() {
    @java.lang.Override
    public MatchDataSend parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<MatchDataSend> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<MatchDataSend> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.heroiclabs.nakama.rtapi.MatchDataSend getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

